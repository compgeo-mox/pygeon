"""Module contains vector virtual Lagrangean tests."""

import unittest
import numpy as np
import scipy.sparse as sps

import porepy as pp
import pygeon as pg


class VecVLagrange1_test(unittest.TestCase):
    def setup(self, sd):
        pg.convert_from_pp(sd)
        sd.compute_geometry()

        discr = pg.VecVLagrange1()
        M = discr.assemble_mass_matrix(sd)

        div = discr.assemble_div_matrix(sd)
        symgrad = discr.assemble_symgrad_matrix(sd)

        div_div = discr.assemble_div_div_matrix(sd)
        symgrad_symgrad = discr.assemble_symgrad_symgrad_matrix(sd)

        pen = discr.assemble_penalisation_matrix(sd)
        pen.data[abs(pen.data) < 1e-10] = 0

        diff = discr.assemble_diff_matrix(sd)

        stiff = discr.assemble_stiff_matrix(sd)
        stiff.data[abs(stiff.data) < 1e-10] = 0

        for X in [div, symgrad, div_div, pen, symgrad_symgrad, diff, stiff]:
            self.make_canonical(X)

        return M, div, symgrad, div_div, symgrad_symgrad, pen, diff, stiff, discr

    def make_canonical(self, A: sps.sparray):
        A.sum_duplicates()
        A.eliminate_zeros()
        A.sort_indices()

    def assemble_known(self, data, indices, indptr, shape=None):
        A = sps.csc_array((data, indices, indptr), shape=shape)
        self.make_canonical(A)
        return A

    def test_tri_grid(self):
        num_cells, dim = 2, 2
        sd = pp.StructuredTriangleGrid([num_cells] * dim, [1] * dim)

        M, div, symgrad, div_div, symgrad_symgrad, pen, diff, stiff, discr = self.setup(
            sd
        )

        # fmt: off
        M_known_data = np.array(
        [0.04166667, 0.01041667, 0.01041667, 0.02083333, 0.01041667,
        0.0625    , 0.01041667, 0.02083333, 0.02083333, 0.01041667,
        0.02083333, 0.01041667, 0.01041667, 0.0625    , 0.02083333,
        0.01041667, 0.02083333, 0.02083333, 0.02083333, 0.02083333,
        0.125     , 0.02083333, 0.02083333, 0.02083333, 0.02083333,
        0.01041667, 0.02083333, 0.0625    , 0.01041667, 0.01041667,
        0.02083333, 0.01041667, 0.02083333, 0.02083333, 0.01041667,
        0.0625    , 0.01041667, 0.02083333, 0.01041667, 0.01041667,
        0.04166667, 0.04166667, 0.01041667, 0.01041667, 0.02083333,
        0.01041667, 0.0625    , 0.01041667, 0.02083333, 0.02083333,
        0.01041667, 0.02083333, 0.01041667, 0.01041667, 0.0625    ,
        0.02083333, 0.01041667, 0.02083333, 0.02083333, 0.02083333,
        0.02083333, 0.125     , 0.02083333, 0.02083333, 0.02083333,
        0.02083333, 0.01041667, 0.02083333, 0.0625    , 0.01041667,
        0.01041667, 0.02083333, 0.01041667, 0.02083333, 0.02083333,
        0.01041667, 0.0625    , 0.01041667, 0.02083333, 0.01041667,
        0.01041667, 0.04166667])

        M_known_indices = np.array(
        [ 0,  1,  3,  4,  0,  1,  2,  4,  5,  1,  2,  5,  0,  3,  4,  6,  7,
         0,  1,  3,  4,  5,  7,  8,  1,  2,  4,  5,  8,  3,  6,  7,  3,  4,
         6,  7,  8,  4,  5,  7,  8,  9, 10, 12, 13,  9, 10, 11, 13, 14, 10,
        11, 14,  9, 12, 13, 15, 16,  9, 10, 12, 13, 14, 16, 17, 10, 11, 13,
        14, 17, 12, 15, 16, 12, 13, 15, 16, 17, 13, 14, 16, 17])

        M_known_indptr = np.array(
        [ 0,  4,  9, 12, 17, 24, 29, 32, 37, 41, 45, 50, 53, 58, 65, 70, 73,
        78, 82])

        # fmt: on

        M_known = self.assemble_known(M_known_data, M_known_indices, M_known_indptr)

        self.assertTrue(np.allclose(M.data, M_known.data))
        self.assertTrue(np.allclose(M.indices, M_known.indices))
        self.assertTrue(np.allclose(M.indptr, M_known.indptr))

        # fmt: off

        div_known_data = np.array(
        [-0.25,  0.25, -0.25,  0.25, -0.25, -0.25,  0.25, -0.25,  0.25,
        -0.25,  0.25,  0.25, -0.25,  0.25, -0.25,  0.25, -0.25, -0.25,
        -0.25, -0.25,  0.25, -0.25,  0.25,  0.25, -0.25, -0.25,  0.25,
        -0.25,  0.25,  0.25,  0.25,  0.25])

        div_known_indices = np.array(
        [0, 0, 2, 2, 1, 4, 1, 3, 4, 6, 3, 6, 5, 5, 7, 7, 1, 0, 3, 2, 1, 5,
        0, 3, 4, 7, 2, 6, 5, 4, 7, 6])

        div_known_indptr = np.array(
        [ 0,  1,  3,  4,  6, 10, 12, 13, 15, 16, 17, 19, 20, 22, 26, 28, 29,
        31, 32])

        # fmt: on
        div_known = self.assemble_known(
            div_known_data, div_known_indices, div_known_indptr
        )

        self.assertTrue(np.allclose(div.data, div_known.data))
        self.assertTrue(np.allclose(div.indices, div_known.indices))
        self.assertTrue(np.allclose(div.indptr, div_known.indptr))

        # fmt: off

        symgrad_known_data = np.array(
        [-0.25 , -0.125, -0.125,  0.25 , -0.125, -0.125, -0.25 , -0.125,
        -0.125,  0.25 , -0.125, -0.125, -0.25 ,  0.125,  0.125, -0.25 ,
        -0.125, -0.125,  0.125,  0.125,  0.25 , -0.25 ,  0.125,  0.125,
         0.25 , -0.125, -0.125, -0.25 , -0.125, -0.125,  0.125,  0.125,
         0.25 ,  0.25 , -0.125, -0.125, -0.25 ,  0.125,  0.125,  0.125,
         0.125,  0.25 , -0.25 ,  0.125,  0.125,  0.125,  0.125,  0.25 ,
        -0.125, -0.125, -0.25 ,  0.125,  0.125, -0.25 , -0.125, -0.125,
        -0.25 ,  0.125,  0.125, -0.25 , -0.125, -0.125,  0.25 , -0.125,
        -0.125, -0.25 ,  0.25 ,  0.125,  0.125, -0.125, -0.125,  0.25 ,
         0.125,  0.125, -0.25 , -0.125, -0.125, -0.25 ,  0.25 ,  0.125,
         0.125,  0.125,  0.125, -0.25 , -0.125, -0.125,  0.25 ,  0.25 ,
         0.125,  0.125, -0.125, -0.125,  0.25 ,  0.25 ,  0.125,  0.125])

        symgrad_known_indices = np.array(
        [ 0,  9, 17,  0,  8, 16,  2, 11, 19,  2, 10, 18,  1,  9, 17,  4, 13,
        21,  8, 16,  1,  3, 11, 19,  4, 12, 20,  6, 15, 23, 10, 18,  3,  6,
        14, 22,  5, 13, 21, 12, 20,  5,  7, 15, 23, 14, 22,  7,  8, 16, 25,
         8, 16, 24, 10, 18, 27, 10, 18, 26,  9, 17, 25, 12, 20, 29, 24,  9,
        17, 11, 19, 27, 12, 20, 28, 14, 22, 31, 26, 11, 19, 14, 22, 30, 13,
        21, 29, 28, 13, 21, 15, 23, 31, 30, 15, 23])

        symgrad_known_indptr = np.array(
        [ 0,  3,  9, 12, 18, 30, 36, 39, 45, 48, 51, 57, 60, 66, 78, 84, 87,
        93, 96])

        # fmt: on

        symgrad_known = self.assemble_known(
            symgrad_known_data, symgrad_known_indices, symgrad_known_indptr
        )

        self.assertTrue(np.allclose(symgrad.data, symgrad_known.data))
        self.assertTrue(np.allclose(symgrad.indices, symgrad_known.indices))
        self.assertTrue(np.allclose(symgrad.indptr, symgrad_known.indptr))

        # fmt: off

        div_div_known_data = np.array(
        [-0.5,  0.5, -0.5,  0.5,  0.5, -0.5, -0.5,  0.5, -0.5, -0.5,  1. ,
         0.5, -0.5,  0.5, -0.5,  0.5, -0.5,  0.5, -0.5, -1. ,  1. , -0.5,
         0.5,  0.5,  0.5, -1. , -0.5,  0.5, -1. , -1. ,  2. , -0.5,  0.5,
        -0.5,  0.5,  1. , -1. , -0.5,  0.5, -0.5,  0.5,  0.5, -0.5, -0.5,
        -0.5,  0.5, -0.5,  1. ,  0.5, -0.5,  0.5, -0.5, -0.5,  0.5, -0.5,
         0.5,  0.5, -1. ,  1. , -0.5,  0.5, -0.5, -0.5,  0.5, -0.5,  0.5,
        -0.5,  0.5, -0.5,  1. , -0.5,  0.5, -0.5, -0.5, -1. ,  0.5,  0.5,
         0.5, -1. ,  2. , -0.5,  0.5, -1. , -0.5,  0.5, -0.5, -0.5,  1. ,
        -0.5,  0.5,  0.5, -0.5,  0.5, -0.5, -0.5,  1. , -1. ,  0.5, -0.5,
         0.5,  0.5, -0.5,  0.5, -0.5])

        div_div_known_indices = np.array(
        [13, 10,  1,  0, 13,  0, 14, 11, 10,  2,  1, 14, 11,  2,  1,  9, 16,
        13, 12,  4,  3,  9, 10, 16, 12,  3, 17, 14, 13,  5,  4, 10, 17, 14,
        13,  5,  4, 15, 12,  7,  6, 15, 12,  6, 16, 13,  8,  7, 16, 13,  8,
         7, 12,  9,  4,  3,  0, 13, 10,  5,  4,  1, 14, 11,  2,  1,  9,  4,
        15, 12,  7,  6,  3,  0, 10,  5,  1,  3, 16, 13,  8,  7,  4, 11,  2,
         1, 17, 14,  5,  4, 15, 12,  7,  6,  3, 16, 13,  8,  7,  4, 17, 14,
         5,  4])

        div_div_known_indptr = np.array(
        [  0,   4,  11,  15,  21,  31,  37,  41,  48,  52,  56,  62,  66,
        73,  83,  90,  94, 100, 104])

        # fmt: on
        div_div_known = self.assemble_known(
            div_div_known_data, div_div_known_indices, div_div_known_indptr
        )

        self.assertTrue(np.allclose(div_div.data, div_div_known.data))
        self.assertTrue(np.allclose(div_div.indices, div_div_known.indices))
        self.assertTrue(np.allclose(div_div.indptr, div_div_known.indptr))

        # fmt: off

        symgrad_symgrad_known_data = 2 * np.array(
        [-0.5 , -0.25,  0.25, -0.25,  0.75,  0.25, -0.5 , -0.5 , -0.25,
         0.25, -0.25, -0.5 ,  1.5 , -0.25,  0.25, -0.25,  0.75, -0.5 ,
        -0.25,  0.25, -1.  , -0.25,  0.25, -0.25, -0.25,  1.5 , -0.25,
         0.25, -0.5 ,  0.25, -1.  ,  0.25, -1.  , -0.25,  0.25, -0.5 ,
        -0.5 ,  3.  ,  0.25, -0.25, -0.25, -0.25,  0.25, -0.25,  1.5 ,
        -1.  ,  0.25, -0.25, -0.5 ,  0.75, -0.25, -0.25, -0.5 ,  0.25,
        -0.25,  0.25, -0.5 ,  1.5 , -0.5 ,  0.25, -0.25, -0.25,  0.75,
        -0.5 , -0.25,  0.25, -0.5 ,  0.75, -0.25, -0.25, -0.25,  0.25,
        -1.  ,  1.5 , -0.25,  0.25, -0.25, -0.5 ,  0.75, -0.25,  0.25,
        -0.25, -0.5 ,  0.25, -0.5 ,  0.25, -0.5 ,  1.5 , -0.25, -0.25,
        -0.25, -1.  ,  0.25, -0.5 ,  0.25, -0.5 ,  0.25, -1.  ,  3.  ,
        -0.25,  0.25, -0.5 , -0.5 , -0.25, -0.5 ,  1.5 , -0.5 ,  0.25,
        -0.25,  0.25, -0.25,  0.75, -0.5 , -0.25,  0.25, -0.25,  0.25,
        -0.25, -0.25,  1.5 , -1.  , -0.25,  0.25, -0.5 ,  0.75, -0.25,
         0.25, -0.25])

        symgrad_symgrad_known_indices = np.array(
        [ 1, 13, 12,  3,  0,  9,  0,  2, 14, 13, 10,  4,  1, 11, 10,  5,  2,
         1,  0, 13,  4, 16, 15, 12,  6,  3,  9, 10,  1, 12,  3, 14,  5, 17,
        16, 13,  7,  4, 11,  2, 10, 14, 13,  8,  5,  4, 16, 15,  7,  6,  3,
        12,  6, 17, 16, 13,  8,  7,  4, 14,  5, 13,  8,  7, 10,  1, 12,  9,
         4,  9, 11,  2, 13, 10,  5,  4,  1, 14, 11, 10,  5,  2,  9,  0, 13,
         4, 15, 12,  7,  3,  0, 10,  1, 12,  3, 14,  5, 16, 13,  8,  7,  4,
        11,  1, 17, 14, 13,  8,  5,  4, 16, 15, 12,  6,  3, 15,  6,  3, 17,
        16, 13,  7,  4, 14, 17, 16,  7,  4])

        symgrad_symgrad_known_indptr = np.array(
        [  0,   5,  13,  18,  26,  38,  46,  51,  59,  64,  69,  77,  82,
        90, 102, 110, 115, 123, 128])

        # fmt: on

        symgrad_symgrad_known = self.assemble_known(
            symgrad_symgrad_known_data,
            symgrad_symgrad_known_indices,
            symgrad_symgrad_known_indptr,
        )

        self.assertTrue(np.allclose(symgrad_symgrad.data, symgrad_symgrad_known.data))
        self.assertTrue(
            np.allclose(symgrad_symgrad.indices, symgrad_symgrad_known.indices)
        )
        self.assertTrue(
            np.allclose(symgrad_symgrad.indptr, symgrad_symgrad_known.indptr)
        )

        self.assertTrue(np.allclose(pen.data, 0))

        diff_known = sps.block_array([[symgrad_known], [div_known]], format="csc")
        self.make_canonical(diff_known)

        self.assertTrue(np.allclose(diff.data, diff_known.data))
        self.assertTrue(np.allclose(diff.indices, diff_known.indices))
        self.assertTrue(np.allclose(diff.indptr, diff_known.indptr))

        pen_known = sps.csc_array(pen.shape)

        stiff_known = symgrad_symgrad_known + div_div_known + pen_known
        self.make_canonical(stiff_known)

        self.assertTrue(np.allclose(stiff.data, stiff_known.data))
        self.assertTrue(np.allclose(stiff.indices, stiff_known.indices))
        self.assertTrue(np.allclose(stiff.indptr, stiff_known.indptr))

        fun = lambda x: np.array([x[0] + x[1], x[0] * x[1]])
        vals = discr.interpolate(sd, fun)

        # fmt: off

        vals_known = np.array(
            [0.  , 0.5 , 1.  , 0.5 , 1.  , 1.5 , 1.  , 1.5 , 2.  , 0.  , 0.  ,
             0.  , 0.  , 0.25, 0.5 , 0.  , 0.5 , 1.  ])

        # fmt: on

        self.assertTrue(np.allclose(vals, vals_known))

    def test_cart_grid(self):
        num_cells, dim = 2, 2
        sd = pp.CartGrid([num_cells] * dim, [1] * dim)

        M, div, symgrad, div_div, symgrad_symgrad, pen, diff, stiff, discr = self.setup(
            sd
        )

        # fmt: off
        M_known_data = np.array(
        [ 0.08854167, -0.046875  , -0.046875  ,  0.06770833, -0.046875  ,
         0.17708333, -0.046875  ,  0.06770833, -0.09375   ,  0.06770833,
        -0.046875  ,  0.08854167,  0.06770833, -0.046875  , -0.046875  ,
         0.06770833,  0.17708333, -0.09375   , -0.046875  ,  0.06770833,
         0.06770833, -0.09375   ,  0.06770833, -0.09375   ,  0.35416667,
        -0.09375   ,  0.06770833, -0.09375   ,  0.06770833,  0.06770833,
        -0.046875  , -0.09375   ,  0.17708333,  0.06770833, -0.046875  ,
        -0.046875  ,  0.06770833,  0.08854167, -0.046875  ,  0.06770833,
        -0.09375   ,  0.06770833, -0.046875  ,  0.17708333, -0.046875  ,
         0.06770833, -0.046875  , -0.046875  ,  0.08854167,  0.08854167,
        -0.046875  , -0.046875  ,  0.06770833, -0.046875  ,  0.17708333,
        -0.046875  ,  0.06770833, -0.09375   ,  0.06770833, -0.046875  ,
         0.08854167,  0.06770833, -0.046875  , -0.046875  ,  0.06770833,
         0.17708333, -0.09375   , -0.046875  ,  0.06770833,  0.06770833,
        -0.09375   ,  0.06770833, -0.09375   ,  0.35416667, -0.09375   ,
         0.06770833, -0.09375   ,  0.06770833,  0.06770833, -0.046875  ,
        -0.09375   ,  0.17708333,  0.06770833, -0.046875  , -0.046875  ,
         0.06770833,  0.08854167, -0.046875  ,  0.06770833, -0.09375   ,
         0.06770833, -0.046875  ,  0.17708333, -0.046875  ,  0.06770833,
        -0.046875  , -0.046875  ,  0.08854167])

        M_known_indices = np.array(
        [ 0,  1,  3,  4,  0,  1,  2,  3,  4,  5,  1,  2,  4,  5,  0,  1,  3,
         4,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  8,  1,  2,  4,  5,  7,
         8,  3,  4,  6,  7,  3,  4,  5,  6,  7,  8,  4,  5,  7,  8,  9, 10,
        12, 13,  9, 10, 11, 12, 13, 14, 10, 11, 13, 14,  9, 10, 12, 13, 15,
        16,  9, 10, 11, 12, 13, 14, 15, 16, 17, 10, 11, 13, 14, 16, 17, 12,
        13, 15, 16, 12, 13, 14, 15, 16, 17, 13, 14, 16, 17])

        M_known_indptr = np.array(
        [ 0,  4, 10, 14, 20, 29, 35, 39, 45, 49, 53, 59, 63, 69, 78, 84, 88,
        94, 98])

        # fmt: on

        M_known = self.assemble_known(M_known_data, M_known_indices, M_known_indptr)

        self.assertTrue(np.allclose(M.data, M_known.data))
        self.assertTrue(np.allclose(M.indices, M_known.indices))
        self.assertTrue(np.allclose(M.indptr, M_known.indptr))

        # fmt: off

        div_known_data = np.array(
        [-0.25,  0.25, -0.25,  0.25, -0.25, -0.25,  0.25, -0.25,  0.25,
        -0.25,  0.25,  0.25, -0.25,  0.25, -0.25,  0.25, -0.25, -0.25,
        -0.25, -0.25,  0.25, -0.25,  0.25,  0.25, -0.25, -0.25,  0.25,
        -0.25,  0.25,  0.25,  0.25,  0.25])

        div_known_indices = np.array(
        [0, 0, 1, 1, 0, 2, 0, 1, 2, 3, 1, 3, 2, 2, 3, 3, 0, 0, 1, 1, 0, 2,
        0, 1, 2, 3, 1, 3, 2, 2, 3, 3])

        div_known_indptr = np.array(
        [ 0,  1,  3,  4,  6, 10, 12, 13, 15, 16, 17, 19, 20, 22, 26, 28, 29,
        31, 32])

        # fmt: on
        div_known = self.assemble_known(
            div_known_data, div_known_indices, div_known_indptr
        )

        self.assertTrue(np.allclose(div.data, div_known.data))
        self.assertTrue(np.allclose(div.indices, div_known.indices))
        self.assertTrue(np.allclose(div.indptr, div_known.indptr))

        # fmt: off

        symgrad_known_data = np.array(
        [-0.25 , -0.125, -0.125,  0.25 , -0.125, -0.125, -0.25 , -0.125,
        -0.125,  0.25 , -0.125, -0.125, -0.25 ,  0.125,  0.125, -0.25 ,
        -0.125, -0.125,  0.25 ,  0.125,  0.125, -0.25 ,  0.125,  0.125,
         0.25 , -0.125, -0.125, -0.25 , -0.125, -0.125,  0.25 ,  0.125,
         0.125,  0.25 , -0.125, -0.125, -0.25 ,  0.125,  0.125,  0.25 ,
         0.125,  0.125, -0.25 ,  0.125,  0.125,  0.25 ,  0.125,  0.125,
        -0.125, -0.125, -0.25 ,  0.125,  0.125, -0.25 , -0.125, -0.125,
        -0.25 ,  0.125,  0.125, -0.25 , -0.125, -0.125,  0.25 , -0.125,
        -0.125, -0.25 ,  0.125,  0.125,  0.25 , -0.125, -0.125,  0.25 ,
         0.125,  0.125, -0.25 , -0.125, -0.125, -0.25 ,  0.125,  0.125,
         0.25 ,  0.125,  0.125, -0.25 , -0.125, -0.125,  0.25 ,  0.125,
         0.125,  0.25 , -0.125, -0.125,  0.25 ,  0.125,  0.125,  0.25 ])

        symgrad_known_indices = np.array(
        [ 0,  4,  8,  0,  4,  8,  1,  5,  9,  1,  5,  9,  0,  4,  8,  2,  6,
        10,  0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11,  1,  5,  9,  3,
         7, 11,  2,  6, 10,  2,  6, 10,  3,  7, 11,  3,  7, 11,  4,  8, 12,
         4,  8, 12,  5,  9, 13,  5,  9, 13,  4,  8, 12,  6, 10, 14,  4,  8,
        12,  5,  9, 13,  6, 10, 14,  7, 11, 15,  5,  9, 13,  7, 11, 15,  6,
        10, 14,  6, 10, 14,  7, 11, 15,  7, 11, 15])

        symgrad_known_indptr = np.array(
        [ 0,  3,  9, 12, 18, 30, 36, 39, 45, 48, 51, 57, 60, 66, 78, 84, 87,
        93, 96])

        # fmt: on
        symgrad_known = self.assemble_known(
            symgrad_known_data, symgrad_known_indices, symgrad_known_indptr
        )

        self.assertTrue(np.allclose(symgrad.data, symgrad_known.data))
        self.assertTrue(np.allclose(symgrad.indices, symgrad_known.indices))
        self.assertTrue(np.allclose(symgrad.indptr, symgrad_known.indptr))

        # fmt: off

        div_div_known_data = np.array(
        [-0.25, -0.25,  0.25,  0.25, -0.25,  0.25, -0.25,  0.25,  0.25,
        -0.25, -0.25, -0.25, -0.25,  0.25, -0.25,  0.5 , -0.25,  0.5 ,
         0.25,  0.25, -0.25, -0.25,  0.25, -0.25,  0.25, -0.25,  0.25,
         0.25, -0.25,  0.25, -0.25, -0.25, -0.25,  0.25, -0.5 ,  0.5 ,
        -0.25, -0.25,  0.25, -0.25,  0.5 ,  0.25, -0.25, -0.5 , -0.25,
        -0.25,  0.5 , -0.5 ,  1.  , -0.25, -0.25,  0.25, -0.25,  0.25,
         0.25,  0.25, -0.25,  0.5 , -0.5 , -0.25, -0.25,  0.25,  0.25,
        -0.25,  0.25, -0.25,  0.25,  0.25, -0.25, -0.25, -0.25, -0.25,
         0.25, -0.25,  0.5 , -0.25,  0.5 ,  0.25,  0.25, -0.25, -0.25,
         0.25, -0.25,  0.25, -0.25, -0.25, -0.25,  0.25,  0.25, -0.25,
         0.25, -0.25,  0.25, -0.25,  0.25,  0.25,  0.25, -0.25, -0.5 ,
         0.25,  0.5 , -0.25, -0.25, -0.25, -0.25,  0.25,  0.25, -0.25,
         0.25, -0.25,  0.25, -0.25, -0.25,  0.25, -0.25, -0.25, -0.25,
         0.5 ,  0.5 , -0.25,  0.25, -0.25, -0.25, -0.25, -0.5 ,  0.25,
        -0.25,  0.5 ,  0.25, -0.25, -0.5 ,  0.5 ,  1.  , -0.25, -0.25,
        -0.25,  0.25, -0.25, -0.25, -0.25,  0.5 ,  0.5 , -0.25,  0.25,
         0.25,  0.25, -0.25, -0.25,  0.25, -0.25,  0.25, -0.25,  0.25,
        -0.25, -0.25, -0.25,  0.25,  0.5 , -0.25, -0.5 ,  0.25,  0.25,
         0.25,  0.25, -0.25, -0.25,  0.25, -0.25,  0.25, -0.25])

        div_div_known_indices = np.array(
        [13, 12, 10,  9,  4,  3,  1,  0, 12,  9,  3,  0, 14, 11,  5,  4,  2,
         1, 14, 13, 11, 10,  5,  4,  2,  1, 10,  9,  1,  0, 16, 15,  7,  6,
         4,  3,  9,  0, 11,  2,  1, 15,  6,  3, 17,  8,  7,  5,  4, 11, 10,
         2,  1, 17, 16,  8,  7,  5,  4, 16, 15, 13, 12,  7,  6,  4,  3, 15,
        12,  6,  3, 17, 14,  8,  7,  5,  4, 17, 16, 14, 13,  8,  7,  5,  4,
        13, 12, 10,  9,  4,  3,  1,  0, 12,  9,  3,  0, 14, 13, 11, 10,  5,
         2, 14, 13, 11, 10,  5,  4,  2,  1, 10,  9,  1,  0, 16, 15, 13, 12,
         7,  6,  9,  0, 11, 10,  2, 15, 12,  6, 17, 16, 14, 13,  8, 11, 10,
         2,  1, 17, 16, 14, 13,  8,  7, 16, 15, 13, 12,  7,  6,  4,  3, 15,
        12,  6,  3, 17, 16, 14, 13,  8,  5, 17, 16, 14, 13,  8,  7,  5,  4])

        div_div_known_indptr = np.array(
        [  0,   8,  18,  26,  36,  49,  59,  67,  77,  85,  93, 103, 111,
        121, 134, 144, 152, 162, 170])

        # fmt: on

        div_div_known = self.assemble_known(
            div_div_known_data, div_div_known_indices, div_div_known_indptr
        )

        self.assertTrue(np.allclose(div_div.data, div_div_known.data))
        self.assertTrue(np.allclose(div_div.indices, div_div_known.indices))
        self.assertTrue(np.allclose(div_div.indptr, div_div_known.indptr))

        # fmt: off

        symgrad_symgrad_known_data = 2 * np.array(
        [-0.125,  0.125, -0.125,  0.125, -0.375,  0.125, -0.125,  0.375,
         0.125,  0.125, -0.375, -0.125, -0.125, -0.125, -0.375,  0.25 ,
        -0.125,  0.75 , -0.125,  0.125, -0.125,  0.125,  0.125, -0.375,
         0.375, -0.125,  0.125, -0.125, -0.375,  0.125, -0.125,  0.125,
        -0.375,  0.125, -0.25 ,  0.75 , -0.125, -0.375,  0.125, -0.375,
         0.25 ,  0.125, -0.375, -0.25 , -0.125, -0.375,  0.25 , -0.25 ,
         1.5  ,  0.125, -0.125,  0.125, -0.375, -0.125,  0.125,  0.125,
        -0.375,  0.75 , -0.25 ,  0.125, -0.125,  0.125, -0.125, -0.125,
         0.375, -0.375,  0.125, -0.125, -0.125, -0.125, -0.375,  0.125,
         0.125, -0.125,  0.75 , -0.375,  0.25 ,  0.125, -0.125,  0.125,
        -0.125,  0.375, -0.125,  0.125, -0.375, -0.375, -0.125,  0.125,
         0.375, -0.125, -0.125,  0.125,  0.125, -0.375,  0.125,  0.125,
        -0.125, -0.375, -0.25 ,  0.125,  0.75 , -0.125,  0.125, -0.125,
        -0.375,  0.375,  0.125,  0.125,  0.125, -0.125, -0.125, -0.375,
        -0.125,  0.125,  0.125, -0.375, -0.125,  0.25 ,  0.75 , -0.125,
        -0.125, -0.375, -0.125, -0.375, -0.25 ,  0.125, -0.375,  0.25 ,
         0.125, -0.375, -0.25 ,  0.25 ,  1.5  , -0.125, -0.125, -0.375,
        -0.125, -0.125, -0.125, -0.375,  0.75 ,  0.25 ,  0.125,  0.125,
         0.125,  0.375, -0.375, -0.125, -0.125, -0.125,  0.125,  0.125,
         0.125, -0.375,  0.125, -0.125,  0.125,  0.75 , -0.375, -0.25 ,
        -0.125,  0.125,  0.375,  0.125, -0.125, -0.375,  0.125,  0.125,
        -0.125, -0.125])

        symgrad_symgrad_known_indices = np.array(
        [13, 12, 10,  9,  4,  3,  1,  0, 12,  9,  3,  0, 14, 11,  5,  4,  2,
         1, 14, 13, 11, 10,  5,  4,  2,  1, 10,  9,  1,  0, 16, 15,  7,  6,
         4,  3,  9,  0, 11,  2,  1, 15,  6,  3, 17,  8,  7,  5,  4, 11, 10,
         2,  1, 17, 16,  8,  7,  5,  4, 16, 15, 13, 12,  7,  6,  4,  3, 15,
        12,  6,  3, 17, 14,  8,  7,  5,  4, 17, 16, 14, 13,  8,  7,  5,  4,
        13, 12, 10,  9,  4,  3,  1,  0, 12,  9,  3,  0, 14, 13, 11, 10,  5,
         2, 14, 13, 11, 10,  5,  4,  2,  1, 10,  9,  1,  0, 16, 15, 13, 12,
         7,  6,  9,  0, 11, 10,  2, 15, 12,  6, 17, 16, 14, 13,  8, 11, 10,
         2,  1, 17, 16, 14, 13,  8,  7, 16, 15, 13, 12,  7,  6,  4,  3, 15,
        12,  6,  3, 17, 16, 14, 13,  8,  5, 17, 16, 14, 13,  8,  7,  5,  4])

        symgrad_symgrad_known_indptr = np.array(
        [  0,   8,  18,  26,  36,  49,  59,  67,  77,  85,  93, 103, 111,
        121, 134, 144, 152, 162, 170])

        # fmt: on

        symgrad_symgrad_known = self.assemble_known(
            symgrad_symgrad_known_data,
            symgrad_symgrad_known_indices,
            symgrad_symgrad_known_indptr,
        )

        self.assertTrue(np.allclose(symgrad_symgrad.data, symgrad_symgrad_known.data))
        self.assertTrue(
            np.allclose(symgrad_symgrad.indices, symgrad_symgrad_known.indices)
        )
        self.assertTrue(
            np.allclose(symgrad_symgrad.indptr, symgrad_symgrad_known.indptr)
        )

        # fmt: off

        pen_known_data = np.array(
        [ 0.25, -0.25, -0.25,  0.25, -0.25,  0.5 , -0.25,  0.25, -0.5 ,
         0.25, -0.25,  0.25,  0.25, -0.25, -0.25,  0.25,  0.5 , -0.5 ,
        -0.25,  0.25,  0.25, -0.5 ,  0.25, -0.5 ,  1.  , -0.5 ,  0.25,
        -0.5 ,  0.25,  0.25, -0.25, -0.5 ,  0.5 ,  0.25, -0.25, -0.25,
         0.25,  0.25, -0.25,  0.25, -0.5 ,  0.25, -0.25,  0.5 , -0.25,
         0.25, -0.25, -0.25,  0.25,  0.25, -0.25, -0.25,  0.25, -0.25,
         0.5 , -0.25,  0.25, -0.5 ,  0.25, -0.25,  0.25,  0.25, -0.25,
        -0.25,  0.25,  0.5 , -0.5 , -0.25,  0.25,  0.25, -0.5 ,  0.25,
        -0.5 ,  1.  , -0.5 ,  0.25, -0.5 ,  0.25,  0.25, -0.25, -0.5 ,
         0.5 ,  0.25, -0.25, -0.25,  0.25,  0.25, -0.25,  0.25, -0.5 ,
         0.25, -0.25,  0.5 , -0.25,  0.25, -0.25, -0.25,  0.25])

        pen_known_indices = np.array(
        [ 0,  1,  3,  4,  0,  1,  2,  3,  4,  5,  1,  2,  4,  5,  0,  1,  3,
         4,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  8,  1,  2,  4,  5,  7,
         8,  3,  4,  6,  7,  3,  4,  5,  6,  7,  8,  4,  5,  7,  8,  9, 10,
        12, 13,  9, 10, 11, 12, 13, 14, 10, 11, 13, 14,  9, 10, 12, 13, 15,
        16,  9, 10, 11, 12, 13, 14, 15, 16, 17, 10, 11, 13, 14, 16, 17, 12,
        13, 15, 16, 12, 13, 14, 15, 16, 17, 13, 14, 16, 17])

        pen_known_indptr = np.array(
        [ 0,  4, 10, 14, 20, 29, 35, 39, 45, 49, 53, 59, 63, 69, 78, 84, 88,
        94, 98])

        # fmt: on

        pen_known = self.assemble_known(
            pen_known_data, pen_known_indices, pen_known_indptr
        )

        self.assertTrue(np.allclose(pen.data, pen_known.data))
        self.assertTrue(np.allclose(pen.indices, pen_known.indices))
        self.assertTrue(np.allclose(pen.indptr, pen_known.indptr))

        stiff_known = symgrad_symgrad_known + div_div_known + pen_known
        self.make_canonical(stiff_known)

        self.assertTrue(np.allclose(stiff.data, stiff_known.data))
        self.assertTrue(np.allclose(stiff.indices, stiff_known.indices))
        self.assertTrue(np.allclose(stiff.indptr, stiff_known.indptr))

        fun = lambda x: np.array([x[0] + x[1], x[0] * x[1]])
        vals = discr.interpolate(sd, fun)

        # fmt: off

        vals_known = np.array(
            [0.  , 0.5 , 1.  , 0.5 , 1.  , 1.5 , 1.  , 1.5 , 2.  , 0.  , 0.  ,
             0.  , 0.  , 0.25, 0.5 , 0.  , 0.5 , 1.  ])

        # fmt: on

        self.assertTrue(np.allclose(vals, vals_known))

    def test_octagon_grid(self):
        dim = 2
        sd = pg.OctagonGrid([1] * dim)

        M, div, symgrad, div_div, symgrad_symgrad, pen, diff, stiff, discr = self.setup(
            sd
        )

        # fmt: off
        M_known_data = np.array(
        [ 0.54954042, -0.22879652,  0.04757809,  0.10481714, -0.22522209,
        -0.09060922, -0.09060922,  0.04757809,  0.00357443, -0.22879652,
         0.54954042,  0.10481714,  0.04757809, -0.09060922, -0.22522209,
         0.04757809, -0.09060922,  0.00357443,  0.04757809,  0.10481714,
         0.54954042, -0.22879652, -0.09060922,  0.04757809, -0.22522209,
        -0.09060922,  0.00357443,  0.10481714,  0.04757809, -0.22879652,
         0.54954042,  0.04757809, -0.09060922, -0.09060922, -0.22522209,
         0.00357443, -0.22522209, -0.09060922, -0.09060922,  0.04757809,
         0.54954042,  0.04757809, -0.22879652,  0.10481714,  0.00357443,
        -0.09060922, -0.22522209,  0.04757809, -0.09060922,  0.04757809,
         0.54954042,  0.10481714, -0.22879652,  0.00357443, -0.09060922,
         0.04757809, -0.22522209, -0.09060922, -0.22879652,  0.10481714,
         0.54954042,  0.04757809,  0.00357443,  0.04757809, -0.09060922,
        -0.09060922, -0.22522209,  0.10481714, -0.22879652,  0.04757809,
         0.54954042,  0.00357443,  0.00357443,  0.00357443,  0.00714887,
         0.00357443,  0.00357443,  0.00714887,  0.00357443,  0.00357443,
         0.00714887,  0.00357443,  0.00357443,  0.00714887,  0.54954042,
        -0.22879652,  0.04757809,  0.10481714, -0.22522209, -0.09060922,
        -0.09060922,  0.04757809,  0.00357443, -0.22879652,  0.54954042,
         0.10481714,  0.04757809, -0.09060922, -0.22522209,  0.04757809,
        -0.09060922,  0.00357443,  0.04757809,  0.10481714,  0.54954042,
        -0.22879652, -0.09060922,  0.04757809, -0.22522209, -0.09060922,
         0.00357443,  0.10481714,  0.04757809, -0.22879652,  0.54954042,
         0.04757809, -0.09060922, -0.09060922, -0.22522209,  0.00357443,
        -0.22522209, -0.09060922, -0.09060922,  0.04757809,  0.54954042,
         0.04757809, -0.22879652,  0.10481714,  0.00357443, -0.09060922,
        -0.22522209,  0.04757809, -0.09060922,  0.04757809,  0.54954042,
         0.10481714, -0.22879652,  0.00357443, -0.09060922,  0.04757809,
        -0.22522209, -0.09060922, -0.22879652,  0.10481714,  0.54954042,
         0.04757809,  0.00357443,  0.04757809, -0.09060922, -0.09060922,
        -0.22522209,  0.10481714, -0.22879652,  0.04757809,  0.54954042,
         0.00357443,  0.00357443,  0.00357443,  0.00714887,  0.00357443,
         0.00357443,  0.00714887,  0.00357443,  0.00357443,  0.00714887,
         0.00357443,  0.00357443,  0.00714887])

        M_known_indices = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  0,  1,  2,  3,  4,  5,  6,  7,
         9,  0,  1,  2,  3,  4,  5,  6,  7, 10,  0,  1,  2,  3,  4,  5,  6,
         7, 11,  0,  1,  2,  3,  4,  5,  6,  7,  8,  0,  1,  2,  3,  4,  5,
         6,  7,  9,  0,  1,  2,  3,  4,  5,  6,  7, 10,  0,  1,  2,  3,  4,
         5,  6,  7, 11,  0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11, 12,
        13, 14, 15, 16, 17, 18, 19, 20, 12, 13, 14, 15, 16, 17, 18, 19, 21,
        12, 13, 14, 15, 16, 17, 18, 19, 22, 12, 13, 14, 15, 16, 17, 18, 19,
        23, 12, 13, 14, 15, 16, 17, 18, 19, 20, 12, 13, 14, 15, 16, 17, 18,
        19, 21, 12, 13, 14, 15, 16, 17, 18, 19, 22, 12, 13, 14, 15, 16, 17,
        18, 19, 23, 12, 16, 20, 13, 17, 21, 14, 18, 22, 15, 19, 23])

        M_known_indptr = np.array(
        [ 0,   9,  18,  27,  36,  45,  54,  63,  72,  75,  78,  81,  84,
        93, 102, 111, 120, 129, 138, 147, 156, 159, 162, 165, 168])

        # fmt: on
        M_known = self.assemble_known(M_known_data, M_known_indices, M_known_indptr)

        self.assertTrue(np.allclose(M.data, M_known.data))
        self.assertTrue(np.allclose(M.indices, M_known.indices))
        self.assertTrue(np.allclose(M.indptr, M_known.indptr))

        # fmt: off

        div_known_data = np.array(
        [-0.14644661,  0.14644661,  0.14644661, -0.14644661, -0.14644661,
         0.14644661,  0.14644661, -0.14644661, -0.35355339,  0.35355339,
        -0.35355339,  0.35355339, -0.14644661,  0.14644661, -0.14644661,
         0.14644661, -0.35355339, -0.35355339,  0.35355339,  0.35355339,
        -0.14644661,  0.14644661, -0.14644661,  0.14644661,  0.14644661,
        -0.14644661,  0.14644661, -0.14644661, -0.14644661, -0.14644661,
         0.14644661,  0.14644661])

        div_known_indices = np.array(
        [0, 1, 0, 2, 0, 3, 0, 4, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 0, 0, 1,
        0, 2, 0, 3, 0, 4, 1, 2, 3, 4])

        div_known_indptr = np.array(
        [ 0,  2,  4,  6,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        22, 24, 26, 28, 29, 30, 31, 32])

        # fmt: on

        div_known = self.assemble_known(
            div_known_data, div_known_indices, div_known_indptr
        )

        self.assertTrue(np.allclose(div.data, div_known.data))
        self.assertTrue(np.allclose(div.indices, div_known.indices))
        self.assertTrue(np.allclose(div.indptr, div_known.indptr))

        # fmt: off

        symgrad_known_data = np.array(
        [-0.14644661, -0.1767767 , -0.1767767 ,  0.14644661,  0.14644661,
        -0.1767767 , -0.1767767 , -0.14644661, -0.14644661,  0.1767767 ,
         0.1767767 ,  0.14644661,  0.14644661,  0.1767767 ,  0.1767767 ,
        -0.14644661, -0.35355339, -0.0732233 , -0.0732233 ,  0.0732233 ,
         0.0732233 ,  0.35355339, -0.0732233 , -0.0732233 ,  0.0732233 ,
         0.0732233 , -0.35355339,  0.0732233 ,  0.0732233 , -0.0732233 ,
        -0.0732233 ,  0.35355339,  0.0732233 ,  0.0732233 , -0.0732233 ,
        -0.0732233 , -0.14644661, -0.0732233 , -0.0732233 ,  0.14644661,
        -0.0732233 , -0.0732233 , -0.14644661,  0.0732233 ,  0.0732233 ,
         0.14644661,  0.0732233 ,  0.0732233 , -0.0732233 , -0.0732233 ,
        -0.35355339,  0.0732233 ,  0.0732233 ,  0.0732233 ,  0.0732233 ,
        -0.35355339, -0.0732233 , -0.0732233 , -0.0732233 , -0.0732233 ,
         0.35355339,  0.0732233 ,  0.0732233 ,  0.0732233 ,  0.0732233 ,
         0.35355339, -0.0732233 , -0.0732233 , -0.1767767 , -0.1767767 ,
        -0.14644661,  0.14644661,  0.1767767 ,  0.1767767 , -0.14644661,
         0.14644661, -0.1767767 , -0.1767767 ,  0.14644661, -0.14644661,
         0.1767767 ,  0.1767767 ,  0.14644661, -0.14644661, -0.0732233 ,
        -0.0732233 , -0.14644661,  0.0732233 ,  0.0732233 , -0.14644661,
        -0.0732233 , -0.0732233 ,  0.14644661,  0.0732233 ,  0.0732233 ,
         0.14644661])

        symgrad_known_indices = np.array(
        [ 0,  5, 10,  1,  0,  5, 10,  2,  0,  5, 10,  3,  0,  5, 10,  4,  0,
         5, 10,  6, 11,  0,  5, 10,  7, 12,  0,  5, 10,  8, 13,  0,  5, 10,
         9, 14,  1,  6, 11,  2,  7, 12,  3,  8, 13,  4,  9, 14,  5, 10, 15,
         6, 11,  5, 10, 15,  7, 12,  5, 10, 15,  8, 13,  5, 10, 15,  9, 14,
         5, 10, 15, 16,  5, 10, 15, 17,  5, 10, 15, 18,  5, 10, 15, 19,  6,
        11, 16,  7, 12, 17,  8, 13, 18,  9, 14, 19])

        symgrad_known_indptr = np.array(
        [ 0,  4,  8, 12, 16, 21, 26, 31, 36, 39, 42, 45, 48, 53, 58, 63, 68,
        72, 76, 80, 84, 87, 90, 93, 96])

        # fmt: on
        symgrad_known = self.assemble_known(
            symgrad_known_data, symgrad_known_indices, symgrad_known_indptr
        )

        self.assertTrue(np.allclose(symgrad.data, symgrad_known.data))
        self.assertTrue(np.allclose(symgrad.indices, symgrad_known.indices))
        self.assertTrue(np.allclose(symgrad.indptr, symgrad_known.indptr))

        # fmt: off

        div_div_known_data = np.array(
        [-0.02588835, -0.02588835,  0.02588835, -0.0625    , -0.0625    ,
         0.0625    , -0.0625    ,  0.0625    , -0.0625    , -0.02588835,
         0.02588835, -0.02588835, -0.5       ,  0.52588835,  0.0625    ,
        -0.5       ,  0.0625    ,  0.52588835,  0.02588835,  0.02588835,
        -0.02588835,  0.0625    ,  0.0625    , -0.0625    ,  0.0625    ,
        -0.0625    , -0.0625    ,  0.02588835, -0.02588835, -0.02588835,
         0.5       , -0.52588835, -0.0625    , -0.5       ,  0.0625    ,
         0.52588835, -0.02588835,  0.02588835,  0.02588835, -0.0625    ,
         0.0625    ,  0.0625    , -0.0625    , -0.0625    ,  0.0625    ,
        -0.02588835, -0.02588835,  0.02588835,  0.5       , -0.52588835,
        -0.0625    , -0.5       ,  0.0625    ,  0.52588835,  0.02588835,
        -0.02588835, -0.02588835,  0.0625    , -0.0625    , -0.0625    ,
        -0.0625    ,  0.0625    , -0.0625    , -0.02588835,  0.02588835,
        -0.02588835, -0.5       ,  0.52588835,  0.0625    , -0.5       ,
         0.0625    ,  0.52588835, -0.0625    , -0.0625    ,  0.0625    ,
         0.0625    , -0.15088835, -0.15088835,  0.15088835,  0.15088835,
        -0.15088835,  0.15088835, -0.15088835,  0.15088835, -0.0625    ,
         0.0625    , -0.0625    ,  0.0625    ,  0.0625    ,  0.0625    ,
        -0.0625    , -0.0625    ,  0.15088835,  0.15088835, -0.15088835,
        -0.15088835,  0.15088835, -0.15088835,  0.15088835, -0.15088835,
         0.0625    , -0.0625    ,  0.0625    , -0.0625    , -0.0625    ,
        -0.0625    ,  0.0625    ,  0.0625    , -0.15088835, -0.15088835,
         0.15088835,  0.15088835, -0.15088835,  0.15088835, -0.15088835,
         0.15088835, -0.0625    ,  0.0625    , -0.0625    ,  0.0625    ,
         0.0625    ,  0.0625    , -0.0625    , -0.0625    ,  0.15088835,
         0.15088835, -0.15088835, -0.15088835,  0.15088835, -0.15088835,
         0.15088835, -0.15088835,  0.0625    , -0.0625    ,  0.0625    ,
        -0.0625    ,  0.5       , -0.5       ,  0.5       , -0.5       ,
        -0.5       ,  0.5       ,  0.5       , -0.5       , -0.5       ,
         0.5       ,  0.5       , -0.5       ,  0.5       , -0.5       ,
         0.5       , -0.5       , -0.0625    , -0.0625    ,  0.0625    ,
         0.0625    , -0.15088835, -0.15088835,  0.15088835,  0.15088835,
        -0.15088835,  0.15088835, -0.15088835,  0.15088835, -0.0625    ,
         0.0625    , -0.0625    ,  0.0625    , -0.0625    , -0.0625    ,
         0.0625    ,  0.0625    , -0.15088835, -0.15088835,  0.15088835,
         0.15088835, -0.15088835,  0.15088835, -0.15088835,  0.15088835,
        -0.0625    ,  0.0625    , -0.0625    ,  0.0625    ,  0.0625    ,
         0.0625    , -0.0625    , -0.0625    ,  0.15088835,  0.15088835,
        -0.15088835, -0.15088835,  0.15088835, -0.15088835,  0.15088835,
        -0.15088835,  0.0625    , -0.0625    ,  0.0625    , -0.0625    ,
         0.0625    ,  0.0625    , -0.0625    , -0.0625    ,  0.15088835,
         0.15088835, -0.15088835, -0.15088835,  0.15088835, -0.15088835,
         0.15088835, -0.15088835,  0.0625    , -0.0625    ,  0.0625    ,
        -0.0625    , -0.02588835, -0.02588835,  0.02588835, -0.0625    ,
        -0.0625    ,  0.0625    , -0.0625    ,  0.0625    , -0.0625    ,
        -0.02588835,  0.02588835, -0.02588835, -0.5       ,  0.52588835,
         0.0625    , -0.5       ,  0.0625    ,  0.52588835, -0.02588835,
        -0.02588835,  0.02588835, -0.0625    , -0.0625    ,  0.0625    ,
        -0.0625    ,  0.0625    ,  0.0625    , -0.02588835,  0.02588835,
         0.02588835, -0.5       ,  0.52588835,  0.0625    ,  0.5       ,
        -0.0625    , -0.52588835,  0.02588835, -0.02588835, -0.02588835,
         0.0625    , -0.0625    , -0.0625    ,  0.0625    ,  0.0625    ,
        -0.0625    ,  0.02588835,  0.02588835, -0.02588835, -0.5       ,
         0.52588835,  0.0625    ,  0.5       , -0.0625    , -0.52588835,
         0.02588835, -0.02588835, -0.02588835,  0.0625    , -0.0625    ,
        -0.0625    , -0.0625    ,  0.0625    , -0.0625    , -0.02588835,
         0.02588835, -0.02588835, -0.5       ,  0.52588835,  0.0625    ,
        -0.5       ,  0.0625    ,  0.52588835,  0.5       , -0.5       ,
         0.5       , -0.5       ,  0.5       , -0.5       , -0.5       ,
         0.5       ,  0.5       , -0.5       , -0.5       ,  0.5       ,
         0.5       , -0.5       ,  0.5       , -0.5       ])

        div_div_known_indices = np.array(
        [19, 18, 17, 15, 14, 13,  7,  6,  5,  3,  2,  1, 20, 16, 12,  8,  4,
         0, 19, 18, 16, 15, 14, 12,  7,  6,  4,  3,  2,  0, 21, 17, 13,  9,
         5,  1, 19, 17, 16, 15, 13, 12,  7,  5,  4,  3,  1,  0, 22, 18, 14,
        10,  6,  2, 18, 17, 16, 14, 13, 12,  6,  5,  4,  2,  1,  0, 23, 19,
        15, 11,  7,  3, 19, 18, 17, 16, 15, 14, 13, 12,  7,  6,  5,  4,  3,
         2,  1,  0, 19, 18, 17, 16, 15, 14, 13, 12,  7,  6,  5,  4,  3,  2,
         1,  0, 19, 18, 17, 16, 15, 14, 13, 12,  7,  6,  5,  4,  3,  2,  1,
         0, 19, 18, 17, 16, 15, 14, 13, 12,  7,  6,  5,  4,  3,  2,  1,  0,
        20, 16,  8,  0, 21, 17,  9,  1, 22, 18, 10,  2, 23, 19, 11,  3, 19,
        18, 17, 16, 15, 14, 13, 12,  7,  6,  5,  4,  3,  2,  1,  0, 19, 18,
        17, 16, 15, 14, 13, 12,  7,  6,  5,  4,  3,  2,  1,  0, 19, 18, 17,
        16, 15, 14, 13, 12,  7,  6,  5,  4,  3,  2,  1,  0, 19, 18, 17, 16,
        15, 14, 13, 12,  7,  6,  5,  4,  3,  2,  1,  0, 19, 18, 17, 15, 14,
        13,  7,  6,  5,  3,  2,  1, 20, 16, 12,  8,  4,  0, 19, 18, 16, 15,
        14, 12,  7,  6,  4,  3,  2,  0, 21, 17, 13,  9,  5,  1, 19, 17, 16,
        15, 13, 12,  7,  5,  4,  3,  1,  0, 22, 18, 14, 10,  6,  2, 18, 17,
        16, 14, 13, 12,  6,  5,  4,  2,  1,  0, 23, 19, 15, 11,  7,  3, 20,
        16,  8,  0, 21, 17,  9,  1, 22, 18, 10,  2, 23, 19, 11,  3])

        div_div_known_indptr = np.array(
        [  0,  18,  36,  54,  72,  88, 104, 120, 136, 140, 144, 148, 152,
        168, 184, 200, 216, 234, 252, 270, 288, 292, 296, 300, 304])

        # fmt: on
        div_div_known = self.assemble_known(
            div_div_known_data, div_div_known_indices, div_div_known_indptr
        )

        self.assertTrue(np.allclose(div_div.data, div_div_known.data))
        self.assertTrue(np.allclose(div_div.indices, div_div_known.indices))
        self.assertTrue(np.allclose(div_div.indptr, div_div_known.indptr))

        # fmt: off

        symgrad_symgrad_known_data = 2 * np.array(
        [-0.07544417,  0.07544417, -0.07544417, -0.03125   ,  0.03125   ,
        -0.03125   , -0.09375   ,  0.03125   , -0.03125   , -0.10133252,
        -0.04955583,  0.04955583,  0.07544417,  0.03125   , -0.5       ,
         0.09375   ,  0.60133252, -0.07544417,  0.07544417,  0.07544417,
        -0.03125   ,  0.03125   ,  0.03125   ,  0.03125   , -0.09375   ,
        -0.03125   , -0.04955583, -0.10133252,  0.04955583, -0.07544417,
        -0.03125   , -0.5       ,  0.09375   ,  0.60133252,  0.07544417,
         0.07544417, -0.07544417,  0.03125   ,  0.03125   , -0.03125   ,
        -0.03125   , -0.09375   ,  0.03125   ,  0.04955583, -0.10133252,
        -0.04955583, -0.07544417, -0.03125   , -0.5       ,  0.09375   ,
         0.60133252, -0.07544417,  0.07544417, -0.07544417, -0.03125   ,
         0.03125   , -0.03125   , -0.03125   ,  0.03125   , -0.09375   ,
         0.04955583, -0.04955583, -0.10133252,  0.07544417,  0.03125   ,
        -0.5       ,  0.09375   ,  0.60133252, -0.03125   ,  0.03125   ,
        -0.03125   , -0.01294417,  0.01294417, -0.01294417, -0.16383252,
         0.13794417, -0.13794417, -0.09375   ,  0.03125   , -0.03125   ,
        -0.25      ,  0.03125   ,  0.26294417, -0.25      ,  0.41383252,
         0.09375   , -0.03125   ,  0.03125   ,  0.03125   , -0.01294417,
         0.01294417,  0.01294417,  0.13794417, -0.16383252, -0.13794417,
         0.03125   , -0.09375   , -0.03125   ,  0.25      , -0.03125   ,
        -0.26294417, -0.25      ,  0.41383252,  0.09375   ,  0.03125   ,
         0.03125   , -0.03125   ,  0.01294417,  0.01294417, -0.01294417,
        -0.13794417, -0.16383252,  0.13794417, -0.03125   , -0.09375   ,
         0.03125   ,  0.25      , -0.03125   , -0.26294417, -0.25      ,
         0.41383252,  0.09375   , -0.03125   ,  0.03125   , -0.03125   ,
        -0.01294417,  0.01294417, -0.01294417, -0.13794417,  0.13794417,
        -0.16383252, -0.03125   ,  0.03125   , -0.09375   , -0.25      ,
         0.03125   ,  0.26294417, -0.25      ,  0.41383252,  0.09375   ,
         0.25      , -0.25      ,  0.75      , -0.25      , -0.5       ,
        -0.25      ,  0.25      ,  0.75      , -0.25      , -0.5       ,
        -0.25      ,  0.25      ,  0.75      , -0.25      , -0.5       ,
         0.25      , -0.25      ,  0.75      , -0.25      , -0.5       ,
        -0.09375   , -0.03125   ,  0.03125   , -0.16383252, -0.13794417,
         0.13794417, -0.01294417, -0.01294417,  0.01294417, -0.03125   ,
        -0.03125   ,  0.03125   , -0.25      ,  0.09375   ,  0.41383252,
        -0.25      ,  0.26294417,  0.03125   , -0.03125   , -0.09375   ,
         0.03125   , -0.13794417, -0.16383252,  0.13794417,  0.01294417,
         0.01294417, -0.01294417,  0.03125   ,  0.03125   , -0.03125   ,
        -0.25      ,  0.09375   ,  0.41383252,  0.25      , -0.26294417,
        -0.03125   ,  0.03125   , -0.09375   , -0.03125   ,  0.13794417,
        -0.16383252, -0.13794417, -0.01294417,  0.01294417,  0.01294417,
        -0.03125   ,  0.03125   ,  0.03125   , -0.25      ,  0.09375   ,
         0.41383252,  0.25      , -0.26294417, -0.03125   ,  0.03125   ,
        -0.03125   , -0.09375   ,  0.13794417, -0.13794417, -0.16383252,
         0.01294417, -0.01294417, -0.01294417,  0.03125   , -0.03125   ,
        -0.03125   , -0.25      ,  0.09375   ,  0.41383252, -0.25      ,
         0.26294417,  0.03125   , -0.10133252,  0.04955583, -0.04955583,
        -0.09375   , -0.03125   ,  0.03125   , -0.03125   , -0.03125   ,
         0.03125   , -0.07544417, -0.07544417,  0.07544417, -0.5       ,
         0.60133252,  0.09375   ,  0.03125   ,  0.07544417,  0.04955583,
        -0.10133252, -0.04955583, -0.03125   , -0.09375   ,  0.03125   ,
         0.03125   ,  0.03125   , -0.03125   ,  0.07544417,  0.07544417,
        -0.07544417, -0.5       ,  0.60133252,  0.09375   , -0.03125   ,
        -0.07544417, -0.04955583, -0.10133252,  0.04955583,  0.03125   ,
        -0.09375   , -0.03125   , -0.03125   ,  0.03125   ,  0.03125   ,
        -0.07544417,  0.07544417,  0.07544417, -0.5       ,  0.60133252,
         0.09375   , -0.03125   , -0.07544417, -0.04955583,  0.04955583,
        -0.10133252,  0.03125   , -0.03125   , -0.09375   ,  0.03125   ,
        -0.03125   , -0.03125   ,  0.07544417, -0.07544417, -0.07544417,
        -0.5       ,  0.60133252,  0.09375   ,  0.03125   ,  0.07544417,
         0.75      , -0.5       , -0.25      ,  0.25      , -0.25      ,
         0.75      , -0.5       , -0.25      , -0.25      ,  0.25      ,
         0.75      , -0.5       , -0.25      , -0.25      ,  0.25      ,
         0.75      , -0.5       , -0.25      ,  0.25      , -0.25      ])

        symgrad_symgrad_known_indices = np.array(
        [19, 18, 17, 15, 14, 13,  7,  6,  5,  3,  2,  1, 16, 12,  8,  4,  0,
        19, 18, 16, 15, 14, 12,  7,  6,  4,  3,  2,  0, 17, 13,  9,  5,  1,
        19, 17, 16, 15, 13, 12,  7,  5,  4,  3,  1,  0, 18, 14, 10,  6,  2,
        18, 17, 16, 14, 13, 12,  6,  5,  4,  2,  1,  0, 19, 15, 11,  7,  3,
        19, 18, 17, 15, 14, 13,  7,  6,  5,  3,  2,  1, 20, 16, 12,  8,  4,
         0, 19, 18, 16, 15, 14, 12,  7,  6,  4,  3,  2,  0, 21, 17, 13,  9,
         5,  1, 19, 17, 16, 15, 13, 12,  7,  5,  4,  3,  1,  0, 22, 18, 14,
        10,  6,  2, 18, 17, 16, 14, 13, 12,  6,  5,  4,  2,  1,  0, 23, 19,
        15, 11,  7,  3, 20, 12,  8,  4,  0, 21, 13,  9,  5,  1, 22, 14, 10,
         6,  2, 23, 15, 11,  7,  3, 19, 18, 17, 15, 14, 13,  7,  6,  5,  3,
         2,  1, 20, 16, 12,  8,  4,  0, 19, 18, 16, 15, 14, 12,  7,  6,  4,
         3,  2,  0, 21, 17, 13,  9,  5,  1, 19, 17, 16, 15, 13, 12,  7,  5,
         4,  3,  1,  0, 22, 18, 14, 10,  6,  2, 18, 17, 16, 14, 13, 12,  6,
         5,  4,  2,  1,  0, 23, 19, 15, 11,  7,  3, 19, 18, 17, 15, 14, 13,
         7,  6,  5,  3,  2,  1, 20, 16, 12,  4,  0, 19, 18, 16, 15, 14, 12,
         7,  6,  4,  3,  2,  0, 21, 17, 13,  5,  1, 19, 17, 16, 15, 13, 12,
         7,  5,  4,  3,  1,  0, 22, 18, 14,  6,  2, 18, 17, 16, 14, 13, 12,
         6,  5,  4,  2,  1,  0, 23, 19, 15,  7,  3, 20, 16, 12,  8,  4, 21,
        17, 13,  9,  5, 22, 18, 14, 10,  6, 23, 19, 15, 11,  7])

        symgrad_symgrad_known_indptr = np.array(
        [  0,  17,  34,  51,  68,  86, 104, 122, 140, 145, 150, 155, 160,
        178, 196, 214, 232, 249, 266, 283, 300, 305, 310, 315, 320])

        # fmt: on
        symgrad_symgrad_known = self.assemble_known(
            symgrad_symgrad_known_data,
            symgrad_symgrad_known_indices,
            symgrad_symgrad_known_indptr,
        )

        self.assertTrue(np.allclose(symgrad_symgrad.data, symgrad_symgrad_known.data))
        self.assertTrue(
            np.allclose(symgrad_symgrad.indices, symgrad_symgrad_known.indices)
        )
        self.assertTrue(
            np.allclose(symgrad_symgrad.indptr, symgrad_symgrad_known.indptr)
        )

        # fmt: off

        pen_known_data = np.array(
        [ 0.625    , -0.3017767,  0.0517767,  0.125    , -0.3017767,
        -0.125    , -0.125    ,  0.0517767, -0.3017767,  0.625    ,
         0.125    ,  0.0517767, -0.125    , -0.3017767,  0.0517767,
        -0.125    ,  0.0517767,  0.125    ,  0.625    , -0.3017767,
        -0.125    ,  0.0517767, -0.3017767, -0.125    ,  0.125    ,
         0.0517767, -0.3017767,  0.625    ,  0.0517767, -0.125    ,
        -0.125    , -0.3017767, -0.3017767, -0.125    , -0.125    ,
         0.0517767,  0.625    ,  0.0517767, -0.3017767,  0.125    ,
        -0.125    , -0.3017767,  0.0517767, -0.125    ,  0.0517767,
         0.625    ,  0.125    , -0.3017767, -0.125    ,  0.0517767,
        -0.3017767, -0.125    , -0.3017767,  0.125    ,  0.625    ,
         0.0517767,  0.0517767, -0.125    , -0.125    , -0.3017767,
         0.125    , -0.3017767,  0.0517767,  0.625    ,  0.625    ,
        -0.3017767,  0.0517767,  0.125    , -0.3017767, -0.125    ,
        -0.125    ,  0.0517767, -0.3017767,  0.625    ,  0.125    ,
         0.0517767, -0.125    , -0.3017767,  0.0517767, -0.125    ,
         0.0517767,  0.125    ,  0.625    , -0.3017767, -0.125    ,
         0.0517767, -0.3017767, -0.125    ,  0.125    ,  0.0517767,
        -0.3017767,  0.625    ,  0.0517767, -0.125    , -0.125    ,
        -0.3017767, -0.3017767, -0.125    , -0.125    ,  0.0517767,
         0.625    ,  0.0517767, -0.3017767,  0.125    , -0.125    ,
        -0.3017767,  0.0517767, -0.125    ,  0.0517767,  0.625    ,
         0.125    , -0.3017767, -0.125    ,  0.0517767, -0.3017767,
        -0.125    , -0.3017767,  0.125    ,  0.625    ,  0.0517767,
         0.0517767, -0.125    , -0.125    , -0.3017767,  0.125    ,
        -0.3017767,  0.0517767,  0.625    ])

        pen_known_indices = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  0,
          1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  0,  1,
          2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,
          3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7, 12, 13, 14, 15,
         16, 17, 18, 19, 12, 13, 14, 15, 16, 17, 18, 19, 12, 13, 14, 15, 16,
         17, 18, 19, 12, 13, 14, 15, 16, 17, 18, 19, 12, 13, 14, 15, 16, 17,
         18, 19, 12, 13, 14, 15, 16, 17, 18, 19, 12, 13, 14, 15, 16, 17, 18,
         19, 12, 13, 14, 15, 16, 17, 18, 19])

        pen_known_indptr = np.array(
        [  0,   8,  16,  24,  32,  40,  48,  56,  64,  64,  64,  64,  64,
          72,  80,  88,  96, 104, 112, 120, 128, 128, 128, 128, 128])

        # fmt: on

        pen_known = self.assemble_known(
            pen_known_data, pen_known_indices, pen_known_indptr, pen.shape
        )

        self.assertTrue(np.allclose(pen.data, pen_known.data))
        self.assertTrue(np.allclose(pen.indices, pen_known.indices))
        self.assertTrue(np.allclose(pen.indptr, pen_known.indptr))

        diff_known = sps.block_array([[symgrad_known], [div_known]], format="csc")
        self.make_canonical(diff_known)

        self.assertTrue(np.allclose(diff.data, diff_known.data))
        self.assertTrue(np.allclose(diff.indices, diff_known.indices))
        self.assertTrue(np.allclose(diff.indptr, diff_known.indptr))

        stiff_known = symgrad_symgrad_known + div_div_known + pen_known
        self.make_canonical(stiff_known)

        self.assertTrue(np.allclose(stiff.data, stiff_known.data))
        self.assertTrue(np.allclose(stiff.indices, stiff_known.indices))
        self.assertTrue(np.allclose(stiff.indptr, stiff_known.indptr))

        fun = lambda x: np.array([x[0] + x[1], x[0] * x[1]])
        vals = discr.interpolate(sd, fun)

        # fmt: off

        vals_known = np.array(
            [0.29289322, 0.70710678, 1.29289322, 1.70710678, 0.29289322,
             1.29289322, 0.70710678, 1.70710678, 0.        , 1.        ,
             1.        , 2.        , 0.        , 0.        , 0.29289322,
             0.70710678, 0.        , 0.29289322, 0.        , 0.70710678,
             0.        , 0.        , 0.        , 1.        ])

        # fmt: on

        self.assertTrue(np.allclose(vals, vals_known))

    def test_3d(self):
        num_cells, dim = 2, 3
        sd = pp.CartGrid([num_cells] * dim, [1] * dim)

        pg.convert_from_pp(sd)
        sd.compute_geometry()

        discr = pg.VecVLagrange1()
        self.assertRaises(ValueError, discr.assemble_symgrad_matrix, sd)
        self.assertRaises(NotImplementedError, discr.get_range_discr_class, None)


if __name__ == "__main__":
    unittest.main()
