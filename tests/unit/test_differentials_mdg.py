"""Module contains Differential MDG unit tests."""

import unittest

import numpy as np
import porepy as pp
import scipy.sparse as sps

import pygeon as pg


class DifferentialsMDGUnitTest(unittest.TestCase):
    def test_2d_simplicial_1_fracture(self):
        mesh_args = {"cell_size": 0.25, "cell_size_fracture": 0.125}
        x_endpoints = [np.array([0, 0.5])]
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "simplex", mesh_args, [1], x_endpoints
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_simplicial_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_2d_cartesian_1_fracture(self):
        mesh_args = {"cell_size": 0.25}
        x_endpoints = [np.array([0, 0.5])]
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "cartesian", mesh_args, [1], x_endpoints
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_cartesian_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_2d_simplicial_2_fractures(self):
        mesh_args = {"cell_size": 0.25, "cell_size_fracture": 0.125}
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "simplex", mesh_args, [1, 0]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

    def test_2d_cartesian_2_fractures(self):
        mesh_args = {"cell_size": 0.25, "cell_size_fracture": 0.125}
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "cartesian", mesh_args, [1, 0]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_cartesian_2_fractures()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_3d_simplicial_1_fracture(self):
        mesh_args = {"cell_size": 0.5, "cell_size_fracture": 0.5}
        mdg, _ = pp.mdg_library.cube_with_orthogonal_fractures(
            "simplex", mesh_args, [2]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

    def test_3d_cartesian_1_fracture(self):
        mesh_args = {"cell_size": 0.5, "cell_size_fracture": 0.5}
        mdg, _ = pp.mdg_library.cube_with_orthogonal_fractures(
            "cartesian", mesh_args, [2]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_3d_cartesian_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def _test_2d_simplicial_1_fracture(self):
        # fmt: off
        div_indices = np.array(
        [54, 39, 76, 55, 39, 38, 55, 54, 79, 67, 35, 24, 25, 20, 47, 35, 47,
        20, 64, 24, 67, 25, 44, 45, 45, 44, 34, 22, 34, 22, 36, 23, 36, 23,
        43, 46, 46, 43, 11, 18, 11, 44, 18, 31, 13, 11, 31, 13, 49, 31, 49,
        34, 14, 41, 14, 41, 22, 30, 17, 14, 30, 17, 51, 30, 51, 36, 15, 42,
        15, 42, 23, 21, 15,  6, 21,  6, 21, 10, 43, 29, 29, 10, 28, 56, 28,
        56, 54, 61, 28, 61, 45, 27, 58, 27, 58, 39, 62, 27, 62, 46, 77, 52,
        33, 16, 69, 52, 38, 33, 69, 55, 78, 53,  8,  0, 63, 53, 16,  8, 63,
        52, 57,  0, 65, 53, 64, 57, 67, 65, 75, 72, 61, 48, 75, 48, 72, 56,
        71, 66, 62, 60, 66, 60, 71, 58, 37,  7, 12,  6, 40, 12, 40,  7, 42,
        37, 32,  2, 17,  4,  4,  2, 41, 32, 26, 13, 26, 19, 50, 19, 18,  1,
        50,  1, 26,  9,  9,  2, 49, 32,  7,  5,  5,  4, 51, 37, 59, 12, 74,
        59, 74, 10, 68, 59, 40, 35, 68, 24, 19,  3, 20,  9, 25,  3, 70,  8,
        74, 70, 68, 57, 73, 63, 73, 50, 65,  3, 47,  5, 70, 66, 71, 33, 75,
        73, 72, 69, 48,  1, 60, 29, 76, 38, 79, 64, 77, 16, 78,  0, 76, 77,
        76, 78, 77, 79, 78], dtype=int)

        div_indptr = np.array(
        [  0,   1,   2,   4,   6,   8,  10,  12,  14,  16,  18,  20,  22,
          23,  24,  26,  27,  28,  30,  31,  32,  34,  35,  36,  38,  39,
          41,  43,  44,  46,  48,  50,  52,  53,  55,  57,  58,  60,  62,
          64,  66,  67,  69,  71,  72,  74,  76,  78,  80,  82,  83,  85,
          87,  89,  91,  92,  94,  96,  98, 100, 102, 104, 106, 108, 110,
         112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136,
         138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
         164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188,
         190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214,
         216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 237, 239,
         241, 243, 243], dtype=int)

        div_data = np.array(
        [ 1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,
          1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1.,
          1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,
          1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1.,
         -1.,  1.,  1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,  1.,
         -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1.,
         -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
         -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
        [127, 123,   3,   1, 127,   4,   2,   0, 124,  11,  10,   9,   8,
           7,   6,   5,  14,  13,  12,  17,  16,  15,  20,  19,  18,  23,
          22,  21,  26,  25,  24,  12,  29,  28,  27,  24,  31,  30,  27,
          15,  34,  33,  32,  16,  37,  36,  35,  32,  39,  38,  35,  18,
          42,  41,  40,  19,  45,  44,  43,  40,  48,  47,  46,  43,  21,
          51,  50,  49,   0,  53,  52,  49,  13,  56,  55,  54,   1,  58,
          57,  54,  22, 128, 125, 123,  62,  60, 128,  63,  61,  59,   2,
         129, 126, 125,  67,  65, 129,  68,  66,  64,  59, 130, 126, 124,
          71,  69, 130,  72,  70,  64,   5,  76,  75,  74,  73,  52,  50,
          80,  79,  78,  77,  57,  55,  85,  84,  83,  82,  81,  44,  41,
          89,  88,  87,  86,  36,  33,  94,  93,  92,  91,  90,  28,  25,
          97,  96,  95,  90,  86,  30,  29, 100,  99,  98,  87,  81,  38,
          37, 103, 102, 101,  82,  46,  45, 106, 105, 104, 101,  83,   6,
         109, 108, 107,  95,  91,   7, 112, 111, 110, 104, 102,  69,  65,
         115, 114, 113, 107,  92,  70,  66, 116, 105,  98,  84,   8, 116,
         108,  99,  96,  88,   9, 118, 117, 110,  77,  67,  60, 120, 119,
         113,  73,  68,  61, 100,  85,  42,  39,  20,  97,  89,  34,  31,
          17, 121,  93,  74,  53,  26,  14, 122,  78,  58,  47,  23, 121,
         119, 114,  94,  75, 122, 117, 111, 103,  79,  48, 118,  80,  62,
          56,   3, 112, 106,  71,  10, 120,  76,  63,  51,   4, 115, 109,
          72,  11], dtype=int)

        curl_indptr = np.array(
        [  0,   4,   8,  16,  19,  22,  25,  28,  32,  36,  40,  44,  48,
          52,  56,  60,  65,  69,  73,  77,  81,  86,  91,  96, 101, 106,
         111, 117, 123, 130, 136, 143, 150, 157, 163, 169, 175, 182, 189,
         194, 200, 206, 212, 217, 222, 228, 233, 238, 244, 249, 253, 258,
         262], dtype=int)

        curl_data = np.array(
        [ 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,
         -1,  1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1,  1,
          1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  1,  1, -1, -1, -1,
          1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1,  1, -1,
         -1, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1, -1, -1,  1,  1,
          1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1, -1,
         -1, -1,  1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1,
         -1, -1, -1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1,
          1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1,
         -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,
          1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,
          1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))

        grad = sps.csc_array((52, 0))
        # fmt: on

        return div, curl, grad

    def _test_2d_cartesian_1_fracture(self):
        # fmt: off
        div_indices = np.array(
            [  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,
               8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,  0,  1,
               2,  3,  0,  4,  1,  5,  2,  6,  3,  7,  8, 17,  9, 16,  6, 10,  7,
              11,  8, 12,  9, 13, 10, 14, 11, 15, 12, 13, 14, 15,  4, 17,  5, 16,
              16, 17, 17], dtype=int)

        div_indptr = np.array(
            [ 0,  1,  3,  5,  7,  8,  9, 11, 13, 15, 16, 17, 19, 21, 23, 24, 25,
             27, 29, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
             56, 58, 60, 61, 62, 63, 64, 66, 68, 68, 70, 71], dtype=int)

        div_data = np.array(
            [-1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,
              1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1,
             -1,  1, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1,  1,
             -1,  1, -1,  1, -1, -1,  1, -1,  1,  1, -1,  1, -1,
              1, -1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1,  1,
             -1,  1, -1,  1, -1,  1])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
            [ 0, 20,  1, 20, 21,  2, 21, 22,  3, 22, 23,  4, 23,  0,  5, 24,  1,
              6, 24, 25,  2,  7, 25, 26,  3,  8, 26, 27,  4,  9, 27,  5, 40, 44,
             10, 28, 44,  6, 40, 41, 43, 11, 28, 29, 43,  7, 12, 29, 30, 41,  8,
             13, 30, 31,  9, 14, 31, 10, 15, 32, 11, 16, 32, 33, 12, 17, 33, 34,
             13, 18, 34, 35, 14, 19, 35, 15, 36, 16, 36, 37, 17, 37, 38, 18, 38,
             39, 19, 39], dtype=int)
        curl_indptr = np.array(
            [ 0,  2,  5,  8, 11, 13, 16, 20, 24, 28, 31, 34, 37, 41, 45, 50, 54,
             57, 60, 64, 68, 72, 75, 77, 80, 83, 86, 88], dtype=int)
        curl_data = np.array(
            [-1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,
              -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1,
              -1,  1, -1,  1, -1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1,  1,
              -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,
                1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1,  1,  1, -1,
                1,  1, -1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))


        grad = np.zeros((27, 0))
        # fmt: on

        return div, curl, grad

    def _test_2d_cartesian_2_fractures(self):
        # fmt: off
        div_indices = np.array(
            [ 0,  0,  1,  2, 23,  2,  3,  3,  4,  4,  5,  6, 22,  6,  7,  7,  8,
              8,  9, 10, 21, 10, 11, 11, 12, 12, 13, 14, 20, 14, 15, 15,  0,  1,
              2,  3,  0,  4,  1,  5,  2,  6,  3,  7,  8, 19,  9, 18, 10, 17, 11,
             16,  8, 12,  9, 13, 10, 14, 11, 15, 12, 13, 14, 15,  4, 19,  5, 18,
              6, 17,  7, 16,  1, 23,  5, 22,  9, 21, 13, 20, 16, 16, 17, 18, 24,
             18, 19, 19, 17, 24, 20, 20, 21, 22, 24, 22, 23, 23, 21, 24], dtype=int)

        div_indptr = np.array(
            [  0,   1,   3,   5,   7,   8,   9,  11,  13,  15,  16,  17,  19,
              21,  23,  24,  25,  27,  29,  31,  32,  33,  34,  35,  36,  38,
              40,  42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  61,  62,
              63,  64,  66,  68,  70,  72,  74,  76,  78,  80,  81,  83,  85,
              87,  88,  90,  91,  93,  95,  97,  98, 100], dtype=int)

        div_data = np.array(
            [-1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,
              1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1.,
             -1., -1.,  1.,  1., -1.,  1., -1., -1., -1., -1.,  1., -1.,  1.,
             -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,
              1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1.,  1.,  1.,  1.,
             -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,
              1., -1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,  1., -1., -1.,
              1., -1., -1.,  1.,  1., -1.,  1.,  1., -1.])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
            [ 0, 20,  1, 20, 21, 21, 44, 58,  2, 22, 58,  3, 22, 23,  4, 23,  0,
              5, 24,  1,  6, 24, 25, 25, 44, 45, 57,  2,  7, 26, 57,  3,  8, 26,
             27,  4,  9, 27,  5, 40, 52, 10, 28, 52,  6, 40, 41, 51, 11, 28, 29,
             51, 41, 45, 50, 56,  7, 42, 53, 56, 29, 46, 50, 59, 12, 30, 53, 59,
              8, 42, 43, 49, 13, 30, 31, 49,  9, 43, 48, 14, 31, 48, 10, 15, 32,
             11, 16, 32, 33, 33, 46, 47, 55, 12, 17, 34, 55, 13, 18, 34, 35, 14,
             19, 35, 15, 36, 16, 36, 37, 37, 47, 54, 17, 38, 54, 18, 38, 39, 19,
             39], dtype=int)

        curl_indptr = np.array(
            [  0,   2,   5,   8,  11,  14,  16,  19,  23,  27,  31,  35,  38,
              41,  44,  48,  52,  56,  60,  64,  68,  72,  76,  79,  82,  85,
              89,  93,  97, 101, 104, 106, 109, 112, 115, 118, 120], dtype=int)

        curl_data = np.array(
            [-1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1, -1, -1,  1, -1, -1,  1,
             -1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1,
              1,  1, -1, -1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1, -1,  1,
             -1, -1,  1,  1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1, -1,  1,
              1, -1,  1,  1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1,  1,
              1, -1, -1,  1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1,  1,  1,
             -1, -1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1,  1,
             -1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))

        grad = np.zeros((36, 0))
        # fmt: on

        return div, curl, grad

    def _test_3d_cartesian_1_fracture(self):
        # fmt: off

        div_data = np.array(
            [-1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
            -1.,  1.,  1., -1., -1., -1.,  1., -1.,  1.,  1.,  1., -1., -1.,
            -1.,  1., -1.,  1.,  1.,  1., -1., -1., -1., -1.,  1., -1.,  1.,
            -1.,  1., -1.,  1., -1.,  1.,  1.,  1.,  1., -1.,  1., -1.,  1.,
            -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
            -1., -1.,  1., -1.,  1.,  1.,  1.])

        div_indices = np.array(
            [ 0,  1,  0,  1,  2,  3,  2,  3,  4,  5,  4,  5,  6,  7,  6,  7,  0,
                1,  2,  0,  3,  1,  2,  3,  4,  5,  6,  4,  7,  5,  6,  7,  0,  1,
                2,  3,  8,  4,  9,  5, 10,  6, 11,  7,  4,  5,  6,  7,  8,  0,  9,
                1, 10,  2, 11,  3,  8,  9,  8,  9, 10, 11, 10, 11,  8,  9, 10,  8,
            11,  9, 10, 11], dtype=int)

        div_indptr = np.array(
            [ 0,  1,  3,  4,  5,  7,  8,  9, 11, 12, 13, 15, 16, 17, 18, 20, 22,
            23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45,
            46, 47, 48, 50, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 68, 70,
            71, 72], dtype=int)

        curl_data = np.array(
            [ 1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1.,  1., -1.,
            -1.,  1.,  1., -1., -1.,  1., -1., -1., -1.,  1.,  1., -1.,  1.,
                1., -1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1.,  1., -1.,
            -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
            -1.,  1.,  1.,  1., -1., -1.,  1.,  1., -1., -1., -1.,  1.,  1.,
            -1., -1.,  1.,  1.,  1., -1.,  1., -1.,  1.,  1., -1., -1., -1.,
                1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,
            -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1., -1., -1.,
                1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1.,
                1., -1., -1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1.,  1.,
            -1., -1.,  1.,  1., -1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,
                1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
                1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,
                1., -1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,
            -1.,  1.,  1., -1.,  1., -1., -1., -1., -1.,  1., -1.,  1.,  1.,
            -1., -1.,  1., -1., -1.,  1.,  1.,  1.,  1., -1.,  1., -1.,  1.])

        curl_indices = np.array(
            [24, 12, 24,  0, 12,  0, 25, 13, 25, 24,  1, 13, 12,  1, 25,  2, 13,
                2, 26, 24, 14, 26,  3, 14,  3,  0, 27, 25, 15, 27, 26,  4, 15, 14,
                4,  1, 27,  5, 15,  5,  2, 26, 16, 16,  3, 27, 17, 17, 16,  4, 17,
                5, 46, 36, 12, 40, 36,  0, 46, 28, 18, 40, 28,  6, 18,  6, 47, 37,
            13, 41, 37, 36,  1, 47, 29, 19, 41, 29, 28,  7, 19, 18,  7, 42, 37,
                2, 42, 29,  8, 19,  8, 48, 38, 36, 14, 43, 38,  3, 48, 30, 28, 20,
            43, 30,  9, 20,  9,  6, 49, 39, 37, 15, 44, 39, 38,  4, 49, 31, 29,
            21, 44, 31, 30, 10, 21, 20, 10,  7, 45, 39,  5, 45, 31, 11, 21, 11,
                8, 50, 38, 16, 50, 30, 22, 22,  9, 51, 39, 17, 51, 31, 23, 23, 22,
            10, 23, 11, 32, 18, 32,  6, 33, 19, 33, 32,  7, 33,  8, 34, 32, 20,
            34,  9, 35, 33, 21, 35, 34, 10, 35, 11, 34, 22, 35, 23, 46, 40, 47,
            46, 41, 47, 42, 48, 43, 40, 49, 48, 44, 41, 49, 45, 42, 50, 43, 51,
            50, 44, 51, 45], dtype=int)

        curl_indptr = np.array(
            [  0,   2,   4,   6,   8,  11,  14,  16,  18,  21,  23,  26,  29,
                32,  36,  38,  41,  43,  45,  47,  50,  52,  55,  58,  61,  64,
                66,  69,  73,  76,  80,  83,  86,  89,  91,  95,  98, 102, 105,
            108, 112, 116, 120, 124, 128, 131, 134, 137, 140, 143, 145, 148,
            151, 154, 156, 158, 160, 162, 165, 167, 170, 172, 175, 178, 180,
            182, 184, 186, 189, 191, 194, 198, 201, 203, 206, 208], dtype=int)

        grad_data = np.array(
            [-1., -1., -1., -1., -1., -1.,  1., -1., -1.,  1., -1., -1., -1.,
                1., -1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
            -1., -1.,  1.,  1., -1.,  1.,  1., -1., -1., -1.,  1.,  1., -1.,
            -1., -1., -1., -1., -1.,  1.,  1.,  1., -1., -1., -1.,  1., -1.,
            -1.,  1.,  1.,  1., -1., -1.,  1., -1., -1., -1.,  1.,  1.,  1.,
            -1., -1., -1.,  1., -1., -1., -1.,  1.,  1.,  1.,  1., -1., -1.,
            -1.,  1.,  1., -1., -1.,  1.,  1.,  1.,  1., -1., -1.,  1.,  1.,
            -1., -1.,  1.,  1.,  1., -1., -1.,  1., -1., -1.,  1.,  1.,  1.,
                1., -1., -1.,  1.,  1., -1.,  1.,  1.,  1.,  1., -1.,  1.,  1.,
            -1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,  1., -1., -1.,  1.,
                1., -1., -1.,  1.,  1.,  1., -1.,  1.,  1.,  1., -1.,  1.,  1.,
            -1.,  1.,  1.,  1.,  1.,  1.,  1.])

        grad_indices = np.array(
            [ 2,  1,  0,  5,  4,  3,  0,  7,  6,  3, 10,  9,  8,  1, 13, 12, 11,
                8,  4, 15, 14, 11,  6, 17, 16,  9, 19, 18, 16, 12, 20, 18, 14, 66,
            22, 21,  2, 66, 25, 24, 23, 67, 27, 26, 21,  5, 67, 30, 29, 28, 23,
            68, 31, 26,  7, 68, 33, 32, 28, 69, 35, 34, 22, 10, 69, 38, 37, 36,
            24, 70, 40, 39, 34, 27, 13, 70, 43, 42, 41, 36, 29, 71, 44, 39, 31,
            15, 71, 46, 45, 41, 32, 72, 47, 35, 17, 72, 49, 48, 37, 73, 50, 47,
            40, 19, 73, 52, 51, 48, 42, 74, 50, 44, 20, 74, 53, 51, 45, 55, 54,
            25, 57, 56, 54, 30, 58, 56, 33, 60, 59, 55, 38, 62, 61, 59, 57, 43,
            63, 61, 58, 46, 64, 60, 49, 65, 64, 62, 52, 65, 63, 53],
            dtype=int)

        grad_indptr = np.array(
            [  0,   3,   7,  10,  14,  19,  23,  26,  30,  33,  37,  41,  46,
                51,  55,  59,  64,  69,  75,  81,  86,  91,  95,  99, 104, 109,
            113, 117, 120, 124, 127, 131, 136, 140, 143, 147, 150], dtype=int)


        div = sps.csc_array((div_data, div_indices, div_indptr))
        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))
        grad = sps.csc_array((grad_data, grad_indices, grad_indptr))

        # fmt: on

        return div, curl, grad


if __name__ == "__main__":
    unittest.main()
