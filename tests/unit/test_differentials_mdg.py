""" Module contains Differential MDG unit tests.
"""

import unittest

import numpy as np
import scipy.sparse as sps
import porepy as pp

import pygeon as pg


class DifferentialsMDGUnitTest(unittest.TestCase):
    def test_2d_simplicial_1_fracture(self):
        mesh_args = {"cell_size": 0.25, "cell_size_fracture": 0.125}
        x_endpoints = [np.array([0, 0.5])]
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "simplex", mesh_args, [1], x_endpoints
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_simplicial_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_2d_cartesian_1_fracture(self):
        mesh_args = {"cell_size": 0.25}
        x_endpoints = [np.array([0, 0.5])]
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "cartesian", mesh_args, [1], x_endpoints
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_cartesian_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_2d_simplicial_2_fractures(self):
        mesh_args = {"cell_size": 0.25, "cell_size_fracture": 0.125}
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "simplex", mesh_args, [1, 0]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_simplicial_2_fractures()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_2d_cartesian_2_fractures(self):
        mesh_args = {"cell_size": 0.25, "cell_size_fracture": 0.125}
        mdg, _ = pp.mdg_library.square_with_orthogonal_fractures(
            "cartesian", mesh_args, [1, 0]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_2d_cartesian_2_fractures()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_3d_simplicial_1_fracture(self):
        mesh_args = {"cell_size": 0.5, "cell_size_fracture": 0.5}
        mdg, _ = pp.mdg_library.cube_with_orthogonal_fractures(
            "simplex", mesh_args, [2]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_3d_simplicial_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def test_3d_cartesian_1_fracture(self):
        mesh_args = {"cell_size": 0.5, "cell_size_fracture": 0.5}
        mdg, _ = pp.mdg_library.cube_with_orthogonal_fractures(
            "cartesian", mesh_args, [2]
        )
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()

        div = pg.div(mdg)
        curl = pg.curl(mdg)
        grad = pg.grad(mdg)

        known_div, known_curl, known_grad = self._test_3d_cartesian_1_fracture()

        self.assertTrue(np.sum(curl @ grad) == 0)
        self.assertTrue(np.sum(div @ curl) == 0)

        self.assertTrue(np.allclose(sps.find(div), sps.find(known_div)))
        self.assertTrue(np.allclose(sps.find(curl), sps.find(known_curl)))
        self.assertTrue(np.allclose(sps.find(grad), sps.find(known_grad)))

    def _test_2d_simplicial_1_fracture(self):
        # fmt: off
        div_indices = np.array(
        [54, 39, 76, 55, 39, 38, 55, 54, 79, 67, 35, 24, 25, 20, 47, 35, 47,
        20, 64, 24, 67, 25, 44, 45, 45, 44, 34, 22, 34, 22, 36, 23, 36, 23,
        43, 46, 46, 43, 11, 18, 11, 44, 18, 31, 13, 11, 31, 13, 49, 31, 49,
        34, 14, 41, 14, 41, 22, 30, 17, 14, 30, 17, 51, 30, 51, 36, 15, 42,
        15, 42, 23, 21, 15,  6, 21,  6, 21, 10, 43, 29, 29, 10, 28, 56, 28,
        56, 54, 61, 28, 61, 45, 27, 58, 27, 58, 39, 62, 27, 62, 46, 77, 52,
        33, 16, 69, 52, 38, 33, 69, 55, 78, 53,  8,  0, 63, 53, 16,  8, 63,
        52, 57,  0, 65, 53, 64, 57, 67, 65, 75, 72, 61, 48, 75, 48, 72, 56,
        71, 66, 62, 60, 66, 60, 71, 58, 37,  7, 12,  6, 40, 12, 40,  7, 42,
        37, 32,  2, 17,  4,  4,  2, 41, 32, 26, 13, 26, 19, 50, 19, 18,  1,
        50,  1, 26,  9,  9,  2, 49, 32,  7,  5,  5,  4, 51, 37, 59, 12, 74,
        59, 74, 10, 68, 59, 40, 35, 68, 24, 19,  3, 20,  9, 25,  3, 70,  8,
        74, 70, 68, 57, 73, 63, 73, 50, 65,  3, 47,  5, 70, 66, 71, 33, 75,
        73, 72, 69, 48,  1, 60, 29, 76, 38, 79, 64, 77, 16, 78,  0, 76, 77,
        76, 78, 77, 79, 78], dtype=int)

        div_indptr = np.array(
        [  0,   1,   2,   4,   6,   8,  10,  12,  14,  16,  18,  20,  22,
          23,  24,  26,  27,  28,  30,  31,  32,  34,  35,  36,  38,  39,
          41,  43,  44,  46,  48,  50,  52,  53,  55,  57,  58,  60,  62,
          64,  66,  67,  69,  71,  72,  74,  76,  78,  80,  82,  83,  85,
          87,  89,  91,  92,  94,  96,  98, 100, 102, 104, 106, 108, 110,
         112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136,
         138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162,
         164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188,
         190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214,
         216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 237, 239,
         241, 243, 243], dtype=int)

        div_data = np.array(
        [ 1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,
          1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1.,
          1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,
          1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1.,
         -1.,  1.,  1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,  1.,
         -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1.,
         -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
         -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
        [127, 123,   3,   1, 127,   4,   2,   0, 124,  11,  10,   9,   8,
           7,   6,   5,  14,  13,  12,  17,  16,  15,  20,  19,  18,  23,
          22,  21,  26,  25,  24,  12,  29,  28,  27,  24,  31,  30,  27,
          15,  34,  33,  32,  16,  37,  36,  35,  32,  39,  38,  35,  18,
          42,  41,  40,  19,  45,  44,  43,  40,  48,  47,  46,  43,  21,
          51,  50,  49,   0,  53,  52,  49,  13,  56,  55,  54,   1,  58,
          57,  54,  22, 128, 125, 123,  62,  60, 128,  63,  61,  59,   2,
         129, 126, 125,  67,  65, 129,  68,  66,  64,  59, 130, 126, 124,
          71,  69, 130,  72,  70,  64,   5,  76,  75,  74,  73,  52,  50,
          80,  79,  78,  77,  57,  55,  85,  84,  83,  82,  81,  44,  41,
          89,  88,  87,  86,  36,  33,  94,  93,  92,  91,  90,  28,  25,
          97,  96,  95,  90,  86,  30,  29, 100,  99,  98,  87,  81,  38,
          37, 103, 102, 101,  82,  46,  45, 106, 105, 104, 101,  83,   6,
         109, 108, 107,  95,  91,   7, 112, 111, 110, 104, 102,  69,  65,
         115, 114, 113, 107,  92,  70,  66, 116, 105,  98,  84,   8, 116,
         108,  99,  96,  88,   9, 118, 117, 110,  77,  67,  60, 120, 119,
         113,  73,  68,  61, 100,  85,  42,  39,  20,  97,  89,  34,  31,
          17, 121,  93,  74,  53,  26,  14, 122,  78,  58,  47,  23, 121,
         119, 114,  94,  75, 122, 117, 111, 103,  79,  48, 118,  80,  62,
          56,   3, 112, 106,  71,  10, 120,  76,  63,  51,   4, 115, 109,
          72,  11], dtype=int)

        curl_indptr = np.array(
        [  0,   4,   8,  16,  19,  22,  25,  28,  32,  36,  40,  44,  48,
          52,  56,  60,  65,  69,  73,  77,  81,  86,  91,  96, 101, 106,
         111, 117, 123, 130, 136, 143, 150, 157, 163, 169, 175, 182, 189,
         194, 200, 206, 212, 217, 222, 228, 233, 238, 244, 249, 253, 258,
         262], dtype=int)

        curl_data = np.array(
        [ 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,
         -1,  1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1,  1,
          1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  1,  1, -1, -1, -1,
          1, -1, -1,  1,  1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1,  1, -1,
         -1, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1, -1, -1,  1,  1,
          1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1, -1,
         -1, -1,  1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1,
         -1, -1, -1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1,
          1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1, -1,
         -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,
          1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,
          1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1, -1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))

        grad = sps.csc_array((52, 0))
        # fmt: on

        return div, curl, grad

    def _test_2d_cartesian_1_fracture(self):
        # fmt: off
        div_indices = np.array(
            [  0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,
               8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,  0,  1,
               2,  3,  0,  4,  1,  5,  2,  6,  3,  7,  8, 17,  9, 16,  6, 10,  7,
              11,  8, 12,  9, 13, 10, 14, 11, 15, 12, 13, 14, 15,  4, 17,  5, 16,
              16, 17, 17], dtype=int)

        div_indptr = np.array(
            [ 0,  1,  3,  5,  7,  8,  9, 11, 13, 15, 16, 17, 19, 21, 23, 24, 25,
             27, 29, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
             56, 58, 60, 61, 62, 63, 64, 66, 68, 68, 70, 71], dtype=int)

        div_data = np.array(
            [-1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,
              1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1,
             -1,  1, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1,  1,
             -1,  1, -1,  1, -1, -1,  1, -1,  1,  1, -1,  1, -1,
              1, -1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1,  1,
             -1,  1, -1,  1, -1,  1])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
            [ 0, 20,  1, 20, 21,  2, 21, 22,  3, 22, 23,  4, 23,  0,  5, 24,  1,
              6, 24, 25,  2,  7, 25, 26,  3,  8, 26, 27,  4,  9, 27,  5, 40, 44,
             10, 28, 44,  6, 40, 41, 43, 11, 28, 29, 43,  7, 12, 29, 30, 41,  8,
             13, 30, 31,  9, 14, 31, 10, 15, 32, 11, 16, 32, 33, 12, 17, 33, 34,
             13, 18, 34, 35, 14, 19, 35, 15, 36, 16, 36, 37, 17, 37, 38, 18, 38,
             39, 19, 39], dtype=int)
        curl_indptr = np.array(
            [ 0,  2,  5,  8, 11, 13, 16, 20, 24, 28, 31, 34, 37, 41, 45, 50, 54,
             57, 60, 64, 68, 72, 75, 77, 80, 83, 86, 88], dtype=int)
        curl_data = np.array(
            [-1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1, -1,  1, -1,  1,  1,
              -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1,
              -1,  1, -1,  1, -1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1,  1,
              -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,
                1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1,  1,  1, -1,
                1,  1, -1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))


        grad = np.zeros((27, 0))
        # fmt: on

        return div, curl, grad

    def _test_2d_simplicial_2_fractures(self):
        # fmt: off
        div_indices = np.array(
        [ 79, 109, 136, 112,  81,  79, 112, 109,  93,  39, 143,  38,  39,
          38,  95,  93,  89, 111, 144,  90,  90,  89, 113, 111,  98,  80,
         151,  82,  82,  80,  99,  98,  26,  32,  32,  26,  27,  30,  30,
          27,  24,  25,  25,  24,  31,  28,  31,  28, 139,  87, 140,  49,
         147,  92, 148,  88,  50,  49,  84,  83,  92,  91,  88,  87,  36,
          74,  36,  89,  74,  57,  36,  57,  26,  33,  48,  33, 111,  48,
          58,  33,  58,  27,  17,  41,  17,  93,  41,  53,  17,  53,  30,
          15,  47,  15,  47,  39,  40,  15,  40,  24,  35,  69,  35,  98,
          69,  62,  35,  62,  25,  18,  43,  18,  80,  43,  52,  18,  52,
          31,  16,  44,  16,  79,  44,  51,  16,  51,  32,  34,  55,  34,
         109,  55,  59,  34,  59,  28, 137,  64, 121,  56, 134,  64, 121,
          81, 134, 112, 138,  19,  72,  19,  97,  85,  97,  56,  72,  64,
          37,  19, 129,  85, 129,  91,  87,  37, 142,   1,  38,   9,   9,
           1, 125,  65, 125,  95, 141, 117, 103,   1,  67,  65,  67,  46,
         117, 103, 120,  46, 133,  49, 120,  84, 133, 117, 145,  73, 126,
          73, 135,  63, 126,  90, 135, 113, 146,  61,  66,  13, 100,  61,
         100,  73,  66,  63,  22,  13, 124,  61,  83,  22, 124,  92, 150,
          60, 122,  60, 130,  75, 122,  82, 130,  99, 149,  54,  20,   0,
          78,  54,  78,  60,  75,  20,  14,   0, 123,  54,  50,  14, 123,
          88,  57,   4, 128,  21,  21,   4, 128,  74,  58,   2,   3,   2,
          12,   3, 114,  12, 114,  48,  59,   7,   7,   6,   8,   6, 116,
           8, 116,  55,  68,  62,  68,  42, 127,  42, 127,  69,  51,   5,
         119,  94,  94,   5, 119,  44,  53,  10, 115, 110, 110,  10, 115,
          41,  52,  11, 118, 107, 107,  11, 118,  43,  45,  40, 105,  47,
         106, 105, 106,  45,   5,   4,  11,   7,  10,   2,  68,  45, 105,
           9, 106,  71, 108,  71, 108, 103, 102,  67, 110, 102, 125, 115,
         102,  76,  86,  76, 120,  86,  76,   3,  66,  12,  86,  22, 100,
          23, 132,  70,  70,  23, 132, 124,  23,  21, 128, 126,  71,  29,
          42,  29,  29,  20, 131,  14, 131, 108, 104,  78, 104,  96, 101,
          96, 123, 101, 107, 104, 122, 118,  96,   6,  72,   8, 101,  37,
          97,  77,  77,  70, 132, 129,  94,  77, 121, 119, 130, 127, 134,
         116, 135, 114, 133, 131, 136,  81, 143,  95, 139,  91, 140,  84,
         137,  56, 138,  85, 142,  65, 141,  46, 144, 113, 151,  99, 147,
          83, 148,  50, 145,  63, 146,  13, 150,  75, 149,   0, 136, 137,
         136, 138, 137, 139, 138, 152, 140, 141, 140, 142, 141, 143, 142,
         143, 152, 139, 144, 145, 144, 146, 145, 147, 146, 152, 148, 149,
         148, 150, 149, 151, 150, 151, 152, 147], dtype=int)

        div_indptr = np.array(
        [  0,   1,   2,   4,   6,   8,   9,  10,  12,  14,  16,  17,  18,
          20,  22,  24,  25,  26,  28,  30,  32,  33,  34,  36,  37,  38,
          40,  41,  42,  44,  45,  46,  48,  50,  52,  54,  56,  58,  60,
          62,  64,  65,  67,  69,  71,  73,  74,  76,  78,  80,  82,  83,
          85,  87,  89,  91,  92,  94,  96,  98, 100, 101, 103, 105, 107,
         109, 110, 112, 114, 116, 118, 119, 121, 123, 125, 127, 128, 130,
         132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
         158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182,
         184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208,
         210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234,
         236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260,
         262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286,
         288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312,
         314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338,
         340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364,
         366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390,
         392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416,
         418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 441,
         443, 445, 447, 449, 451, 453, 455, 456, 458, 459, 461, 463, 465,
         467, 469, 471, 473, 474, 476], dtype=int)

        div_data = np.array(
        [-1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1.,
         -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,  1.,
         -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,
         -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1.,
          1., -1.,  1., -1., -1.,  1.,  1., -1., -1., -1.,  1., -1.,  1.,
          1., -1., -1.,  1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,
          1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1.,  1., -1.,
          1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,
          1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,
          1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,
          1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,
          1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1.,
         -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
         -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,
          1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,
          1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
          1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,
         -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1., -1.,
          1., -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
          1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1., -1.,
          1., -1.,  1., -1.,  1.,  1., -1.,  1.])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
        [232, 216,   3,   0, 232,   4,   2,   1, 240,   8,   7,   6, 240,
         217,   9,   5, 242,  13,  12,  10, 242, 224,  14,  11, 250,  18,
          17,  16, 250, 225,  19,  15,  22,  21,  20,  25,  24,  23,  28,
          27,  26,  31,  30,  29, 246, 236, 227,  36,  33, 251, 236, 226,
         219,  37, 246, 241,  39,  35,  32, 251, 241, 218,  38,  34,  42,
          41,  40,  10,  44,  43,  40,  20,  47,  46,  45,  11,  49,  48,
          45,  23,  52,  51,  50,   5,  54,  53,  50,  24,  57,  56,  55,
           6,  59,  58,  55,  26,  62,  61,  60,  15,  64,  63,  60,  27,
          67,  66,  65,  16,  69,  68,  65,  29,  72,  71,  70,   0,  74,
          73,  70,  21,  77,  76,  75,   1,  79,  78,  75,  30, 233, 220,
         216,  83,  81, 233,  84,  82,  80,   2, 234,  89,  86,  85,  80,
         234, 221, 220,  88,  87, 235,  93,  90,  85,  32, 235, 221, 218,
          92,  91, 239,  96,  95,  94,   7, 239, 222, 217,  98,  97, 238,
         103, 100,  99,  94, 238, 223, 222, 102, 101, 237, 223, 219, 106,
         104, 237, 107, 105,  99,  33, 243, 228, 224, 112, 110, 243, 111,
         109, 108,  12, 244, 229, 228, 117, 114, 244, 116, 115, 113, 108,
         245, 229, 226, 120, 118, 245, 121, 119, 113,  34, 249, 125, 123,
         122,  17, 249, 230, 225, 126, 124, 248, 231, 230, 131, 128, 248,
         130, 129, 127, 122, 247, 231, 227, 134, 132, 247, 135, 133, 127,
          35, 139, 138, 137, 136,  43,  41, 144, 143, 142, 141, 140,  48,
          46, 149, 148, 147, 146, 145,  78,  76, 153, 152, 151, 150,  63,
          61, 157, 156, 155, 154,  73,  71, 161, 160, 159, 158,  53,  51,
         165, 164, 163, 162,  68,  66, 169, 168, 167, 166,  58,  56, 170,
         154, 136,  74,  44,  22, 171, 162, 145,  79,  69,  31, 172, 158,
         140,  54,  49,  25, 173, 166, 150,  64,  59,  28, 174, 167,  95,
          57,   8, 177, 176, 175, 174, 168, 100,  96, 180, 179, 178, 159,
         101,  97, 183, 182, 181, 178, 104, 102, 184, 181, 179, 172, 160,
         141, 186, 185, 184, 182, 142, 118, 114, 190, 189, 188, 187, 119,
         115, 192, 191, 187, 137, 116, 109, 194, 193, 175, 173, 169, 151,
         197, 196, 195, 193, 176, 132, 128, 201, 200, 199, 198, 133, 129,
         203, 202, 198, 163, 130, 123, 204, 202, 199, 171, 164, 146, 206,
         205, 204, 200, 147,  90,  86, 209, 208, 207, 188,  91,  87, 211,
         210, 207, 155,  88,  81, 210, 208, 191, 189, 170, 156, 138, 212,
         195, 194, 152, 131, 124, 213, 205, 148,  89,  82, 214, 185, 143,
         117, 110, 215, 196, 134, 105,  36, 186, 183, 120, 106,  37, 211,
         157,  83,  72,   3, 203, 165, 125,  67,  18, 209, 190, 121,  92,
          38, 206, 201, 135,  93,  39, 180, 161,  98,  52,   9, 192, 139,
         111,  42,  13, 215, 197, 177, 107, 103, 212, 153, 126,  62,  19,
         213, 149,  84,  77,   4, 214, 144, 112,  47,  14], dtype=int)

        curl_indptr = np.array(
        [  0,   4,   8,  12,  16,  20,  24,  28,  32,  35,  38,  41,  44,
          49,  54,  59,  64,  68,  72,  76,  80,  84,  88,  92,  96, 100,
         104, 108, 112, 116, 120, 124, 128, 133, 138, 143, 148, 153, 158,
         163, 168, 173, 178, 183, 188, 193, 198, 203, 208, 213, 218, 223,
         228, 233, 238, 243, 248, 254, 261, 268, 274, 280, 286, 292, 298,
         304, 310, 316, 322, 327, 334, 340, 346, 352, 359, 365, 371, 377,
         384, 390, 396, 402, 409, 415, 421, 428, 434, 439, 444, 449, 454,
         459, 464, 469, 474, 479, 484, 489, 494, 499, 504], dtype=int)

        curl_data = np.array(
        [-1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,
          1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1,
          1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1, -1,
          1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,
          1, -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1,
         -1, -1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1, -1,  1,  1, -1,
         -1,  1,  1,  1, -1,  1,  1, -1, -1, -1,  1, -1,  1,  1,  1,  1,  1,
          1, -1,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1,  1,  1,  1, -1, -1,
         -1, -1, -1,  1,  1,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1,  1,  1,
          1,  1, -1, -1,  1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,
         -1, -1,  1, -1,  1,  1,  1,  1,  1,  1, -1, -1,  1, -1,  1,  1,  1,
          1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,
          1, -1, -1,  1, -1,  1,  1, -1,  1, -1,  1,  1,  1,  1,  1,  1, -1,
         -1, -1, -1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1, -1, -1,  1,
          1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,
         -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1,
          1, -1, -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1,
         -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,
         -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1,
          1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1,
         -1, -1,  1,  1,  1,  1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1,
         -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,  1,
          1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,
         -1,  1,  1,  1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1,  1, -1, -1,
         -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))

        grad = sps.csc_array((100, 0))
        # fmt: on

        return div, curl, grad

    def _test_2d_cartesian_2_fractures(self):
        # fmt: off
        div_indices = np.array(
            [ 0,  0,  1,  2, 23,  2,  3,  3,  4,  4,  5,  6, 22,  6,  7,  7,  8,
              8,  9, 10, 21, 10, 11, 11, 12, 12, 13, 14, 20, 14, 15, 15,  0,  1,
              2,  3,  0,  4,  1,  5,  2,  6,  3,  7,  8, 19,  9, 18, 10, 17, 11,
             16,  8, 12,  9, 13, 10, 14, 11, 15, 12, 13, 14, 15,  4, 19,  5, 18,
              6, 17,  7, 16,  1, 23,  5, 22,  9, 21, 13, 20, 16, 16, 17, 18, 24,
             18, 19, 19, 17, 24, 20, 20, 21, 22, 24, 22, 23, 23, 21, 24], dtype=int)

        div_indptr = np.array(
            [  0,   1,   3,   5,   7,   8,   9,  11,  13,  15,  16,  17,  19,
              21,  23,  24,  25,  27,  29,  31,  32,  33,  34,  35,  36,  38,
              40,  42,  44,  46,  48,  50,  52,  54,  56,  58,  60,  61,  62,
              63,  64,  66,  68,  70,  72,  74,  76,  78,  80,  81,  83,  85,
              87,  88,  90,  91,  93,  95,  97,  98, 100], dtype=int)

        div_data = np.array(
            [-1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,
              1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1.,
             -1., -1.,  1.,  1., -1.,  1., -1., -1., -1., -1.,  1., -1.,  1.,
             -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,
              1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1.,  1.,  1.,  1.,
             -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,
              1., -1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,  1., -1., -1.,
              1., -1., -1.,  1.,  1., -1.,  1.,  1., -1.])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
            [ 0, 20,  1, 20, 21, 21, 44, 58,  2, 22, 58,  3, 22, 23,  4, 23,  0,
              5, 24,  1,  6, 24, 25, 25, 44, 45, 57,  2,  7, 26, 57,  3,  8, 26,
             27,  4,  9, 27,  5, 40, 52, 10, 28, 52,  6, 40, 41, 51, 11, 28, 29,
             51, 41, 45, 50, 56,  7, 42, 53, 56, 29, 46, 50, 59, 12, 30, 53, 59,
              8, 42, 43, 49, 13, 30, 31, 49,  9, 43, 48, 14, 31, 48, 10, 15, 32,
             11, 16, 32, 33, 33, 46, 47, 55, 12, 17, 34, 55, 13, 18, 34, 35, 14,
             19, 35, 15, 36, 16, 36, 37, 37, 47, 54, 17, 38, 54, 18, 38, 39, 19,
             39], dtype=int)

        curl_indptr = np.array(
            [  0,   2,   5,   8,  11,  14,  16,  19,  23,  27,  31,  35,  38,
              41,  44,  48,  52,  56,  60,  64,  68,  72,  76,  79,  82,  85,
              89,  93,  97, 101, 104, 106, 109, 112, 115, 118, 120], dtype=int)

        curl_data = np.array(
            [-1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1, -1, -1,  1, -1, -1,  1,
             -1,  1,  1, -1, -1,  1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1,
              1,  1, -1, -1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1, -1, -1,  1,
             -1, -1,  1,  1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1, -1,  1,
              1, -1,  1,  1, -1, -1,  1, -1,  1, -1,  1, -1, -1, -1,  1, -1,  1,
              1, -1, -1,  1, -1,  1, -1, -1,  1, -1,  1,  1,  1, -1, -1,  1,  1,
             -1, -1,  1,  1,  1, -1,  1, -1,  1, -1,  1,  1,  1,  1, -1,  1,  1,
             -1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))

        grad = np.zeros((36, 0))
        # fmt: on

        return div, curl, grad

    def _test_3d_simplicial_1_fracture(self):
        # fmt: off
        div_indices = np.array(
        [116, 116, 117, 117,  83,  82, 140,  82, 108, 109, 141, 108, 116,
          93,  93,  83, 117,  92,  92,  82, 108,  92, 109,  93, 107, 107,
         106, 106,  88,  89, 142,  89, 125, 124, 143, 125, 134, 106, 134,
          88, 135, 107, 135,  89, 135, 125, 134, 124, 132, 132, 133, 133,
          97,  96, 144,  97,  99,  98, 145,  99, 132, 123, 123,  99, 133,
         122, 122,  98, 123,  97, 122,  96, 131, 131, 130, 130, 113, 112,
         146, 112, 110, 111, 147, 111, 137, 131, 137, 110, 136, 130, 136,
         111, 137, 113, 136, 112,  85,  85, 115, 115, 128, 107, 128,  85,
         128, 115,  84,  84, 114, 114, 129, 106, 129,  84, 129, 114,  80,
          80, 100, 100, 116,  86,  86,  80, 100,  86,  81,  81, 101, 101,
         117,  87,  87,  81, 101,  87, 102, 102, 104, 104, 132, 127, 127,
         104, 127, 102, 103, 103, 105, 105, 133, 126, 126, 105, 126, 103,
         119, 119, 121, 121, 138, 131, 138, 121, 138, 119, 118, 118, 120,
         120, 139, 130, 139, 120, 139, 118,  16,  19,  19,  16,  18,  17,
          18,  17,  83,  18,  88,  12,  17,  12,  89,  13,  16,  13,  82,
          19, 148,  13,  51, 113,  34,  51,  34,  48, 112,  35,  48,  35,
         108,  48, 109,  51, 149,  35,  67,  97,  67,  64,  96,  64, 125,
          70,  70,  67, 124,  71,  71,  64, 150,  70,  56,  72,  56,  72,
          42, 110,  42,  55,  73,  55,  73,  43, 111,  43,  74,  55,  99,
          74,  75,  56,  98,  75,  75,  72,  74,  73, 151,  43,  21,  11,
          85,  11,  21,  16,  81,  25,  25,  19,  11,  25,  21,  66, 102,
          68,  68,  66,  62,  28, 115,  28,  66,  62,  28,  68,  62,  80,
          24,  24,  18,  20,  10,  84,  10,  20,  17,  10,  24,  20,  65,
         103,  69,  69,  65,  63,  29, 114,  29,  65,  63,  29,  69,  63,
          50, 119,  52,  58,  52,  58,  50, 100,  60,  60,  50,  52,  60,
          58,  49, 118,  53,  59,  53,  59,  49, 101,  61,  61,  49,  53,
          61,  59,  54, 120,  44,  54,  44, 104,  54,  44,  57, 121,  45,
          57,  45, 105,  57,  45,  86,  79,  93,  79,  79,  24, 129,  76,
         134,  76,  10,   3,  20,   3,  76,   0,   3,   0,  12,   0, 128,
          77, 135,  77,  11,   2,  21,   2,  77,   1,   2,   1,  13,   1,
          87,  78,  92,  78,  78,  25,  57,  56, 138,  91, 137,  91,  45,
           5,  91,   5,  72,  36,  36,   5,  42,  36,  55,  54, 139,  90,
         136,  90,  44,   4,  90,   4,  73,  37,  37,   4,  43,  37, 127,
          95, 123,  95,  95,  74, 126,  94, 122,  94,  94,  75,  67,  66,
          95,  68,  65,  64,  94,  69,  32,  28,  62,  32,  77,  22,  32,
          22,  70,  22,  33,  29,  63,  33,  76,  23,  33,  23,  71,  23,
          51,  50,  52,  14,  91,  14,  27,  14,  58,  27,  34,  27,  49,
          48,  53,  15,  90,  15,  26,  15,  59,  26,  35,  26,  78,  61,
          79,  60,   7,  14,   7,   7,   5,  46,  46,  39,  39,   7,  46,
          31,  31,   3,  40,  39,  40,  31,  40,  27,  46,  33,  39,  36,
          23,   9,   9,   0,  31,   9,   6,  15,   6,   6,   4,  47,  47,
          38,  38,   6,  47,  30,  30,   2,  41,  38,  41,  30,  41,  26,
          47,  32,  38,  37,  22,   8,   8,   1,  30,   8, 152,   8, 153,
          41, 140,  83, 141, 109, 142,  88, 143, 124, 144,  96, 145,  98,
         146, 113, 147, 110, 148,  12, 149,  34, 150,  71, 151,  42, 152,
           9, 153,  40, 140, 141, 141, 140, 142, 143, 143, 142, 144, 145,
         145, 144, 146, 147, 147, 146, 148, 142, 148, 140, 149, 146, 149,
         141, 150, 143, 150, 144, 151, 145, 151, 147, 152, 150, 152, 148,
         153, 151, 153, 152, 153, 149], dtype=int)

        div_indptr = np.array(
        [  0,   1,   2,   3,   4,   5,   6,   8,   9,  10,  12,  14,  16,
          18,  20,  22,  24,  25,  26,  27,  28,  29,  30,  32,  33,  34,
          36,  38,  40,  42,  44,  46,  48,  49,  50,  51,  52,  53,  54,
          56,  57,  58,  60,  62,  64,  66,  68,  70,  72,  73,  74,  75,
          76,  77,  78,  80,  81,  82,  84,  86,  88,  90,  92,  94,  96,
          97,  98,  99, 100, 102, 104, 106, 107, 108, 109, 110, 112, 114,
         116, 117, 118, 119, 120, 122, 124, 126, 127, 128, 129, 130, 132,
         134, 136, 137, 138, 139, 140, 142, 144, 146, 147, 148, 149, 150,
         152, 154, 156, 157, 158, 159, 160, 162, 164, 166, 167, 168, 169,
         170, 172, 174, 176, 177, 178, 180, 181, 182, 184, 186, 188, 190,
         192, 194, 196, 198, 199, 201, 203, 204, 206, 208, 210, 212, 214,
         215, 217, 218, 220, 222, 224, 226, 228, 230, 231, 233, 235, 237,
         238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262,
         264, 266, 268, 269, 271, 272, 274, 276, 278, 280, 282, 283, 285,
         287, 289, 291, 293, 295, 296, 298, 299, 301, 303, 305, 307, 309,
         310, 312, 313, 315, 317, 319, 321, 323, 324, 326, 327, 329, 331,
         333, 335, 337, 338, 340, 341, 343, 345, 347, 348, 349, 351, 353,
         355, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
         380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404,
         406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430,
         432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456,
         458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482,
         484, 486, 488, 490, 492, 494, 496, 497, 499, 501, 502, 504, 506,
         508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 527, 529, 531,
         532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556,
         558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
         584, 586, 588, 589, 590, 592, 593, 594, 596, 597, 598, 600, 601,
         602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626,
         628, 630], dtype=int)

        div_data = np.array(
        [ 1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1.,
         -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,
         -1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,
          1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1.,
         -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,
          1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1.,
         -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
          1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1.,
         -1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,
          1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1.,
         -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
          1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,
          1.,  1., -1.,  1.,  1., -1., -1.,  1., -1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1., -1.,  1.,  1.,  1., -1., -1., -1.,  1., -1.,
          1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1., -1.,  1.,  1.,
         -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,
          1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1., -1.,  1., -1., -1.,
          1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1.,  1., -1., -1.,
          1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1.,
          1., -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1., -1.,  1.,
         -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1.,
          1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,
          1., -1., -1., -1.,  1.,  1., -1.,  1., -1.,  1.,  1.,  1., -1.,
         -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,
          1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
          1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1.,
         -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,
          1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1.,
         -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,
          1., -1., -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1.,
         -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1.,  1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,
          1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1.,
         -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1.,  1.,
         -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
          1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,
         -1.,  1., -1., -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
          1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1.,
         -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
         -1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,
          1., -1.,  1.,  1., -1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
         -1.,  1.,  1., -1.,  1., -1.,  1., -1., -1.,  1., -1.,  1.,  1.,
         -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,
          1., -1., -1.,  1.,  1., -1.])

        div = sps.csc_array((div_data, div_indices, div_indptr))

        curl_indices = np.array(
        [  3,   2, 340,   6,   5, 341,   9,   7,  13,  12,   5,   2,  14,
          12,   7,   3, 342,  14,  13,   9,   6,   1,   0, 340, 326,   4,
         341, 327,   8,  11,  10,   4,   0,  15,  10,   8,   1, 342, 327,
         326,  15,  11,  19,  18, 343, 328,  20, 344, 329,  24,  27,  26,
          20,  18,  31,  26,  24,  19, 345, 329, 328,  31,  27,  17,  16,
         343,  22,  21, 344,  25,  23,  29,  28,  21,  16,  30,  28,  23,
          17, 345,  30,  29,  25,  22,  35,  34, 346, 330,  37, 347, 331,
          40,  45,  44,  40,  34,  47,  44,  37,  35, 348, 331, 330,  47,
          45,  33,  32, 346,  38,  36, 347,  41,  39,  43,  42,  39,  32,
          46,  42,  36,  33, 348,  46,  43,  41,  38,  49,  48, 349, 332,
          52, 350, 333,  55,  59,  58,  55,  48,  62,  58,  52,  49, 351,
         333, 332,  62,  59,  51,  50, 349,  54,  53, 350,  57,  56,  61,
          60,  56,  50,  63,  60,  53,  51, 351,  63,  61,  57,  54,  65,
          64,  67,  66,  69,  68,  64,  16,  70,  68,  66,  17,  70,  69,
          67,  65,  72,  71,  74,  73,  76,  75,  71,  18,  77,  75,  73,
          19,  77,  76,  74,  72,  79,  78,  81,  80,  83,  82,  78,   0,
          84,  82,  80,   1,  84,  83,  81,  79,  86,  85,  88,  87,  90,
          89,  85,   2,  91,  89,  87,   3,  91,  90,  88,  86,  93,  92,
          95,  94,  97,  96,  94,  32,  98,  96,  92,  33,  98,  97,  95,
          93, 100,  99, 102, 101, 104, 103, 101,  34, 105, 103,  99,  35,
         105, 104, 102, 100, 107, 106, 109, 108, 111, 110, 108,  48, 112,
         110, 106,  49, 112, 111, 109, 107, 114, 113, 116, 115, 118, 117,
         115,  50, 119, 117, 113,  51, 119, 118, 116, 114, 125, 124, 123,
         126, 123,   4, 128, 127, 124,  20, 352, 334, 328, 127, 353, 334,
         326, 128, 126, 125, 122, 121, 120, 130, 129, 120,  21, 131, 121,
           5, 352, 132, 129,  22, 353, 132, 131, 130, 122,   6, 135, 134,
         133,  52, 140, 133,   8, 354, 335, 332, 134, 355, 335, 327, 140,
         135, 138, 137, 136,  53, 139, 136,   7, 354, 141, 137,  54, 355,
         141, 139, 138,   9, 145, 144,  37, 149, 148, 144,  24, 356, 336,
         329, 148, 357, 336, 330, 149, 145, 143, 142,  36, 147, 146, 142,
          23, 356, 150, 146,  25, 357, 150, 147, 143,  38, 154, 153, 152,
         151,  55, 162, 161, 151,  40, 163, 161, 152, 358, 337, 331, 163,
         162, 153, 359, 337, 333, 154, 158, 157, 156, 155,  56, 160, 159,
         155,  39, 164, 159, 156, 358, 165, 164, 160, 157,  41, 359, 165,
         158,  57, 168, 167, 166, 120,  64, 170, 169, 121,  85, 172, 171,
         169, 166,  86, 171, 167,  65, 172, 170, 168, 122, 175, 174, 173,
          92, 178, 177, 176, 173,  66, 180, 179, 176, 174,  93, 179, 177,
          67, 180, 178, 175, 182, 181, 123,  78, 185, 184, 183, 124,  71,
         187, 186, 183, 181,  79, 186, 184,  72, 187, 185, 182, 125, 190,
         189, 188,  99, 193, 192, 191, 188,  73, 195, 194, 191, 189, 100,
         194, 192,  74, 195, 193, 190, 199, 198, 197, 196, 106, 201, 200,
         196,  80, 202, 197, 107, 203, 202, 200, 198,  81, 203, 201, 199,
         207, 206, 205, 204, 113, 209, 208, 204,  87, 210, 205, 114, 211,
         210, 208, 206,  88, 211, 209, 207, 214, 213, 212, 115, 215, 212,
          94, 216, 213, 116, 216, 215, 214,  95, 219, 218, 217, 108, 220,
         217, 101, 221, 218, 109, 221, 220, 219, 102, 223, 222,  82,  10,
         224, 222, 181,  83, 224, 223, 182, 126,  11, 226, 225,  75,  26,
         228, 227, 183, 230, 229, 227, 225, 184,  76, 231, 229, 226, 127,
          27, 231, 230, 228, 185, 128, 233, 232,  68,  28, 235, 234, 166,
         237, 236, 234, 232, 167,  69, 238, 236, 233, 129,  29, 238, 237,
         235, 168, 130, 240, 239,  89,  12, 241, 239, 169,  90, 241, 240,
         170, 131,  13, 242, 217, 151, 244, 243, 110,  58, 246, 245, 243,
         218, 111, 248, 247, 245, 242, 219, 152, 249, 247, 153, 249, 248,
         246, 244, 154,  59, 250, 212, 155, 252, 251, 117,  60, 254, 253,
         251, 213, 118, 256, 255, 253, 250, 214, 156, 257, 255, 157, 257,
         256, 254, 252, 158,  61, 259, 258,  96,  42, 260, 258, 250, 215,
         159,  97, 260, 259, 160,  43, 262, 261, 103,  44, 263, 261, 242,
         220, 161, 104, 263, 262, 162,  45, 264, 173, 142, 265, 258, 174,
          98, 265, 264, 259, 175, 143,  46, 266, 188, 144, 267, 261, 189,
         105, 267, 266, 262, 190, 145,  47, 269, 268, 176, 271, 270, 268,
         232, 177,  70, 272, 270, 233, 146,  30, 272, 271, 269, 264, 178,
         147, 274, 273, 191, 276, 275, 273, 225, 192,  77, 277, 275, 226,
         148,  31, 277, 276, 274, 266, 193, 149, 278, 196, 133, 280, 279,
         243, 197, 112, 282, 281, 279, 198, 283, 281, 280, 244, 134,  62,
         283, 282, 278, 199, 135, 284, 204, 136, 286, 285, 251, 205, 119,
         288, 287, 285, 206, 289, 287, 286, 252, 137,  63, 289, 288, 284,
         207, 138, 290, 239, 208,  91, 290, 284, 240, 209, 139,  14, 291,
         222, 200,  84, 291, 278, 223, 201, 140,  15, 293, 292, 279, 202,
         294, 292, 245, 221, 294, 293, 280, 246, 297, 296, 295, 292, 299,
         298, 295, 227, 186, 301, 300, 298, 296, 302, 300, 297, 293, 281,
         302, 301, 299, 291, 282, 228, 224, 203, 187, 303, 295, 273, 194,
         304, 303, 296, 274, 267, 263, 247, 195, 163, 304, 297, 294, 248,
         306, 305, 275, 229, 307, 305, 303, 298, 276, 307, 306, 299, 230,
         309, 308, 285, 210, 310, 308, 253, 216, 310, 309, 286, 254, 313,
         312, 311, 308, 315, 314, 311, 234, 171, 317, 316, 314, 312, 318,
         316, 313, 309, 287, 318, 317, 315, 290, 288, 241, 235, 211, 172,
         319, 311, 268, 179, 320, 319, 312, 269, 265, 260, 255, 180, 164,
         320, 313, 310, 256, 322, 321, 270, 236, 323, 321, 319, 314, 271,
         323, 322, 315, 237, 360, 338, 336, 305, 277, 361, 338, 334, 306,
         231, 360, 324, 321, 272, 150, 361, 324, 322, 238, 132, 362, 325,
         320, 316, 257, 165, 363, 325, 324, 323, 317, 362, 339, 337, 304,
         300, 249, 363, 339, 338, 307, 301, 364, 325, 318, 289, 141, 364,
         339, 335, 302, 283, 342, 341, 340, 345, 344, 343, 348, 347, 346,
         351, 350, 349, 353, 352, 343, 340, 355, 354, 349, 341, 357, 356,
         346, 344, 359, 358, 350, 347, 361, 360, 356, 352, 345, 363, 362,
         360, 358, 357, 348, 364, 362, 359, 354, 351, 364, 363, 361, 355,
         353, 342], dtype=int)

        curl_indptr = np.array(
        [   0,    2,    5,    8,   12,   16,   21,   23,   26,   29,   33,
           37,   42,   44,   47,   50,   54,   58,   63,   65,   68,   71,
           75,   79,   84,   86,   89,   92,   96,  100,  105,  107,  110,
          113,  117,  121,  126,  128,  131,  134,  138,  142,  147,  149,
          152,  155,  159,  163,  168,  170,  172,  176,  180,  184,  186,
          188,  192,  196,  200,  202,  204,  208,  212,  216,  218,  220,
          224,  228,  232,  234,  236,  240,  244,  248,  250,  252,  256,
          260,  264,  266,  268,  272,  276,  280,  282,  284,  288,  292,
          296,  299,  302,  306,  310,  316,  319,  323,  326,  330,  336,
          340,  343,  347,  352,  356,  359,  363,  368,  371,  375,  379,
          384,  387,  391,  395,  400,  405,  409,  412,  418,  422,  427,
          431,  434,  440,  444,  449,  453,  458,  461,  465,  469,  474,
          479,  482,  485,  489,  494,  499,  502,  506,  510,  515,  520,
          523,  526,  531,  535,  538,  543,  546,  551,  555,  558,  563,
          566,  570,  573,  576,  580,  584,  587,  590,  594,  598,  602,
          607,  611,  614,  620,  625,  630,  634,  637,  643,  648,  653,
          657,  661,  666,  669,  673,  678,  684,  687,  693,  696,  700,
          705,  711,  714,  720,  724,  730,  734,  738,  744,  748,  751,
          755,  761,  764,  768,  774,  777,  783,  788,  794,  797,  803,
          808,  814,  817,  822,  826,  832,  837,  840,  845,  849,  855,
          860,  864,  870,  874,  880,  884,  888,  892,  896,  901,  905,
          910,  919,  923,  932,  936,  940,  945,  949,  953,  957,  961,
          965,  970,  974,  979,  988,  992, 1001, 1005, 1009, 1014, 1018,
         1023, 1028, 1033, 1038, 1044, 1049, 1055, 1060, 1065, 1070, 1073,
         1076, 1079, 1082, 1086, 1090, 1094, 1098, 1103, 1109, 1114, 1120],
         dtype=int)

        curl_data = np.array(
        [ 1,  1, -1,  1,  1, -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1,
         -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,
         -1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1, -1,  1,  1,
         -1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1, -1, -1, -1,  1, -1,
         -1, -1, -1,  1,  1, -1,  1,  1, -1,  1,  1,  1,  1, -1, -1,  1, -1,
         -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1,  1,  1, -1,  1,  1, -1,
          1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,
          1,  1,  1,  1, -1,  1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,
          1,  1,  1, -1,  1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,
          1,  1, -1,  1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,
          1, -1,  1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,
         -1,  1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,
          1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,  1,
          1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,  1,  1,
         -1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  1,
          1,  1,  1, -1,  1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,
          1, -1,  1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,
          1, -1,  1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1,  1,  1,  1,
         -1,  1, -1,  1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,
          1,  1,  1,  1, -1,  1, -1,  1, -1, -1,  1,  1,  1,  1,  1, -1,  1,
         -1,  1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1, -1,
          1,  1, -1, -1,  1,  1,  1, -1, -1, -1,  1, -1,  1, -1,  1,  1,  1,
          1,  1,  1,  1, -1,  1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1,
         -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1, -1,
         -1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,
         -1, -1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  1,  1,
          1,  1,  1, -1,  1,  1,  1, -1, -1,  1, -1, -1,  1, -1, -1, -1,  1,
          1,  1,  1,  1,  1,  1, -1,  1,  1, -1,  1,  1, -1, -1, -1,  1, -1,
         -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1, -1,  1,  1, -1, -1,
         -1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,  1,  1, -1,  1, -1, -1,
         -1,  1,  1,  1,  1,  1,  1, -1,  1,  1, -1,  1, -1, -1, -1,  1,  1,
          1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1,  1, -1, -1, -1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1, -1, -1,
          1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1, -1, -1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,
         -1, -1,  1,  1,  1, -1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1,  1,  1,  1, -1,  1,
         -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1, -1,
         -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1,  1,  1,
          1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,
          1,  1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
         -1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1, -1, -1,  1,  1,  1, -1,
         -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,
         -1, -1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1, -1,  1,  1,
          1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1, -1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,
          1,  1, -1, -1,  1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,
          1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,
          1,  1, -1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1, -1,  1,
          1,  1,  1, -1, -1,  1, -1, -1,  1,  1, -1, -1, -1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1, -1,  1,
          1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1, -1, -1,  1,  1,  1,  1,
          1,  1,  1,  1, -1,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1,  1,  1,
          1, -1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1, -1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1, -1,
          1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,  1, -1, -1,
          1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1])

        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))

        grad_indices = np.array(
        [262,   5,   4,   3,   2,   1,   0, 262,  11,  10,   9,   8,   7,
           6, 263,  17,  16,  15,  14,  13,  12, 263,  23,  22,  21,  20,
          19,  18, 264,  29,  28,  27,  26,  25,  24, 264,  35,  34,  33,
          32,  31,  30, 265,  41,  40,  39,  38,  37,  36, 265,  47,  46,
          45,  44,  43,  42,  52,  51,  50,  49,  48,  18,  57,  56,  55,
          54,  53,  12,  62,  61,  60,  59,  58,   6,  67,  66,  65,  64,
          63,   0,  72,  71,  70,  69,  68,  30,  77,  76,  75,  74,  73,
          24,  82,  81,  80,  79,  78,  36,  87,  86,  85,  84,  83,  42,
         266,  92,  91,  90,  89,  88,  13,   7, 266,  97,  96,  95,  94,
          93,  19,   1, 267, 101, 100,  99,  98,  37,   8, 267, 105, 104,
         103, 102,  43,   2, 268, 109, 108, 107, 106,  25,  14, 268, 113,
         112, 111, 110,  31,  20, 269, 118, 117, 116, 115, 114,  38,  26,
         269, 123, 122, 121, 120, 119,  44,  32, 128, 127, 126, 125, 124,
          93,  63,  48, 133, 132, 131, 130, 129,  68,  49, 138, 137, 136,
         135, 134,  88,  58,  53, 143, 142, 141, 140, 139,  73,  54, 148,
         147, 146, 145, 144,  78,  59, 153, 152, 151, 150, 149,  83,  64,
         157, 156, 155, 154,  84,  69, 161, 160, 159, 158,  79,  74, 164,
         163, 162, 134,  89,  60,   9, 169, 168, 167, 166, 165, 135,  90,
          55,  15, 174, 173, 172, 171, 170, 124,  94,  50,  21, 177, 176,
         175, 125,  95,  65,   3, 183, 182, 181, 180, 179, 178, 158, 114,
          80,  39, 189, 188, 187, 186, 185, 184, 154, 119,  85,  45, 192,
         191, 190, 184, 155, 120,  70,  33, 195, 194, 193, 178, 159, 115,
          75,  27, 198, 197, 196, 190, 129, 110,  71,  34, 201, 200, 199,
         193, 139, 106,  76,  28, 205, 204, 203, 202, 196, 170, 130, 111,
          51,  22, 209, 208, 207, 206, 199, 165, 140, 107,  56,  16, 214,
         213, 212, 211, 210, 179, 144,  98,  81,  40, 219, 218, 217, 216,
         215, 185, 149, 102,  86,  46, 221, 220, 215, 175, 150, 103,  66,
           4, 223, 222, 210, 162, 145,  99,  61,  10, 226, 225, 224, 211,
         180, 160, 146,  82, 231, 230, 229, 228, 227, 224, 222, 212, 166,
         163, 147, 136,  62, 234, 233, 232, 227, 225, 206, 200, 194, 181,
         161, 141, 116,  77, 237, 236, 235, 232, 228, 207, 167, 142, 137,
          57, 240, 239, 238, 216, 186, 156, 151,  87, 245, 244, 243, 242,
         241, 238, 220, 217, 176, 171, 152, 126,  67, 248, 247, 246, 241,
         239, 202, 197, 191, 187, 157, 131, 121,  72, 251, 250, 249, 246,
         242, 203, 172, 132, 127,  52, 270, 253, 252, 235, 208, 168, 108,
          91,  17, 270, 255, 254, 249, 204, 173, 112,  96,  23, 271, 257,
         256, 254, 250, 247, 243, 205, 198, 192, 188, 133, 122, 113,  35,
         271, 259, 258, 252, 236, 233, 229, 209, 201, 195, 182, 143, 117,
         109,  29, 272, 260, 256, 248, 244, 240, 218, 189, 123, 104,  47,
         272, 261, 258, 234, 230, 226, 213, 183, 118, 100,  41, 273, 261,
         259, 253, 237, 231, 223, 214, 169, 164, 148, 138, 101,  92,  11,
         273, 260, 257, 255, 251, 245, 221, 219, 177, 174, 153, 128, 105,
          97,   5], dtype=int)

        grad_indptr = np.array(
        [  0,   7,  14,  21,  28,  35,  42,  49,  56,  62,  68,  74,  80,
          86,  92,  98, 104, 112, 120, 127, 134, 141, 148, 156, 164, 172,
         179, 187, 194, 201, 208, 214, 220, 227, 236, 245, 252, 262, 272,
         280, 288, 296, 304, 314, 324, 334, 344, 352, 360, 368, 381, 394,
         404, 412, 425, 438, 448, 457, 466, 481, 496, 507, 518, 533, 548],
         dtype=int)

        grad_data = np.array(
        [ 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1,
         -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,
          1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1,
         -1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,
          1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1, -1, -1,
         -1, -1, -1,  1,  1,  1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1,
         -1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1,  1,
          1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,
         -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1,
         -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1, -1,
         -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1,
         -1, -1, -1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1,
         -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,
         -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1,
         -1, -1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1,
         -1, -1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1,  1,  1,  1,  1,  1,
          1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1,
          1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,
          1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  1,
          1,  1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1,  1,
          1,  1,  1,  1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
         -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1,  1,
          1,  1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,
         -1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1,  1,
          1,  1,  1,  1,  1,  1,  1,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
          1,  1,  1,  1])

        grad = sps.csc_array((grad_data, grad_indices, grad_indptr))
        # fmt: on

        return div, curl, grad

    def _test_3d_cartesian_1_fracture(self):
        # fmt: off

        div_data = np.array(
            [-1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
            -1.,  1.,  1., -1., -1., -1.,  1., -1.,  1.,  1.,  1., -1., -1.,
            -1.,  1., -1.,  1.,  1.,  1., -1., -1., -1., -1.,  1., -1.,  1.,
            -1.,  1., -1.,  1., -1.,  1.,  1.,  1.,  1., -1.,  1., -1.,  1.,
            -1.,  1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1.,
            -1., -1.,  1., -1.,  1.,  1.,  1.])

        div_indices = np.array(
            [ 0,  1,  0,  1,  2,  3,  2,  3,  4,  5,  4,  5,  6,  7,  6,  7,  0,
                1,  2,  0,  3,  1,  2,  3,  4,  5,  6,  4,  7,  5,  6,  7,  0,  1,
                2,  3,  8,  4,  9,  5, 10,  6, 11,  7,  4,  5,  6,  7,  8,  0,  9,
                1, 10,  2, 11,  3,  8,  9,  8,  9, 10, 11, 10, 11,  8,  9, 10,  8,
            11,  9, 10, 11], dtype=int)

        div_indptr = np.array(
            [ 0,  1,  3,  4,  5,  7,  8,  9, 11, 12, 13, 15, 16, 17, 18, 20, 22,
            23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45,
            46, 47, 48, 50, 52, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 68, 70,
            71, 72], dtype=int)

        curl_data = np.array(
            [ 1., -1., -1.,  1.,  1., -1.,  1., -1., -1.,  1.,  1.,  1., -1.,
            -1.,  1.,  1., -1., -1.,  1., -1., -1., -1.,  1.,  1., -1.,  1.,
                1., -1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1.,  1., -1.,
            -1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
            -1.,  1.,  1.,  1., -1., -1.,  1.,  1., -1., -1., -1.,  1.,  1.,
            -1., -1.,  1.,  1.,  1., -1.,  1., -1.,  1.,  1., -1., -1., -1.,
                1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,
            -1.,  1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1., -1., -1.,
                1.,  1., -1.,  1., -1.,  1., -1.,  1.,  1., -1.,  1., -1.,  1.,
                1., -1., -1., -1., -1.,  1.,  1.,  1., -1., -1.,  1.,  1.,  1.,
            -1., -1.,  1.,  1., -1., -1.,  1., -1., -1.,  1.,  1., -1., -1.,
                1.,  1., -1., -1.,  1.,  1., -1., -1.,  1., -1.,  1., -1.,  1.,
                1.,  1., -1., -1.,  1.,  1., -1.,  1., -1.,  1., -1.,  1., -1.,
                1., -1., -1.,  1., -1.,  1., -1.,  1., -1.,  1., -1., -1.,  1.,
            -1.,  1.,  1., -1.,  1., -1., -1., -1., -1.,  1., -1.,  1.,  1.,
            -1., -1.,  1., -1., -1.,  1.,  1.,  1.,  1., -1.,  1., -1.,  1.])

        curl_indices = np.array(
            [24, 12, 24,  0, 12,  0, 25, 13, 25, 24,  1, 13, 12,  1, 25,  2, 13,
                2, 26, 24, 14, 26,  3, 14,  3,  0, 27, 25, 15, 27, 26,  4, 15, 14,
                4,  1, 27,  5, 15,  5,  2, 26, 16, 16,  3, 27, 17, 17, 16,  4, 17,
                5, 46, 36, 12, 40, 36,  0, 46, 28, 18, 40, 28,  6, 18,  6, 47, 37,
            13, 41, 37, 36,  1, 47, 29, 19, 41, 29, 28,  7, 19, 18,  7, 42, 37,
                2, 42, 29,  8, 19,  8, 48, 38, 36, 14, 43, 38,  3, 48, 30, 28, 20,
            43, 30,  9, 20,  9,  6, 49, 39, 37, 15, 44, 39, 38,  4, 49, 31, 29,
            21, 44, 31, 30, 10, 21, 20, 10,  7, 45, 39,  5, 45, 31, 11, 21, 11,
                8, 50, 38, 16, 50, 30, 22, 22,  9, 51, 39, 17, 51, 31, 23, 23, 22,
            10, 23, 11, 32, 18, 32,  6, 33, 19, 33, 32,  7, 33,  8, 34, 32, 20,
            34,  9, 35, 33, 21, 35, 34, 10, 35, 11, 34, 22, 35, 23, 46, 40, 47,
            46, 41, 47, 42, 48, 43, 40, 49, 48, 44, 41, 49, 45, 42, 50, 43, 51,
            50, 44, 51, 45], dtype=int)

        curl_indptr = np.array(
            [  0,   2,   4,   6,   8,  11,  14,  16,  18,  21,  23,  26,  29,
                32,  36,  38,  41,  43,  45,  47,  50,  52,  55,  58,  61,  64,
                66,  69,  73,  76,  80,  83,  86,  89,  91,  95,  98, 102, 105,
            108, 112, 116, 120, 124, 128, 131, 134, 137, 140, 143, 145, 148,
            151, 154, 156, 158, 160, 162, 165, 167, 170, 172, 175, 178, 180,
            182, 184, 186, 189, 191, 194, 198, 201, 203, 206, 208], dtype=int)

        grad_data = np.array(
            [-1., -1., -1., -1., -1., -1.,  1., -1., -1.,  1., -1., -1., -1.,
                1., -1., -1., -1.,  1.,  1., -1., -1.,  1.,  1., -1., -1.,  1.,
            -1., -1.,  1.,  1., -1.,  1.,  1., -1., -1., -1.,  1.,  1., -1.,
            -1., -1., -1., -1., -1.,  1.,  1.,  1., -1., -1., -1.,  1., -1.,
            -1.,  1.,  1.,  1., -1., -1.,  1., -1., -1., -1.,  1.,  1.,  1.,
            -1., -1., -1.,  1., -1., -1., -1.,  1.,  1.,  1.,  1., -1., -1.,
            -1.,  1.,  1., -1., -1.,  1.,  1.,  1.,  1., -1., -1.,  1.,  1.,
            -1., -1.,  1.,  1.,  1., -1., -1.,  1., -1., -1.,  1.,  1.,  1.,
                1., -1., -1.,  1.,  1., -1.,  1.,  1.,  1.,  1., -1.,  1.,  1.,
            -1., -1.,  1., -1., -1.,  1.,  1., -1.,  1.,  1., -1., -1.,  1.,
                1., -1., -1.,  1.,  1.,  1., -1.,  1.,  1.,  1., -1.,  1.,  1.,
            -1.,  1.,  1.,  1.,  1.,  1.,  1.])

        grad_indices = np.array(
            [ 2,  1,  0,  5,  4,  3,  0,  7,  6,  3, 10,  9,  8,  1, 13, 12, 11,
                8,  4, 15, 14, 11,  6, 17, 16,  9, 19, 18, 16, 12, 20, 18, 14, 66,
            22, 21,  2, 66, 25, 24, 23, 67, 27, 26, 21,  5, 67, 30, 29, 28, 23,
            68, 31, 26,  7, 68, 33, 32, 28, 69, 35, 34, 22, 10, 69, 38, 37, 36,
            24, 70, 40, 39, 34, 27, 13, 70, 43, 42, 41, 36, 29, 71, 44, 39, 31,
            15, 71, 46, 45, 41, 32, 72, 47, 35, 17, 72, 49, 48, 37, 73, 50, 47,
            40, 19, 73, 52, 51, 48, 42, 74, 50, 44, 20, 74, 53, 51, 45, 55, 54,
            25, 57, 56, 54, 30, 58, 56, 33, 60, 59, 55, 38, 62, 61, 59, 57, 43,
            63, 61, 58, 46, 64, 60, 49, 65, 64, 62, 52, 65, 63, 53],
            dtype=int)

        grad_indptr = np.array(
            [  0,   3,   7,  10,  14,  19,  23,  26,  30,  33,  37,  41,  46,
                51,  55,  59,  64,  69,  75,  81,  86,  91,  95,  99, 104, 109,
            113, 117, 120, 124, 127, 131, 136, 140, 143, 147, 150], dtype=int)


        div = sps.csc_array((div_data, div_indices, div_indptr))
        curl = sps.csc_array((curl_data, curl_indices, curl_indptr))
        grad = sps.csc_array((grad_data, grad_indices, grad_indptr))

        # fmt: on

        return div, curl, grad


if __name__ == "__main__":
    DifferentialsMDGUnitTest().test_2d_simplicial_1_fracture()
    unittest.main()
