import unittest

import numpy as np
import porepy as pp

import pygeon as pg


class InnerproductsUnitTest(unittest.TestCase):
    def test_2d_simplicial(self):
        N, dim = 2, 2
        sd = pp.StructuredTriangleGrid([N] * dim, [1] * dim)
        mdg = pg.as_mdg(sd)
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()
        mdg.initialize_data()

        M = pg.cell_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [8., 8., 8., 8., 8., 8., 8., 8.]
        )

        M_known_indices = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7]
        )

        M_known_indptr = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7, 8]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.face_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 0.33333333, -0.16666667,  0.33333333, -0.16666667,  0.33333333,
         0.33333333, -0.16666667, -0.16666667,  0.66666667, -0.16666667,
         0.33333333, -0.16666667,  0.33333333, -0.16666667,  0.66666667,
        -0.16666667,  0.33333333, -0.16666667,  0.33333333, -0.16666667,
         0.66666667, -0.16666667, -0.16666667,  0.66666667, -0.16666667,
         0.33333333, -0.16666667,  0.33333333, -0.16666667,  0.33333333,
        -0.16666667,  0.33333333]
        )

        M_known_indices = np.array(
        [ 0,  4,  1,  7,  2,  3,  6,  0,  4, 10,  5,  3,  6,  1,  7, 11,  8,
        14,  9,  4, 10, 13,  7, 11, 15, 12, 10, 13,  8, 14, 11, 15]
        )

        M_known_indptr = np.array(
        [ 0,  2,  4,  5,  7, 10, 11, 13, 16, 18, 19, 22, 25, 26, 28, 30, 32]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.ridge_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [0.04166667, 0.01041667, 0.01041667, 0.02083333, 0.01041667,
        0.0625    , 0.01041667, 0.02083333, 0.02083333, 0.01041667,
        0.02083333, 0.01041667, 0.01041667, 0.0625    , 0.02083333,
        0.01041667, 0.02083333, 0.02083333, 0.02083333, 0.02083333,
        0.125     , 0.02083333, 0.02083333, 0.02083333, 0.02083333,
        0.01041667, 0.02083333, 0.0625    , 0.01041667, 0.01041667,
        0.02083333, 0.01041667, 0.02083333, 0.02083333, 0.01041667,
        0.0625    , 0.01041667, 0.02083333, 0.01041667, 0.01041667,
        0.04166667]
        )

        M_known_indices = np.array(
        [0, 1, 3, 4, 0, 1, 2, 4, 5, 1, 2, 5, 0, 3, 4, 6, 7, 0, 1, 3, 4, 5,
        7, 8, 1, 2, 4, 5, 8, 3, 6, 7, 3, 4, 6, 7, 8, 4, 5, 7, 8]
        )

        M_known_indptr = np.array(
        [ 0,  4,  9, 12, 17, 24, 29, 32, 37, 41]
        )
        # fmt: on

        M.sum_duplicates()
        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.peak_mass(mdg)

        self.assertTrue(np.allclose(M.shape, (0, 0)))

        discr = pg.PwConstants("p0")
        M = pg.cell_mass(mdg, discr=discr, as_bmat=True, keyword="p0")[0, 0]

        # fmt: off
        M_known_data = np.array(
        [8., 8., 8., 8., 8., 8., 8., 8.]
        )

        M_known_indices = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7]
        )

        M_known_indptr = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7, 8]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

    def test_2d_cartesian(self):
        N, dim = 2, 2
        sd = pp.CartGrid([N] * dim, [1] * dim)
        mdg = pg.as_mdg(sd)
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()
        mdg.initialize_data()

        M = pg.lumped_cell_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [4., 4., 4., 4.]
        )

        M_known_indices = np.array(
        [0, 1, 2, 3]
        )

        M_known_indptr = np.array(
        [0, 1, 2, 3, 4]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.lumped_face_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [0.5, 1. , 0.5, 0.5, 1. , 0.5, 0.5, 0.5, 1. , 1. , 0.5, 0.5]
        )

        M_known_indices = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11]
        )

        M_known_indptr = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.lumped_ridge_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [0.08333333, 0.16666667, 0.08333333, 0.16666667, 0.33333333,
        0.16666667, 0.08333333, 0.16666667, 0.08333333]
        )

        M_known_indices = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7, 8]
        )

        M_known_indptr = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.lumped_peak_mass(mdg)

        self.assertTrue(np.allclose(M.shape, (0, 0)))

    def test_3d_simplicial(self):
        N, dim = 2, 3
        sd = pp.StructuredTetrahedralGrid([N] * dim, [1] * dim)
        mdg = pg.as_mdg(sd)
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()
        mdg.initialize_data()

        M = pg.cell_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48.,
        48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48.,
        48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48., 48.,
        48., 48., 48., 48., 48., 48., 48., 48., 48.]
        )

        M_known_indices = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
        )

        M_known_indptr = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.face_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 1.06666667,  0.26666667, -0.26666667, -0.06666667,  0.26666667,
         1.06666667,  0.26666667,  0.06666667, -0.26666667,  0.26666667,
         1.06666667, -0.06666667,  1.06666667,  0.26666667, -0.26666667,
        -0.06666667,  0.26666667,  1.06666667,  0.26666667,  0.06666667,
         1.33333333,  0.33333333,  0.33333333,  0.66666667, -0.06666667,
         0.06666667, -0.06666667,  1.33333333, -0.26666667,  0.26666667,
         0.73333333,  0.33333333, -0.26666667,  1.6       ,  0.4       ,
         0.33333333, -0.06666667, -0.26666667,  0.26666667,  2.66666667,
         0.06666667, -0.06666667, -0.06666667,  0.73333333,  0.33333333,
         0.06666667,  1.6       ,  0.4       ,  0.33333333,  0.26666667,
         1.33333333,  0.33333333,  0.33333333,  0.66666667,  0.26666667,
         0.4       ,  0.33333333,  1.6       ,  0.06666667,  0.33333333,
        -0.06666667,  0.4       ,  0.33333333,  1.6       , -0.26666667,
         0.33333333,  1.33333333,  0.33333333,  0.33333333,  0.66666667,
        -0.06666667,  0.06666667, -0.06666667,  1.33333333, -0.26666667,
         0.26666667,  0.73333333,  0.33333333, -0.26666667,  1.6       ,
         0.4       ,  0.33333333, -0.06666667,  1.6       ,  0.06666667,
        -0.06666667,  0.73333333,  0.33333333,  0.06666667,  1.6       ,
         0.4       ,  0.33333333,  0.26666667,  1.33333333,  0.33333333,
         0.33333333,  0.66666667,  0.26666667,  0.4       ,  0.33333333,
         1.6       ,  0.06666667,  0.33333333, -0.06666667,  0.4       ,
         0.33333333,  1.6       , -0.26666667,  0.33333333,  1.06666667,
         0.26666667, -0.26666667, -0.06666667,  0.66666667,  0.33333333,
         0.33333333,  0.26666667,  2.4       ,  0.26666667,  0.06666667,
        -0.26666667,  0.26666667,  1.06666667, -0.06666667,  0.73333333,
        -0.06666667,  0.06666667,  1.6       ,  1.06666667,  0.26666667,
        -0.26666667, -0.06666667,  0.66666667,  0.33333333,  0.33333333,
         0.26666667,  2.4       ,  0.26666667,  0.06666667,  1.33333333,
         0.33333333,  0.33333333,  0.66666667, -0.06666667,  0.06666667,
        -0.06666667,  1.33333333, -0.26666667,  0.26666667,  0.73333333,
         0.33333333, -0.26666667,  1.6       ,  0.4       ,  0.33333333,
        -0.06666667, -0.26666667,  0.26666667,  2.66666667,  0.06666667,
        -0.06666667, -0.06666667,  0.73333333,  0.33333333,  0.06666667,
         1.6       ,  0.4       ,  0.33333333,  0.26666667,  0.73333333,
         0.26666667, -0.26666667,  1.33333333, -0.06666667,  0.06666667,
        -0.06666667,  0.73333333, -0.06666667,  0.06666667, -0.06666667,
         2.66666667,  0.26666667, -0.26666667,  0.06666667,  0.26666667,
         2.4       ,  0.33333333,  0.33333333,  0.26666667,  0.66666667,
         0.26666667,  0.4       ,  0.33333333,  1.6       ,  0.06666667,
         0.33333333, -0.06666667,  0.4       ,  0.33333333,  1.6       ,
        -0.26666667,  0.33333333,  1.33333333,  0.33333333,  0.33333333,
         0.66666667, -0.06666667,  0.06666667, -0.06666667,  1.33333333,
        -0.26666667,  0.26666667,  0.73333333,  0.33333333, -0.26666667,
         1.6       ,  0.4       ,  0.33333333, -0.06666667,  1.6       ,
         0.06666667, -0.06666667,  0.73333333,  0.33333333,  0.06666667,
         1.6       ,  0.4       ,  0.33333333,  0.26666667,  0.73333333,
         0.26666667, -0.26666667,  1.33333333, -0.06666667,  0.06666667,
        -0.06666667, -0.06666667,  1.06666667,  0.26666667, -0.26666667,
         0.06666667,  0.26666667,  2.4       ,  0.33333333,  0.33333333,
         0.26666667,  0.66666667,  0.26666667,  0.4       ,  0.33333333,
         1.6       ,  0.06666667,  0.33333333, -0.06666667,  0.4       ,
         0.33333333,  1.6       , -0.26666667,  0.33333333,  0.66666667,
         0.33333333,  0.33333333,  1.33333333,  0.73333333, -0.06666667,
         0.06666667,  1.6       ,  0.66666667,  0.33333333,  0.33333333,
         1.33333333,  0.73333333,  0.26666667, -0.26666667,  1.33333333,
        -0.06666667,  0.06666667, -0.06666667,  0.73333333, -0.06666667,
         0.06666667, -0.06666667,  2.66666667,  0.26666667, -0.26666667,
         0.06666667,  0.26666667,  1.06666667,  0.26666667,  0.73333333,
         0.26666667, -0.26666667,  1.33333333, -0.06666667,  0.06666667,
        -0.06666667, -0.06666667,  1.06666667,  0.26666667, -0.26666667,
         0.06666667,  0.26666667,  1.06666667,  0.26666667,  0.66666667,
         0.33333333,  0.33333333,  2.4       ,  0.26666667, -0.26666667,
        -0.06666667,  0.26666667,  1.06666667,  0.26666667,  0.06666667,
        -0.26666667,  0.26666667,  1.06666667, -0.06666667,  0.66666667,
         0.33333333,  0.33333333,  2.4       ,  0.26666667, -0.26666667,
        -0.06666667,  0.26666667,  1.06666667,  0.26666667,  0.06666667,
        -0.06666667, -0.26666667,  0.26666667,  2.4       ,  0.33333333,
         0.33333333,  0.66666667, -0.06666667,  0.06666667, -0.06666667,
         1.33333333, -0.26666667,  0.26666667,  0.73333333,  0.33333333,
        -0.26666667,  1.6       ,  0.4       ,  0.33333333, -0.06666667,
        -0.26666667,  0.26666667,  2.66666667,  0.06666667, -0.06666667,
        -0.06666667,  0.73333333,  0.33333333,  0.06666667,  1.6       ,
         0.4       ,  0.33333333,  0.26666667,  1.33333333,  0.33333333,
         0.33333333,  0.66666667,  0.26666667,  0.4       ,  0.33333333,
         1.6       ,  0.06666667,  0.33333333, -0.06666667,  0.4       ,
         0.33333333,  1.6       , -0.26666667,  0.33333333, -0.06666667,
        -0.26666667,  0.26666667,  2.4       ,  0.33333333,  0.33333333,
         0.66666667, -0.06666667,  0.06666667, -0.06666667,  1.33333333,
        -0.26666667,  0.26666667,  0.73333333,  0.33333333, -0.26666667,
         1.6       ,  0.4       ,  0.33333333, -0.06666667,  1.6       ,
         0.06666667, -0.06666667,  0.73333333,  0.33333333,  0.06666667,
         1.6       ,  0.4       ,  0.33333333,  0.26666667,  1.33333333,
         0.33333333,  0.33333333,  0.66666667,  0.26666667,  0.4       ,
         0.33333333,  1.6       ,  0.06666667,  0.33333333, -0.06666667,
         0.4       ,  0.33333333,  1.6       , -0.26666667,  0.33333333,
         0.66666667,  0.33333333,  0.33333333,  2.4       ,  0.26666667,
        -0.26666667, -0.06666667,  0.66666667,  0.33333333,  0.33333333,
         0.26666667,  2.4       ,  0.26666667,  0.06666667, -0.26666667,
         0.26666667,  1.06666667, -0.06666667,  0.73333333, -0.06666667,
         0.06666667,  1.6       ,  0.66666667,  0.33333333,  0.33333333,
         2.4       ,  0.26666667, -0.26666667, -0.06666667,  0.66666667,
         0.33333333,  0.33333333,  0.26666667,  2.4       ,  0.26666667,
         0.06666667, -0.06666667, -0.26666667,  0.26666667,  2.4       ,
         0.33333333,  0.33333333,  0.66666667, -0.06666667,  0.06666667,
        -0.06666667,  1.33333333, -0.26666667,  0.26666667,  0.73333333,
         0.33333333, -0.26666667,  1.6       ,  0.4       ,  0.33333333,
        -0.06666667, -0.26666667,  0.26666667,  2.66666667,  0.06666667,
        -0.06666667, -0.06666667,  0.73333333,  0.33333333,  0.06666667,
         1.6       ,  0.4       ,  0.33333333,  0.26666667,  0.73333333,
         0.26666667, -0.26666667,  1.33333333, -0.06666667,  0.06666667,
        -0.06666667,  0.73333333, -0.06666667,  0.06666667, -0.06666667,
         2.66666667,  0.26666667, -0.26666667,  0.06666667,  0.26666667,
         2.4       ,  0.33333333,  0.33333333,  0.26666667,  0.66666667,
         0.26666667,  0.4       ,  0.33333333,  1.6       ,  0.06666667,
         0.33333333, -0.06666667,  0.4       ,  0.33333333,  1.6       ,
        -0.26666667,  0.33333333, -0.06666667, -0.26666667,  0.26666667,
         2.4       ,  0.33333333,  0.33333333,  0.66666667, -0.06666667,
         0.06666667, -0.06666667,  1.33333333, -0.26666667,  0.26666667,
         0.73333333,  0.33333333, -0.26666667,  1.6       ,  0.4       ,
         0.33333333, -0.06666667,  1.6       ,  0.06666667, -0.06666667,
         0.73333333,  0.33333333,  0.06666667,  1.6       ,  0.4       ,
         0.33333333,  0.26666667,  0.73333333,  0.26666667, -0.26666667,
         1.33333333, -0.06666667,  0.06666667, -0.06666667, -0.06666667,
         1.06666667,  0.26666667, -0.26666667,  0.06666667,  0.26666667,
         2.4       ,  0.33333333,  0.33333333,  0.26666667,  0.66666667,
         0.26666667,  0.4       ,  0.33333333,  1.6       ,  0.06666667,
         0.33333333, -0.06666667,  0.4       ,  0.33333333,  1.6       ,
        -0.26666667,  0.33333333,  0.66666667,  0.33333333,  0.33333333,
         1.33333333,  0.73333333, -0.06666667,  0.06666667,  1.6       ,
         0.66666667,  0.33333333,  0.33333333,  1.33333333,  0.73333333,
         0.26666667, -0.26666667,  1.33333333, -0.06666667,  0.06666667,
        -0.06666667,  0.73333333, -0.06666667,  0.06666667, -0.06666667,
         2.66666667,  0.26666667, -0.26666667,  0.06666667,  0.26666667,
         1.06666667,  0.26666667,  0.73333333,  0.26666667, -0.26666667,
         1.33333333, -0.06666667,  0.06666667, -0.06666667, -0.06666667,
         1.06666667,  0.26666667, -0.26666667,  0.06666667,  0.26666667,
         1.06666667,  0.26666667,  0.66666667,  0.33333333,  0.33333333,
         1.33333333,  0.66666667,  0.33333333,  0.33333333,  1.33333333,
        -0.06666667, -0.26666667,  0.26666667,  1.06666667, -0.06666667,
        -0.26666667,  0.26666667,  1.06666667,  0.66666667,  0.33333333,
         0.33333333,  1.33333333,  0.66666667,  0.33333333,  0.33333333,
         1.33333333, -0.06666667, -0.26666667,  0.26666667,  1.06666667,
        -0.06666667, -0.26666667,  0.26666667,  1.06666667]
        )

        M_known_indices = np.array(
        [  0,   1,   2,   6,   0,   1,   2,   6,   0,   1,   2,   6,   3,
          4,   8,  14,   3,   4,   8,  14,   5,   7,   9,  22,   0,   1,
          2,   6,   7,  11,  24,   5,   6,   7,  11,  22,  24,   3,   4,
          8,   9,  12,  14,  32,   5,   8,   9,  12,  22,  32,  10,  11,
         12,  56,   6,   7,  10,  11,  24,  56,   8,   9,  10,  12,  32,
         56,  13,  15,  17,  26,   3,   4,   8,  14,  15,  19,  33,  13,
         14,  15,  19,  26,  33,  16,  17,  20,  42,  13,  16,  17,  20,
         26,  42,  18,  19,  20,  59,  14,  15,  18,  19,  33,  59,  16,
         17,  18,  20,  42,  59,  21,  22,  23,  28,   5,   7,   9,  21,
         22,  23,  28,  21,  22,  23,  28,   6,   7,  11,  24,  25,  26,
         30,  38,  13,  15,  17,  25,  26,  30,  38,  27,  29,  31,  47,
         21,  22,  23,  28,  29,  35,  48,  27,  28,  29,  35,  47,  48,
         25,  26,  30,  31,  36,  38,  50,  27,  30,  31,  36,  47,  50,
          8,   9,  12,  32,  33,  34,  61,  14,  15,  19,  32,  33,  34,
         61,  32,  33,  34,  35,  36,  61,  77,  28,  29,  34,  35,  48,
         77,  30,  31,  34,  36,  50,  77,  37,  39,  41,  49,  25,  26,
         30,  38,  39,  45,  51,  37,  38,  39,  45,  49,  51,  40,  41,
         46,  53,  37,  40,  41,  46,  49,  53,  16,  17,  20,  42,  43,
         44,  69,  42,  43,  44,  69,  42,  43,  44,  45,  46,  69,  81,
         38,  39,  44,  45,  51,  81,  40,  41,  44,  46,  53,  81,  27,
         29,  31,  47,  28,  29,  35,  48,  37,  39,  41,  49,  30,  31,
         36,  50,  51,  52,  83,  38,  39,  45,  50,  51,  52,  83,  50,
         51,  52,  83,  40,  41,  46,  53,  54,  55,  93,  53,  54,  55,
         93,  53,  54,  55,  93,  10,  11,  12,  56,  57,  58,  62,  56,
         57,  58,  62,  56,  57,  58,  62,  18,  19,  20,  59,  60,  64,
         70,  59,  60,  64,  70,  32,  33,  34,  61,  63,  65,  78,  56,
         57,  58,  62,  63,  67,  80,  61,  62,  63,  67,  78,  80,  59,
         60,  64,  65,  68,  70,  88,  61,  64,  65,  68,  78,  88,  66,
         67,  68, 112,  62,  63,  66,  67,  80, 112,  64,  65,  66,  68,
         88, 112,  42,  43,  44,  69,  71,  73,  82,  59,  60,  64,  70,
         71,  75,  89,  69,  70,  71,  75,  82,  89,  72,  73,  76,  98,
         69,  72,  73,  76,  82,  98,  74,  75,  76, 113,  70,  71,  74,
         75,  89, 113,  72,  73,  74,  76,  98, 113,  34,  35,  36,  77,
         78,  79,  84,  61,  63,  65,  77,  78,  79,  84,  77,  78,  79,
         84,  62,  63,  67,  80,  44,  45,  46,  81,  82,  86,  94,  69,
         71,  73,  81,  82,  86,  94,  50,  51,  52,  83,  85,  87, 103,
         77,  78,  79,  84,  85,  91, 104,  83,  84,  85,  91, 103, 104,
         81,  82,  86,  87,  92,  94, 106,  83,  86,  87,  92, 103, 106,
         64,  65,  68,  88,  89,  90, 114,  70,  71,  75,  88,  89,  90,
        114,  88,  89,  90,  91,  92, 114, 116,  84,  85,  90,  91, 104,
        116,  86,  87,  90,  92, 106, 116,  53,  54,  55,  93,  95,  97,
        105,  81,  82,  86,  94,  95, 101, 107,  93,  94,  95, 101, 105,
        107,  96,  97, 102, 109,  93,  96,  97, 102, 105, 109,  72,  73,
         76,  98,  99, 100, 115,  98,  99, 100, 115,  98,  99, 100, 101,
        102, 115, 117,  94,  95, 100, 101, 107, 117,  96,  97, 100, 102,
        109, 117,  83,  85,  87, 103,  84,  85,  91, 104,  93,  95,  97,
        105,  86,  87,  92, 106, 107, 108, 118,  94,  95, 101, 106, 107,
        108, 118, 106, 107, 108, 118,  96,  97, 102, 109, 110, 111, 119,
        109, 110, 111, 119, 109, 110, 111, 119,  66,  67,  68, 112,  74,
         75,  76, 113,  88,  89,  90, 114,  98,  99, 100, 115,  90,  91,
         92, 116, 100, 101, 102, 117, 106, 107, 108, 118, 109, 110, 111,
        119]
        )

        M_known_indptr = np.array(
        [  0,   4,   8,  12,  16,  20,  24,  31,  37,  44,  50,  54,  60,
         66,  70,  77,  83,  87,  93,  97, 103, 109, 113, 120, 124, 128,
        132, 139, 143, 150, 156, 163, 169, 176, 183, 190, 196, 202, 206,
        213, 219, 223, 229, 236, 240, 247, 253, 259, 263, 267, 271, 278,
        285, 289, 296, 300, 304, 311, 315, 319, 326, 330, 337, 344, 350,
        357, 363, 367, 373, 379, 386, 393, 399, 403, 409, 413, 419, 425,
        432, 439, 443, 447, 454, 461, 468, 475, 481, 488, 494, 501, 508,
        515, 521, 527, 534, 541, 547, 551, 557, 564, 568, 575, 581, 587,
        591, 595, 599, 606, 613, 617, 624, 628, 632, 636, 640, 644, 648,
        652, 656, 660, 664]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.ridge_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 0.04166667,  0.02083333,  0.02083333,  0.02083333,  0.04166667,
         0.02083333,  0.02083333,  0.02083333,  0.04166667,  0.04166667,
         0.02083333,  0.02083333,  0.075     ,  0.025     , -0.01666667,
        -0.00416667, -0.00416667, -0.04166667, -0.00416667, -0.02083333,
         0.02083333,  0.13333333,  0.05833333,  0.01666667,  0.01666667,
         0.00416667,  0.00416667, -0.04166667, -0.02083333,  0.025     ,
         0.075     , -0.01666667,  0.00416667, -0.02083333, -0.00416667,
        -0.04166667, -0.00416667,  0.02083333,  0.05833333,  0.13333333,
         0.01666667, -0.00416667, -0.02083333,  0.01666667,  0.00416667,
        -0.04166667, -0.01666667,  0.01666667, -0.01666667,  0.01666667,
         0.08333333,  0.00833333,  0.01666667, -0.01666667,  0.00833333,
         0.01666667, -0.01666667,  0.075     ,  0.025     , -0.01666667,
        -0.00416667, -0.00416667, -0.04166667, -0.00416667, -0.02083333,
         0.09166667,  0.0375    ,  0.01666667,  0.01666667,  0.00416667,
         0.00416667, -0.04166667, -0.02083333,  0.025     ,  0.075     ,
        -0.01666667,  0.00416667, -0.02083333, -0.00416667, -0.04166667,
        -0.00416667,  0.0375    ,  0.09166667,  0.01666667, -0.00416667,
        -0.02083333,  0.01666667,  0.00416667, -0.04166667, -0.01666667,
         0.01666667, -0.01666667,  0.01666667,  0.08333333,  0.00833333,
         0.01666667, -0.01666667,  0.00833333,  0.01666667, -0.01666667,
        -0.00416667,  0.01666667,  0.00833333,  0.08333333,  0.02083333,
         0.0375    , -0.00416667,  0.02083333,  0.04166667,  0.02083333,
        -0.00416667,  0.00416667,  0.04166667, -0.00416667,  0.00416667,
        -0.04166667,  0.00416667, -0.02083333,  0.01666667,  0.0375    ,
         0.02083333, -0.00416667,  0.13333333,  0.0375    , -0.00416667,
         0.01666667,  0.00833333,  0.08333333,  0.02083333,  0.0375    ,
        -0.00416667,  0.075     ,  0.025     , -0.01666667, -0.00416667,
        -0.00416667, -0.04166667, -0.00416667, -0.02083333,  0.02083333,
         0.13333333,  0.05833333,  0.01666667,  0.01666667,  0.00416667,
         0.00416667, -0.04166667, -0.02083333,  0.00416667, -0.00416667,
        -0.00416667,  0.00416667,  0.08333333,  0.00416667, -0.00416667,
        -0.00416667,  0.00416667, -0.00416667, -0.04166667, -0.02083333,
        -0.01666667, -0.00416667,  0.025     ,  0.00416667,  0.15      ,
        -0.01666667,  0.00416667, -0.02083333,  0.025     , -0.00416667,
        -0.04166667, -0.00416667, -0.04166667,  0.00416667, -0.02083333,
         0.01666667,  0.0375    ,  0.05833333, -0.00416667,  0.26666667,
         0.01666667, -0.00416667, -0.02083333,  0.05833333,  0.0375    ,
         0.00416667, -0.04166667, -0.01666667,  0.01666667, -0.01666667,
         0.01666667,  0.08333333,  0.00833333,  0.01666667, -0.01666667,
         0.00833333,  0.01666667, -0.01666667,  0.075     ,  0.025     ,
        -0.01666667, -0.00416667, -0.00416667, -0.04166667, -0.00416667,
        -0.02083333,  0.09166667,  0.0375    ,  0.01666667,  0.01666667,
         0.00416667,  0.00416667, -0.04166667, -0.02083333,  0.00416667,
        -0.00416667,  0.04166667,  0.00416667, -0.00416667, -0.00416667,
        -0.04166667, -0.02083333, -0.01666667, -0.00416667,  0.025     ,
         0.00416667,  0.15      , -0.01666667,  0.00416667, -0.02083333,
         0.025     , -0.00416667, -0.04166667, -0.00416667,  0.0375    ,
         0.13333333,  0.01666667, -0.00416667, -0.02083333,  0.02083333,
         0.0375    ,  0.00416667, -0.04166667, -0.01666667,  0.01666667,
        -0.01666667,  0.01666667,  0.08333333,  0.00833333,  0.01666667,
        -0.01666667,  0.00833333,  0.01666667, -0.01666667, -0.00416667,
         0.01666667,  0.00833333,  0.04166667,  0.01666667, -0.00416667,
        -0.00416667,  0.00416667,  0.04166667, -0.00416667,  0.00416667,
        -0.04166667,  0.00416667, -0.02083333,  0.01666667,  0.01666667,
        -0.00416667,  0.09166667,  0.0375    , -0.00416667,  0.01666667,
         0.00833333,  0.04166667,  0.01666667, -0.00416667,  0.00416667,
        -0.00416667, -0.00416667,  0.00416667,  0.08333333,  0.00416667,
        -0.00416667, -0.00416667,  0.00416667, -0.00416667, -0.04166667,
        -0.02083333, -0.01666667, -0.00416667,  0.00416667,  0.075     ,
         0.025     , -0.04166667,  0.00416667, -0.02083333,  0.01666667,
         0.01666667, -0.00416667,  0.13333333,  0.05833333,  0.02083333,
         0.00416667, -0.00416667,  0.04166667,  0.00416667, -0.00416667,
        -0.00416667, -0.04166667, -0.02083333, -0.01666667, -0.00416667,
         0.00416667,  0.075     ,  0.025     ,  0.04166667,  0.02083333,
         0.02083333, -0.00416667,  0.01666667,  0.00833333,  0.08333333,
         0.0375    ,  0.02083333, -0.00416667, -0.02083333, -0.04166667,
         0.00416667,  0.01666667,  0.00416667,  0.0375    ,  0.0375    ,
         0.13333333,  0.02083333,  0.02083333,  0.02083333,  0.04166667,
        -0.00416667,  0.01666667,  0.00833333,  0.08333333,  0.0375    ,
         0.02083333, -0.00416667, -0.02083333, -0.00416667, -0.04166667,
        -0.01666667, -0.00416667,  0.025     , -0.00416667,  0.15      ,
         0.025     , -0.01666667, -0.00416667, -0.00416667, -0.04166667,
        -0.00416667, -0.02083333, -0.02083333, -0.04166667,  0.00416667,
         0.01666667,  0.00416667,  0.05833333,  0.0375    ,  0.26666667,
         0.05833333,  0.01666667,  0.0375    ,  0.00416667,  0.00416667,
        -0.04166667, -0.02083333,  0.025     ,  0.075     , -0.01666667,
         0.00416667, -0.02083333, -0.00416667, -0.04166667, -0.00416667,
         0.02083333,  0.05833333,  0.13333333,  0.01666667, -0.00416667,
        -0.02083333,  0.01666667,  0.00416667, -0.04166667, -0.01666667,
         0.01666667, -0.01666667,  0.01666667,  0.08333333,  0.00833333,
         0.01666667, -0.01666667,  0.00833333,  0.01666667, -0.01666667,
        -0.02083333, -0.00416667, -0.04166667, -0.01666667, -0.00416667,
         0.025     , -0.00416667,  0.15      ,  0.025     , -0.01666667,
        -0.00416667, -0.00416667, -0.04166667, -0.00416667, -0.02083333,
         0.02083333,  0.13333333,  0.0375    ,  0.01666667,  0.0375    ,
         0.00416667,  0.00416667, -0.04166667, -0.02083333,  0.025     ,
         0.075     , -0.01666667,  0.00416667, -0.02083333, -0.00416667,
        -0.04166667, -0.00416667,  0.0375    ,  0.09166667,  0.01666667,
        -0.00416667, -0.02083333,  0.01666667,  0.00416667, -0.04166667,
        -0.01666667,  0.01666667, -0.01666667,  0.01666667,  0.08333333,
         0.00833333,  0.01666667, -0.01666667,  0.00833333,  0.01666667,
        -0.01666667, -0.00416667,  0.0375    ,  0.00833333, -0.00416667,
         0.0375    ,  0.00833333,  0.16666667,  0.0375    ,  0.0375    ,
        -0.00416667, -0.00416667, -0.02083333, -0.04166667,  0.00416667,
         0.01666667,  0.00416667,  0.0375    ,  0.0375    ,  0.13333333,
         0.02083333, -0.00416667,  0.00416667,  0.04166667, -0.00416667,
         0.00416667, -0.04166667,  0.00416667, -0.02083333,  0.01666667,
         0.0375    ,  0.02083333, -0.00416667,  0.13333333,  0.0375    ,
        -0.00416667,  0.0375    ,  0.00833333, -0.00416667,  0.0375    ,
         0.00833333,  0.16666667,  0.0375    ,  0.0375    , -0.00416667,
        -0.00416667, -0.02083333, -0.00416667, -0.04166667, -0.01666667,
        -0.00416667,  0.025     , -0.00416667,  0.15      ,  0.025     ,
        -0.01666667, -0.00416667, -0.00416667, -0.04166667, -0.00416667,
        -0.02083333, -0.02083333, -0.04166667,  0.00416667,  0.01666667,
         0.00416667,  0.05833333,  0.0375    ,  0.26666667,  0.05833333,
         0.01666667,  0.0375    ,  0.00416667,  0.00416667, -0.04166667,
        -0.02083333,  0.00416667, -0.00416667, -0.00416667,  0.00416667,
         0.08333333,  0.00416667, -0.00416667, -0.00416667,  0.00416667,
        -0.00416667, -0.04166667, -0.02083333, -0.01666667, -0.00416667,
         0.025     ,  0.00416667,  0.15      , -0.01666667,  0.00416667,
        -0.02083333,  0.025     , -0.00416667, -0.04166667, -0.00416667,
        -0.04166667,  0.00416667, -0.02083333,  0.01666667,  0.0375    ,
         0.05833333, -0.00416667,  0.26666667,  0.01666667, -0.00416667,
        -0.02083333,  0.05833333,  0.0375    ,  0.00416667, -0.04166667,
        -0.01666667,  0.01666667, -0.01666667,  0.01666667,  0.08333333,
         0.00833333,  0.01666667, -0.01666667,  0.00833333,  0.01666667,
        -0.01666667, -0.02083333, -0.00416667, -0.04166667, -0.01666667,
        -0.00416667,  0.025     , -0.00416667,  0.15      ,  0.025     ,
        -0.01666667, -0.00416667, -0.00416667, -0.04166667, -0.00416667,
        -0.02083333,  0.02083333,  0.13333333,  0.0375    ,  0.01666667,
         0.0375    ,  0.00416667,  0.00416667, -0.04166667, -0.02083333,
         0.00416667, -0.00416667,  0.04166667,  0.00416667, -0.00416667,
        -0.00416667, -0.04166667, -0.02083333, -0.01666667, -0.00416667,
         0.025     ,  0.00416667,  0.15      , -0.01666667,  0.00416667,
        -0.02083333,  0.025     , -0.00416667, -0.04166667, -0.00416667,
         0.0375    ,  0.13333333,  0.01666667, -0.00416667, -0.02083333,
         0.02083333,  0.0375    ,  0.00416667, -0.04166667, -0.01666667,
         0.01666667, -0.01666667,  0.01666667,  0.08333333,  0.00833333,
         0.01666667, -0.01666667,  0.00833333,  0.01666667, -0.01666667,
         0.02083333, -0.00416667,  0.0375    ,  0.00833333,  0.08333333,
         0.01666667, -0.00416667, -0.00416667,  0.00416667,  0.04166667,
        -0.00416667,  0.00416667, -0.04166667,  0.00416667, -0.02083333,
         0.01666667,  0.01666667, -0.00416667,  0.09166667,  0.0375    ,
         0.02083333, -0.00416667,  0.0375    ,  0.00833333,  0.08333333,
         0.01666667, -0.00416667,  0.00416667, -0.00416667, -0.00416667,
         0.00416667,  0.08333333,  0.00416667, -0.00416667, -0.00416667,
         0.00416667, -0.00416667, -0.04166667, -0.02083333, -0.01666667,
        -0.00416667,  0.00416667,  0.075     ,  0.025     , -0.04166667,
         0.00416667, -0.02083333,  0.01666667,  0.01666667, -0.00416667,
         0.13333333,  0.05833333,  0.02083333,  0.00416667, -0.00416667,
         0.04166667,  0.00416667, -0.00416667, -0.00416667, -0.04166667,
        -0.02083333, -0.01666667, -0.00416667,  0.00416667,  0.075     ,
         0.025     ,  0.04166667,  0.02083333,  0.02083333, -0.00416667,
         0.01666667,  0.00833333,  0.04166667,  0.01666667, -0.00416667,
        -0.02083333, -0.04166667,  0.00416667,  0.01666667,  0.00416667,
         0.0375    ,  0.01666667,  0.09166667, -0.00416667,  0.01666667,
         0.00833333,  0.04166667,  0.01666667, -0.00416667, -0.02083333,
        -0.00416667, -0.04166667, -0.01666667, -0.00416667,  0.025     ,
        -0.00416667,  0.075     , -0.02083333, -0.04166667,  0.00416667,
         0.01666667,  0.00416667,  0.05833333,  0.01666667,  0.13333333,
         0.02083333, -0.02083333, -0.00416667, -0.04166667, -0.01666667,
        -0.00416667,  0.025     , -0.00416667,  0.075     ,  0.02083333,
         0.04166667,  0.02083333, -0.00416667,  0.0375    ,  0.00833333,
         0.02083333,  0.08333333,  0.01666667, -0.00416667, -0.02083333,
        -0.04166667,  0.00416667,  0.01666667,  0.00416667,  0.0375    ,
         0.01666667,  0.09166667, -0.00416667,  0.0375    ,  0.00833333,
         0.02083333,  0.08333333,  0.01666667, -0.00416667, -0.02083333,
        -0.00416667, -0.04166667, -0.01666667, -0.00416667,  0.025     ,
        -0.00416667,  0.075     , -0.02083333, -0.04166667,  0.00416667,
         0.01666667,  0.00416667,  0.05833333,  0.01666667,  0.13333333,
         0.02083333, -0.02083333, -0.00416667, -0.04166667, -0.01666667,
        -0.00416667,  0.025     , -0.00416667,  0.075     ,  0.02083333,
         0.04166667,  0.02083333,  0.02083333,  0.02083333,  0.04166667,
         0.02083333,  0.02083333,  0.04166667]
        )

        M_known_indices = np.array(
        [ 0,  1,  2,  0,  1,  2,  0,  1,  2,  3,  5,  7,  4,  6,  8, 14, 16,
        17, 22, 42,  3,  5,  7,  8, 14, 17, 21, 22, 45,  4,  6,  8, 16, 17,
        41, 42, 45,  3,  5,  7,  8, 21, 22, 41, 42, 45,  4,  5,  6,  7,  8,
        14, 17, 22, 41, 42, 45,  9, 11, 13, 18, 21, 23, 28, 46, 10, 12, 13,
        18, 23, 27, 28, 50,  9, 11, 13, 21, 23, 44, 46, 50, 10, 12, 13, 27,
        28, 44, 46, 50,  9, 10, 11, 12, 13, 18, 23, 28, 44, 46, 50,  4,  5,
         8, 14, 15, 17, 22, 14, 15, 17,  4,  6, 16, 17, 42,  4,  5,  6,  8,
        14, 15, 16, 17, 42,  9, 10, 13, 18, 20, 23, 28, 19, 22, 24, 31, 32,
        33, 36, 56, 18, 20, 23, 24, 31, 33, 35, 36, 60,  5,  7,  9, 11, 21,
        22, 23, 45, 46,  4,  5,  7,  8, 14, 19, 21, 22, 24, 32, 33, 45, 55,
        56, 60,  9, 10, 11, 13, 18, 20, 21, 23, 24, 35, 36, 46, 55, 56, 60,
        19, 20, 22, 23, 24, 31, 33, 36, 55, 56, 60, 25, 28, 30, 34, 35, 37,
        39, 61, 26, 29, 30, 34, 37, 38, 39, 66, 10, 12, 27, 28, 50,  9, 10,
        12, 13, 18, 25, 27, 28, 30, 35, 37, 50, 59, 61, 66, 26, 29, 30, 38,
        39, 51, 59, 61, 66, 25, 26, 28, 29, 30, 34, 37, 39, 59, 61, 66, 19,
        20, 24, 31, 33, 36, 19, 22, 32, 33, 56, 19, 20, 22, 24, 31, 32, 33,
        56, 25, 26, 30, 34, 37, 39, 20, 23, 25, 28, 35, 36, 37, 60, 61, 19,
        20, 23, 24, 31, 35, 36, 60, 25, 26, 28, 30, 34, 35, 37, 61, 72, 26,
        29, 38, 39, 66, 25, 26, 29, 30, 34, 38, 39, 66, 40, 67, 75,  6,  7,
         8, 41, 42, 43, 45,  4,  6,  7,  8, 16, 17, 41, 42, 43, 41, 42, 43,
        11, 12, 13, 44, 46, 48, 50,  5,  6,  7,  8, 21, 22, 41, 45, 47, 49,
        55, 57, 58, 63, 83,  9, 11, 12, 13, 21, 23, 44, 46, 48, 49, 55, 58,
        62, 63, 85, 45, 47, 49, 57, 58, 82, 83, 85, 44, 46, 48, 49, 62, 63,
        82, 83, 85, 45, 46, 47, 48, 49, 55, 58, 63, 82, 83, 85, 10, 11, 12,
        13, 27, 28, 44, 50, 52, 54, 59, 62, 64, 69, 86, 29, 51, 53, 54, 59,
        64, 68, 69, 87, 50, 52, 54, 62, 64, 84, 86, 87, 51, 53, 54, 68, 69,
        84, 86, 87, 50, 51, 52, 53, 54, 59, 64, 69, 84, 86, 87, 22, 23, 24,
        45, 46, 49, 55, 56, 58, 60, 63, 19, 22, 23, 24, 32, 33, 55, 56, 58,
        45, 47, 57, 58, 83, 45, 46, 47, 49, 55, 56, 57, 58, 83, 28, 29, 30,
        50, 51, 54, 59, 61, 64, 66, 69, 20, 22, 23, 24, 35, 36, 55, 60, 63,
        65, 72, 73, 74, 77, 90, 25, 28, 29, 30, 35, 37, 59, 61, 64, 65, 72,
        74, 76, 77, 92, 46, 48, 50, 52, 62, 63, 64, 85, 86, 45, 46, 48, 49,
        55, 60, 62, 63, 65, 73, 74, 85, 89, 90, 92, 50, 51, 52, 54, 59, 61,
        62, 64, 65, 76, 77, 86, 89, 90, 92, 60, 61, 63, 64, 65, 72, 74, 77,
        89, 90, 92, 26, 28, 29, 30, 38, 39, 59, 66, 69, 71, 75, 76, 78, 80,
        93, 40, 67, 70, 71, 75, 78, 79, 80, 94, 51, 53, 68, 69, 87, 50, 51,
        53, 54, 59, 66, 68, 69, 71, 76, 78, 87, 91, 93, 94, 67, 70, 71, 79,
        80, 88, 91, 93, 94, 66, 67, 69, 70, 71, 75, 78, 80, 91, 93, 94, 37,
        60, 61, 65, 72, 74, 77, 60, 63, 73, 74, 90, 60, 61, 63, 65, 72, 73,
        74, 90, 40, 66, 67, 71, 75, 78, 80, 61, 64, 66, 69, 76, 77, 78, 92,
        93, 60, 61, 64, 65, 72, 76, 77, 92, 66, 67, 69, 71, 75, 76, 78, 93,
        96, 67, 70, 79, 80, 94, 66, 67, 70, 71, 75, 79, 80, 94, 81, 95, 97,
        47, 48, 49, 82, 83, 85, 45, 47, 48, 49, 57, 58, 82, 83, 52, 53, 54,
        84, 86, 87, 46, 47, 48, 49, 62, 63, 82, 85, 50, 52, 53, 54, 62, 64,
        84, 86, 89, 51, 52, 53, 54, 68, 69, 84, 87, 70, 88, 91, 63, 64, 65,
        86, 89, 90, 92, 60, 63, 64, 65, 73, 74, 89, 90, 69, 70, 71, 88, 91,
        93, 94, 61, 63, 64, 65, 76, 77, 89, 92, 66, 69, 70, 71, 76, 78, 91,
        93, 96, 67, 69, 70, 71, 79, 80, 91, 94, 81, 95, 97, 78, 93, 96, 81,
        95, 97]
        )

        M_known_indptr = np.array(
        [  0,   3,   6,   9,  12,  20,  29,  37,  46,  57,  65,  73,  81,
         89, 100, 107, 110, 115, 124, 131, 139, 148, 157, 172, 187, 198,
        206, 214, 219, 234, 243, 254, 260, 265, 273, 279, 288, 296, 305,
        310, 318, 321, 328, 337, 340, 347, 362, 377, 385, 394, 405, 420,
        429, 437, 445, 456, 467, 476, 481, 490, 501, 516, 531, 540, 555,
        570, 581, 596, 605, 610, 625, 634, 645, 652, 657, 665, 672, 681,
        689, 698, 703, 711, 714, 720, 728, 734, 742, 751, 759, 762, 769,
        777, 784, 792, 801, 809, 812, 815, 818]
        )
        # fmt: on

        M.sum_duplicates()
        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.peak_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [0.00208333, 0.00104167, 0.00104167, 0.00104167, 0.00104167,
        0.0125    , 0.00104167, 0.003125  , 0.003125  , 0.003125  ,
        0.003125  , 0.00416667, 0.00104167, 0.01041667, 0.003125  ,
        0.00208333, 0.003125  , 0.00208333, 0.00416667, 0.00104167,
        0.003125  , 0.00833333, 0.00208333, 0.00104167, 0.00208333,
        0.003125  , 0.003125  , 0.003125  , 0.00208333, 0.025     ,
        0.00208333, 0.003125  , 0.003125  , 0.00416667, 0.00625   ,
        0.00625   , 0.00416667, 0.00208333, 0.00208333, 0.01666667,
        0.003125  , 0.00208333, 0.00208333, 0.00625   , 0.003125  ,
        0.00416667, 0.00104167, 0.003125  , 0.00625   , 0.00104167,
        0.00208333, 0.00208333, 0.003125  , 0.003125  , 0.00104167,
        0.0125    , 0.00104167, 0.00416667, 0.003125  , 0.003125  ,
        0.00208333, 0.00104167, 0.00625   , 0.00208333, 0.003125  ,
        0.00104167, 0.00104167, 0.003125  , 0.00208333, 0.00833333,
        0.00208333, 0.003125  , 0.00104167, 0.003125  , 0.003125  ,
        0.00416667, 0.00208333, 0.025     , 0.00208333, 0.00625   ,
        0.00625   , 0.003125  , 0.003125  , 0.00416667, 0.00208333,
        0.00208333, 0.00208333, 0.01666667, 0.00625   , 0.003125  ,
        0.003125  , 0.00208333, 0.00416667, 0.00416667, 0.003125  ,
        0.00625   , 0.00208333, 0.003125  , 0.00625   , 0.025     ,
        0.00416667, 0.003125  , 0.00208333, 0.003125  , 0.00416667,
        0.00625   , 0.00625   , 0.00416667, 0.00625   , 0.00625   ,
        0.00416667, 0.05      , 0.00416667, 0.00625   , 0.00625   ,
        0.00416667, 0.00625   , 0.00625   , 0.00416667, 0.003125  ,
        0.00208333, 0.003125  , 0.00416667, 0.025     , 0.00625   ,
        0.003125  , 0.00208333, 0.00625   , 0.003125  , 0.00416667,
        0.00416667, 0.00208333, 0.003125  , 0.003125  , 0.00625   ,
        0.01666667, 0.00208333, 0.00208333, 0.00208333, 0.00416667,
        0.003125  , 0.003125  , 0.00625   , 0.00625   , 0.00208333,
        0.025     , 0.00208333, 0.00416667, 0.003125  , 0.003125  ,
        0.00104167, 0.003125  , 0.00208333, 0.00833333, 0.00208333,
        0.003125  , 0.00104167, 0.00104167, 0.003125  , 0.00208333,
        0.00625   , 0.00104167, 0.00208333, 0.003125  , 0.003125  ,
        0.00416667, 0.00104167, 0.0125    , 0.00104167, 0.003125  ,
        0.003125  , 0.00208333, 0.00208333, 0.00104167, 0.00625   ,
        0.003125  , 0.00104167, 0.00416667, 0.003125  , 0.00625   ,
        0.00208333, 0.00208333, 0.003125  , 0.01666667, 0.00208333,
        0.00208333, 0.00416667, 0.00625   , 0.00625   , 0.00416667,
        0.003125  , 0.003125  , 0.00208333, 0.025     , 0.00208333,
        0.003125  , 0.003125  , 0.003125  , 0.00208333, 0.00104167,
        0.00208333, 0.00833333, 0.003125  , 0.00104167, 0.00416667,
        0.00208333, 0.003125  , 0.00208333, 0.003125  , 0.01041667,
        0.00104167, 0.00416667, 0.003125  , 0.003125  , 0.003125  ,
        0.003125  , 0.00104167, 0.0125    , 0.00104167, 0.00104167,
        0.00104167, 0.00104167, 0.00208333]
        )

        M_known_indices = np.array(
        [ 0,  1,  3,  9,  0,  1,  2,  3,  4,  9, 10, 12,  1,  2,  4,  5, 10,
        11, 13,  0,  1,  3,  4,  6,  9, 12,  1,  2,  3,  4,  5,  6,  7, 10,
        12, 13, 15,  2,  4,  5,  7,  8, 11, 13, 14, 16,  3,  4,  6,  7, 12,
        15,  4,  5,  6,  7,  8, 13, 15, 16,  5,  7,  8, 14, 16, 17,  0,  1,
         3,  9, 10, 12, 18,  1,  2,  4,  9, 10, 11, 12, 13, 18, 19, 21,  2,
         5, 10, 11, 13, 14, 19, 20, 22,  1,  3,  4,  6,  9, 10, 12, 13, 15,
        18, 21,  2,  4,  5,  7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 24,
         5,  8, 11, 13, 14, 16, 17, 20, 22, 23, 25,  4,  6,  7, 12, 13, 15,
        16, 21, 24,  5,  7,  8, 13, 14, 15, 16, 17, 22, 24, 25,  8, 14, 16,
        17, 23, 25, 26,  9, 10, 12, 18, 19, 21, 10, 11, 13, 18, 19, 20, 21,
        22, 11, 14, 19, 20, 22, 23, 10, 12, 13, 15, 18, 19, 21, 22, 24, 11,
        13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 14, 17, 20, 22, 23, 25, 26,
        13, 15, 16, 21, 22, 24, 25, 14, 16, 17, 22, 23, 24, 25, 26, 17, 23,
        25, 26]
        )

        M_known_indptr = np.array(
        [  0,   4,  12,  19,  26,  37,  46,  52,  60,  66,  73,  84,  93,
        104, 119, 130, 139, 150, 157, 163, 171, 177, 186, 197, 204, 211,
        219, 223]
        )
        # fmt: on

        M.sum_duplicates()
        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

    def test_3d_cartesian(self):
        N, dim = 2, 3
        sd = pp.CartGrid([N] * dim, [1] * dim)
        mdg = pg.as_mdg(sd)
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()
        mdg.initialize_data()

        M = pg.lumped_cell_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [8., 8., 8., 8., 8., 8., 8., 8.]
        )

        M_known_indices = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7]
        )

        M_known_indptr = np.array(
        [0, 1, 2, 3, 4, 5, 6, 7, 8]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.lumped_face_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [1., 2., 1., 1., 2., 1., 1., 2., 1., 1., 2., 1., 1., 1., 2., 2., 1.,
        1., 1., 1., 2., 2., 1., 1., 1., 1., 1., 1., 2., 2., 2., 2., 1., 1.,
        1., 1.]
        )

        M_known_indices = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35]
        )

        M_known_indptr = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.lumped_peak_mass(mdg)

        # fmt: off
        M_known_data = np.array(
        [0.03125, 0.0625 , 0.03125, 0.0625 , 0.125  , 0.0625 , 0.03125,
        0.0625 , 0.03125, 0.0625 , 0.125  , 0.0625 , 0.125  , 0.25   ,
        0.125  , 0.0625 , 0.125  , 0.0625 , 0.03125, 0.0625 , 0.03125,
        0.0625 , 0.125  , 0.0625 , 0.03125, 0.0625 , 0.03125]
        )

        M_known_indices = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
        )

        M_known_indptr = np.array(
        [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        self.assertRaises(ValueError, pg.numerics.innerproducts.default_discr, sd, -1)


if __name__ == "__main__":
    unittest.main()
