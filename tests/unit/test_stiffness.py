import unittest

import numpy as np
import porepy as pp

import pygeon as pg


class StiffnessUnitTest(unittest.TestCase):
    def test_2d_simplicial(self):
        N, dim = 2, 2
        sd = pp.StructuredTriangleGrid([N] * dim, [1] * dim)
        mdg = pg.as_mdg(sd)
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()
        mdg.initialize_data()

        M = pg.cell_stiff(mdg)

        # fmt: off
        M_known_indptr = np.array(
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.shape, (8, 8)))
        self.assertTrue(M.data.size == 0)
        self.assertTrue(M.indices.size == 0)
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.face_stiff(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 8., -8.,  8.,  8., -8.,  8., -8., -8., 16., -8., -8.,  8., -8.,
         8.,  8., -8., 16., -8.,  8., -8., -8., 16., -8., -8.,  8., -8.,
         8.,  8., -8., 16., -8.,  8.,  8., -8.,  8., -8., -8., 16., -8.,
        -8.,  8., -8., 16., -8.,  8.,  8., -8., 16., -8.,  8., -8., -8.,
        16., -8., -8.,  8., -8.,  8.,  8., -8.,  8.,  8., -8.,  8.]
        )

        M_known_indices = np.array(
        [ 0,  2,  4,  1,  2,  7,  0,  1,  2,  4,  7,  3,  5,  6,  0,  2,  4,
         5, 10,  3,  4,  5,  6, 10,  3,  5,  6,  1,  2,  7,  9, 11,  8,  9,
        14,  7,  8,  9, 11, 14,  4,  5, 10, 12, 13,  7,  9, 11, 12, 15, 10,
        11, 12, 13, 15, 10, 12, 13,  8,  9, 14, 11, 12, 15]
        )

        M_known_indptr = np.array(
        [ 0,  3,  6, 11, 14, 19, 24, 27, 32, 35, 40, 45, 50, 55, 58, 61, 64]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.ridge_stiff(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 1. , -0.5, -0.5, -0.5,  2. , -0.5, -1. , -0.5,  1. , -0.5, -0.5,
         2. , -1. , -0.5, -1. , -1. ,  4. , -1. , -1. , -0.5, -1. ,  2. ,
        -0.5, -0.5,  1. , -0.5, -1. , -0.5,  2. , -0.5, -0.5, -0.5,  1. ]
        )

        M_known_indices = np.array(
        [0, 1, 3, 0, 1, 2, 4, 1, 2, 5, 0, 3, 4, 6, 1, 3, 4, 5, 7, 2, 4, 5,
        8, 3, 6, 7, 4, 6, 7, 8, 5, 7, 8]
        )

        M_known_indptr = np.array(
        [ 0,  3,  7, 10, 14, 19, 23, 26, 30, 33]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.peak_stiff(mdg)

        self.assertTrue(np.allclose(M.shape, (0, 0)))

    def test_3d_simplicial(self):
        N, dim = 2, 3
        sd = pp.StructuredTetrahedralGrid([N] * dim, [1] * dim)
        mdg = pg.as_mdg(sd)
        pg.convert_from_pp(mdg)
        mdg.compute_geometry()
        mdg.initialize_data()

        M = pg.cell_stiff(mdg)

        # fmt: off
        M_known_indptr = np.array(
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.shape, (48, 48)))
        self.assertTrue(M.data.size == 0)
        self.assertTrue(M.indices.size == 0)
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.face_stiff(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 48., -48.,  48., -48., -48.,  48., -48.,  48.,  48., -48.,  48.,
        -48.,  48., -48.,  48., -48., -48.,  48., -48.,  48.,  48., -48.,
         48., -48., -48.,  48., -48.,  96., -48.,  48., -48., -48., -48.,
         96., -48., -48.,  48.,  48.,  48., -48.,  96., -48.,  48., -48.,
        -48.,  48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,  48.,
        -48.,  48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,  48.,
        -48.,  96., -48., -48.,  48., -48.,  48., -48., -48.,  48., -48.,
         96., -48.,  48., -48., -48., -48.,  96., -48., -48.,  48.,  48.,
         48., -48.,  48., -48.,  48., -48., -48.,  96., -48., -48.,  48.,
         48., -48.,  48., -48.,  48., -48., -48.,  96., -48., -48.,  48.,
         48., -48.,  48., -48.,  96., -48., -48.,  48., -48.,  48., -48.,
        -48.,  48., -48., -48.,  96., -48.,  48.,  48., -48.,  48., -48.,
        -48.,  48., -48.,  48.,  48., -48.,  48., -48., -48.,  48., -48.,
        -48.,  96., -48.,  48.,  48., -48.,  48., -48., -48.,  48., -48.,
         96., -48.,  48., -48., -48., -48.,  96., -48., -48.,  48.,  48.,
         48., -48.,  96., -48.,  48., -48., -48.,  48., -48., -48.,  96.,
        -48., -48.,  48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,
         48., -48., -48.,  96., -48.,  48.,  48., -48.,  96., -48.,  48.,
        -48., -48.,  48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,
         48., -48.,  96., -48., -48.,  48., -48.,  48., -48., -48.,  48.,
        -48.,  96., -48.,  48., -48., -48., -48.,  96., -48., -48.,  48.,
         48.,  48., -48.,  48., -48.,  48., -48., -48.,  96., -48., -48.,
         48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,  48., -48.,
         48.,  48., -48.,  96., -48.,  48., -48., -48.,  48., -48., -48.,
         96., -48., -48.,  48.,  48., -48.,  48., -48.,  96., -48., -48.,
        -48.,  48., -48.,  48., -48.,  48., -48.,  48., -48.,  48., -48.,
         48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,  48., -48.,
        -48.,  96., -48.,  48.,  48., -48.,  48., -48., -48.,  48., -48.,
         96., -48.,  48., -48., -48.,  48., -48.,  48.,  48., -48.,  48.,
        -48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,  48., -48.,
         48.,  48., -48.,  48., -48., -48.,  48., -48.,  96., -48.,  48.,
        -48., -48.,  48., -48.,  48., -48.,  48., -48.,  96., -48.,  48.,
        -48., -48.,  48., -48.,  96., -48.,  48., -48., -48., -48.,  96.,
        -48., -48.,  48.,  48.,  48., -48.,  96., -48.,  48., -48., -48.,
         48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,  48., -48.,
         48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,  48., -48.,
         96., -48., -48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,
         48., -48.,  96., -48.,  48., -48., -48., -48.,  96., -48., -48.,
         48.,  48.,  48., -48.,  48., -48.,  48., -48., -48.,  96., -48.,
        -48.,  48.,  48., -48.,  48., -48.,  48., -48., -48.,  96., -48.,
        -48.,  48.,  48., -48.,  48., -48.,  96., -48., -48., -48.,  48.,
        -48.,  96., -48.,  48., -48., -48.,  48., -48., -48.,  96., -48.,
         48.,  48., -48.,  48., -48., -48.,  48., -48.,  48., -48.,  48.,
        -48.,  96., -48.,  48., -48., -48.,  48., -48., -48.,  96., -48.,
         48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,  48., -48.,
         96., -48.,  48., -48., -48., -48.,  96., -48., -48.,  48.,  48.,
         48., -48.,  96., -48.,  48., -48., -48.,  48., -48., -48.,  96.,
        -48., -48.,  48., -48.,  48., -48.,  96., -48.,  48., -48., -48.,
         48., -48., -48.,  96., -48.,  48.,  48., -48.,  96., -48.,  48.,
        -48., -48.,  48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,
         48., -48.,  96., -48., -48., -48.,  48., -48.,  96., -48.,  48.,
        -48., -48.,  48., -48.,  96., -48.,  48., -48., -48., -48.,  96.,
        -48., -48.,  48.,  48.,  48., -48.,  48., -48.,  48., -48., -48.,
         96., -48., -48.,  48., -48.,  48., -48.,  96., -48.,  48., -48.,
        -48.,  48., -48.,  48.,  48., -48.,  96., -48.,  48., -48., -48.,
         48., -48., -48.,  96., -48., -48.,  48.,  48., -48.,  48., -48.,
         96., -48., -48., -48.,  48., -48.,  48., -48.,  48., -48.,  48.,
        -48.,  48., -48.,  48., -48.,  48., -48.,  96., -48.,  48., -48.,
        -48.,  48., -48., -48.,  96., -48.,  48.,  48., -48.,  48., -48.,
        -48.,  48., -48.,  96., -48.,  48., -48., -48.,  48., -48.,  48.,
         48., -48.,  48., -48., -48.,  48., -48.,  48., -48.,  48., -48.,
         48., -48.,  48., -48.,  48., -48.,  48., -48.,  48., -48.,  48.,
        -48.,  48., -48.,  48., -48.,  48., -48.,  48., -48.,  48., -48.,
         48., -48.,  48.]
        )

        M_known_indices = np.array(
        [  0,   1,   2,   6,   0,   1,   2,   6,   0,   1,   2,   6,   3,
          4,   8,  14,   3,   4,   8,  14,   5,   7,   9,  22,   0,   1,
          2,   6,   7,  11,  24,   5,   6,   7,   9,  11,  22,  24,   3,
          4,   8,   9,  12,  14,  32,   5,   7,   8,   9,  12,  22,  32,
         10,  11,  12,  56,   6,   7,  10,  11,  12,  24,  56,   8,   9,
         10,  11,  12,  32,  56,  13,  15,  17,  26,   3,   4,   8,  14,
         15,  19,  33,  13,  14,  15,  17,  19,  26,  33,  16,  17,  20,
         42,  13,  15,  16,  17,  20,  26,  42,  18,  19,  20,  59,  14,
         15,  18,  19,  20,  33,  59,  16,  17,  18,  19,  20,  42,  59,
         21,  22,  23,  28,   5,   7,   9,  21,  22,  23,  28,  21,  22,
         23,  28,   6,   7,  11,  24,  25,  26,  30,  38,  13,  15,  17,
         25,  26,  30,  38,  27,  29,  31,  47,  21,  22,  23,  28,  29,
         35,  48,  27,  28,  29,  31,  35,  47,  48,  25,  26,  30,  31,
         36,  38,  50,  27,  29,  30,  31,  36,  47,  50,   8,   9,  12,
         32,  33,  34,  61,  14,  15,  19,  32,  33,  34,  61,  32,  33,
         34,  35,  36,  61,  77,  28,  29,  34,  35,  36,  48,  77,  30,
         31,  34,  35,  36,  50,  77,  37,  39,  41,  49,  25,  26,  30,
         38,  39,  45,  51,  37,  38,  39,  41,  45,  49,  51,  40,  41,
         46,  53,  37,  39,  40,  41,  46,  49,  53,  16,  17,  20,  42,
         43,  44,  69,  42,  43,  44,  69,  42,  43,  44,  45,  46,  69,
         81,  38,  39,  44,  45,  46,  51,  81,  40,  41,  44,  45,  46,
         53,  81,  27,  29,  31,  47,  28,  29,  35,  48,  37,  39,  41,
         49,  30,  31,  36,  50,  51,  52,  83,  38,  39,  45,  50,  51,
         52,  83,  50,  51,  52,  83,  40,  41,  46,  53,  54,  55,  93,
         53,  54,  55,  93,  53,  54,  55,  93,  10,  11,  12,  56,  57,
         58,  62,  56,  57,  58,  62,  56,  57,  58,  62,  18,  19,  20,
         59,  60,  64,  70,  59,  60,  64,  70,  32,  33,  34,  61,  63,
         65,  78,  56,  57,  58,  62,  63,  67,  80,  61,  62,  63,  65,
         67,  78,  80,  59,  60,  64,  65,  68,  70,  88,  61,  63,  64,
         65,  68,  78,  88,  66,  67,  68, 112,  62,  63,  66,  67,  68,
         80, 112,  64,  65,  66,  67,  68,  88, 112,  42,  43,  44,  69,
         71,  73,  82,  59,  60,  64,  70,  71,  75,  89,  69,  70,  71,
         73,  75,  82,  89,  72,  73,  76,  98,  69,  71,  72,  73,  76,
         82,  98,  74,  75,  76, 113,  70,  71,  74,  75,  76,  89, 113,
         72,  73,  74,  75,  76,  98, 113,  34,  35,  36,  77,  78,  79,
         84,  61,  63,  65,  77,  78,  79,  84,  77,  78,  79,  84,  62,
         63,  67,  80,  44,  45,  46,  81,  82,  86,  94,  69,  71,  73,
         81,  82,  86,  94,  50,  51,  52,  83,  85,  87, 103,  77,  78,
         79,  84,  85,  91, 104,  83,  84,  85,  87,  91, 103, 104,  81,
         82,  86,  87,  92,  94, 106,  83,  85,  86,  87,  92, 103, 106,
         64,  65,  68,  88,  89,  90, 114,  70,  71,  75,  88,  89,  90,
        114,  88,  89,  90,  91,  92, 114, 116,  84,  85,  90,  91,  92,
        104, 116,  86,  87,  90,  91,  92, 106, 116,  53,  54,  55,  93,
         95,  97, 105,  81,  82,  86,  94,  95, 101, 107,  93,  94,  95,
         97, 101, 105, 107,  96,  97, 102, 109,  93,  95,  96,  97, 102,
        105, 109,  72,  73,  76,  98,  99, 100, 115,  98,  99, 100, 115,
         98,  99, 100, 101, 102, 115, 117,  94,  95, 100, 101, 102, 107,
        117,  96,  97, 100, 101, 102, 109, 117,  83,  85,  87, 103,  84,
         85,  91, 104,  93,  95,  97, 105,  86,  87,  92, 106, 107, 108,
        118,  94,  95, 101, 106, 107, 108, 118, 106, 107, 108, 118,  96,
         97, 102, 109, 110, 111, 119, 109, 110, 111, 119, 109, 110, 111,
        119,  66,  67,  68, 112,  74,  75,  76, 113,  88,  89,  90, 114,
         98,  99, 100, 115,  90,  91,  92, 116, 100, 101, 102, 117, 106,
        107, 108, 118, 109, 110, 111, 119]
        )

        M_known_indptr = np.array(
        [  0,   4,   8,  12,  16,  20,  24,  31,  38,  45,  52,  56,  63,
         70,  74,  81,  88,  92,  99, 103, 110, 117, 121, 128, 132, 136,
        140, 147, 151, 158, 165, 172, 179, 186, 193, 200, 207, 214, 218,
        225, 232, 236, 243, 250, 254, 261, 268, 275, 279, 283, 287, 294,
        301, 305, 312, 316, 320, 327, 331, 335, 342, 346, 353, 360, 367,
        374, 381, 385, 392, 399, 406, 413, 420, 424, 431, 435, 442, 449,
        456, 463, 467, 471, 478, 485, 492, 499, 506, 513, 520, 527, 534,
        541, 548, 555, 562, 569, 576, 580, 587, 594, 598, 605, 612, 619,
        623, 627, 631, 638, 645, 649, 656, 660, 664, 668, 672, 676, 680,
        684, 688, 692, 696]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.ridge_stiff(mdg)
        mask = np.abs(M.data) < 1e-10
        M.data[mask] = 0
        M.eliminate_zeros()

        # fmt: off
        M_known_data = np.array(
        [ 2.66666667, -1.33333333, -1.33333333,  1.33333333,  1.33333333,
        -1.33333333,  2.66666667, -1.33333333, -1.33333333,  1.33333333,
        -1.33333333, -1.33333333,  2.66666667, -1.33333333, -1.33333333,
         2.66666667, -1.33333333, -1.33333333,  1.33333333,  1.33333333,
         1.33333333, -1.33333333,  5.33333333, -1.33333333, -2.66666667,
         2.66666667,  1.33333333,  1.33333333,  1.33333333, -1.33333333,
        -1.33333333,  6.66666667, -2.66666667, -1.33333333, -1.33333333,
        -1.33333333,  4.        ,  1.33333333,  1.33333333, -1.33333333,
         5.33333333, -1.33333333, -2.66666667, -1.33333333,  1.33333333,
         2.66666667,  1.33333333, -1.33333333, -2.66666667, -1.33333333,
         6.66666667, -1.33333333, -1.33333333, -4.        ,  1.33333333,
        -1.33333333, -2.66666667, -1.33333333, -2.66666667, -1.33333333,
         8.        , -1.33333333, -1.33333333, -2.66666667, -1.33333333,
        -1.33333333, -2.66666667,  1.33333333, -1.33333333,  5.33333333,
        -1.33333333, -2.66666667,  2.66666667,  1.33333333,  1.33333333,
         1.33333333, -1.33333333,  4.        , -1.33333333, -1.33333333,
        -1.33333333,  2.66666667,  1.33333333,  1.33333333, -1.33333333,
         5.33333333, -1.33333333, -2.66666667, -1.33333333,  1.33333333,
         2.66666667,  1.33333333, -1.33333333, -1.33333333,  4.        ,
        -1.33333333, -2.66666667,  1.33333333, -1.33333333, -2.66666667,
        -1.33333333, -2.66666667, -1.33333333,  8.        , -1.33333333,
        -1.33333333, -2.66666667, -1.33333333, -1.33333333, -2.66666667,
         2.66666667, -1.33333333, -1.33333333,  6.66666667, -1.33333333,
        -2.66666667,  1.33333333,  4.        , -1.33333333,  2.66666667,
        -1.33333333, -1.33333333,  1.33333333,  1.33333333, -1.33333333,
         1.33333333, -1.33333333,  5.33333333, -2.66666667,  2.66666667,
         1.33333333, -1.33333333, -2.66666667, -1.33333333, -2.66666667,
         6.66666667, -2.66666667, -1.33333333, -1.33333333,  2.66666667,
        -1.33333333, -1.33333333,  6.66666667, -1.33333333, -2.66666667,
         1.33333333,  4.        ,  1.33333333, -1.33333333,  5.33333333,
        -1.33333333, -2.66666667,  2.66666667,  1.33333333,  1.33333333,
         1.33333333, -1.33333333, -1.33333333,  6.66666667, -2.66666667,
        -1.33333333, -1.33333333, -1.33333333,  4.        ,  1.33333333,
         4.        , -4.        ,  1.33333333, -1.33333333, 10.66666667,
        -1.33333333, -4.        ,  1.33333333,  4.        ,  1.33333333,
         1.33333333, -2.66666667,  4.        , -2.66666667, -1.33333333,
        10.66666667, -2.66666667, -2.66666667, -1.33333333,  1.33333333,
         4.        ,  1.33333333,  1.33333333, -1.33333333, -2.66666667,
        -2.66666667, -4.        , -2.66666667, 13.33333333, -1.33333333,
        -2.66666667, -4.        ,  1.33333333, -2.66666667, -2.66666667,
        -2.66666667, -1.33333333, -2.66666667, -1.33333333,  8.        ,
        -1.33333333, -1.33333333, -2.66666667, -1.33333333, -1.33333333,
        -2.66666667,  1.33333333, -1.33333333,  5.33333333, -1.33333333,
        -2.66666667,  2.66666667,  1.33333333,  1.33333333,  1.33333333,
        -1.33333333,  4.        , -1.33333333, -1.33333333, -1.33333333,
         2.66666667,  1.33333333,  2.66666667, -2.66666667,  5.33333333,
        -1.33333333, -1.33333333,  1.33333333,  1.33333333,  1.33333333,
         1.33333333, -2.66666667,  4.        , -2.66666667, -1.33333333,
        10.66666667, -2.66666667, -2.66666667, -1.33333333,  1.33333333,
         4.        ,  1.33333333, -1.33333333, -1.33333333, -2.66666667,
         6.66666667, -1.33333333, -2.66666667,  1.33333333, -1.33333333,
        -2.66666667, -2.66666667, -1.33333333, -2.66666667, -1.33333333,
         8.        , -1.33333333, -1.33333333, -2.66666667, -1.33333333,
        -1.33333333, -2.66666667,  2.66666667, -1.33333333, -1.33333333,
         4.        , -1.33333333,  2.66666667,  1.33333333, -1.33333333,
         1.33333333, -1.33333333,  5.33333333, -2.66666667,  2.66666667,
         1.33333333, -1.33333333, -1.33333333, -2.66666667,  4.        ,
        -1.33333333, -1.33333333,  2.66666667, -1.33333333, -1.33333333,
         4.        , -1.33333333,  2.66666667,  4.        , -4.        ,
         1.33333333, -1.33333333, 10.66666667, -1.33333333, -4.        ,
         1.33333333,  4.        ,  1.33333333,  1.33333333, -2.66666667,
         2.66666667, -1.33333333, -1.33333333,  5.33333333, -1.33333333,
         1.33333333,  1.33333333, -1.33333333, -1.33333333, -4.        ,
        -1.33333333,  6.66666667, -1.33333333, -2.66666667, -1.33333333,
         2.66666667, -2.66666667,  5.33333333, -1.33333333, -1.33333333,
         1.33333333,  1.33333333,  1.33333333,  1.33333333, -2.66666667,
         2.66666667, -1.33333333, -1.33333333,  5.33333333, -1.33333333,
         1.33333333, -1.33333333, -1.33333333,  2.66666667, -1.33333333,
        -1.33333333,  2.66666667, -1.33333333, -1.33333333,  6.66666667,
        -2.66666667, -1.33333333,  4.        ,  1.33333333,  1.33333333,
        -1.33333333,  2.66666667, -1.33333333, -2.66666667,  6.66666667,
        -1.33333333, -2.66666667,  1.33333333, -1.33333333, -1.33333333,
         2.66666667, -1.33333333, -1.33333333,  2.66666667, -1.33333333,
        -1.33333333,  6.66666667, -2.66666667, -1.33333333,  4.        ,
         1.33333333,  1.33333333,  1.33333333, -2.66666667,  1.33333333,
         4.        , -2.66666667, 10.66666667, -2.66666667, -2.66666667,
         4.        ,  1.33333333,  1.33333333,  1.33333333,  1.33333333,
        -1.33333333,  4.        , -2.66666667, -2.66666667, -2.66666667,
        13.33333333, -2.66666667, -1.33333333, -2.66666667, -2.66666667,
         4.        ,  1.33333333,  1.33333333, -1.33333333,  5.33333333,
        -1.33333333, -2.66666667, -1.33333333,  1.33333333,  2.66666667,
         1.33333333, -1.33333333, -2.66666667, -1.33333333,  6.66666667,
        -1.33333333, -1.33333333, -4.        ,  1.33333333, -1.33333333,
        -2.66666667, -1.33333333, -2.66666667, -1.33333333,  8.        ,
        -1.33333333, -1.33333333, -2.66666667, -1.33333333, -1.33333333,
        -2.66666667,  1.33333333,  1.33333333, -2.66666667,  1.33333333,
         4.        , -2.66666667, 10.66666667, -2.66666667, -2.66666667,
         4.        ,  1.33333333,  1.33333333,  1.33333333,  1.33333333,
        -1.33333333, -2.66666667,  6.66666667, -1.33333333, -1.33333333,
        -2.66666667,  2.66666667,  1.33333333,  1.33333333, -1.33333333,
         5.33333333, -1.33333333, -2.66666667, -1.33333333,  1.33333333,
         2.66666667,  1.33333333, -1.33333333, -1.33333333,  4.        ,
        -1.33333333, -2.66666667,  1.33333333, -1.33333333, -2.66666667,
        -1.33333333, -2.66666667, -1.33333333,  8.        , -1.33333333,
        -1.33333333, -2.66666667, -1.33333333, -1.33333333, -2.66666667,
         4.        , -2.66666667, -1.33333333,  4.        , -2.66666667,
        -1.33333333, 13.33333333, -2.66666667, -2.66666667,  4.        ,
         4.        ,  1.33333333, -1.33333333,  2.66666667, -1.33333333,
        -2.66666667,  6.66666667, -1.33333333, -2.66666667,  1.33333333,
         1.33333333, -1.33333333,  1.33333333, -1.33333333,  5.33333333,
        -2.66666667,  2.66666667,  1.33333333, -1.33333333, -2.66666667,
        -1.33333333, -2.66666667,  6.66666667, -2.66666667, -1.33333333,
        -1.33333333,  4.        , -2.66666667, -1.33333333,  4.        ,
        -2.66666667, -1.33333333, 13.33333333, -2.66666667, -2.66666667,
         4.        ,  4.        ,  1.33333333,  1.33333333, -2.66666667,
         1.33333333,  4.        , -2.66666667, 10.66666667, -2.66666667,
        -2.66666667,  4.        ,  1.33333333,  1.33333333,  1.33333333,
         1.33333333, -1.33333333,  4.        , -2.66666667, -2.66666667,
        -2.66666667, 13.33333333, -2.66666667, -1.33333333, -2.66666667,
        -2.66666667,  4.        ,  1.33333333,  4.        , -4.        ,
         1.33333333, -1.33333333, 10.66666667, -1.33333333, -4.        ,
         1.33333333,  4.        ,  1.33333333,  1.33333333, -2.66666667,
         4.        , -2.66666667, -1.33333333, 10.66666667, -2.66666667,
        -2.66666667, -1.33333333,  1.33333333,  4.        ,  1.33333333,
         1.33333333, -1.33333333, -2.66666667, -2.66666667, -4.        ,
        -2.66666667, 13.33333333, -1.33333333, -2.66666667, -4.        ,
         1.33333333, -2.66666667, -2.66666667, -2.66666667, -1.33333333,
        -2.66666667, -1.33333333,  8.        , -1.33333333, -1.33333333,
        -2.66666667, -1.33333333, -1.33333333, -2.66666667,  1.33333333,
         1.33333333, -2.66666667,  1.33333333,  4.        , -2.66666667,
        10.66666667, -2.66666667, -2.66666667,  4.        ,  1.33333333,
         1.33333333,  1.33333333,  1.33333333, -1.33333333, -2.66666667,
         6.66666667, -1.33333333, -1.33333333, -2.66666667,  2.66666667,
         1.33333333,  2.66666667, -2.66666667,  5.33333333, -1.33333333,
        -1.33333333,  1.33333333,  1.33333333,  1.33333333,  1.33333333,
        -2.66666667,  4.        , -2.66666667, -1.33333333, 10.66666667,
        -2.66666667, -2.66666667, -1.33333333,  1.33333333,  4.        ,
         1.33333333, -1.33333333, -1.33333333, -2.66666667,  6.66666667,
        -1.33333333, -2.66666667,  1.33333333, -1.33333333, -2.66666667,
        -2.66666667, -1.33333333, -2.66666667, -1.33333333,  8.        ,
        -1.33333333, -1.33333333, -2.66666667, -1.33333333, -1.33333333,
        -2.66666667,  1.33333333, -1.33333333,  4.        , -2.66666667,
        -1.33333333,  6.66666667, -1.33333333,  2.66666667,  1.33333333,
        -1.33333333,  1.33333333, -1.33333333,  5.33333333, -2.66666667,
         2.66666667,  1.33333333, -1.33333333, -1.33333333, -2.66666667,
         4.        , -1.33333333, -1.33333333,  1.33333333, -1.33333333,
         4.        , -2.66666667, -1.33333333,  6.66666667, -1.33333333,
         2.66666667,  4.        , -4.        ,  1.33333333, -1.33333333,
        10.66666667, -1.33333333, -4.        ,  1.33333333,  4.        ,
         1.33333333,  1.33333333, -2.66666667,  2.66666667, -1.33333333,
        -1.33333333,  5.33333333, -1.33333333,  1.33333333,  1.33333333,
        -1.33333333, -1.33333333, -4.        , -1.33333333,  6.66666667,
        -1.33333333, -2.66666667, -1.33333333,  2.66666667, -2.66666667,
         5.33333333, -1.33333333, -1.33333333,  1.33333333,  1.33333333,
         1.33333333,  1.33333333, -2.66666667,  2.66666667, -1.33333333,
        -1.33333333,  5.33333333, -1.33333333,  1.33333333, -1.33333333,
        -1.33333333,  2.66666667, -1.33333333, -1.33333333,  2.66666667,
        -1.33333333, -1.33333333,  4.        , -1.33333333,  2.66666667,
         1.33333333, -1.33333333,  2.66666667, -1.33333333, -1.33333333,
         4.        , -1.33333333,  2.66666667, -1.33333333, -1.33333333,
         4.        , -1.33333333,  2.66666667,  1.33333333,  1.33333333,
        -2.66666667,  1.33333333,  2.66666667, -1.33333333,  5.33333333,
        -1.33333333,  1.33333333,  1.33333333, -1.33333333,  4.        ,
        -2.66666667, -1.33333333, -1.33333333,  6.66666667, -1.33333333,
        -1.33333333,  1.33333333,  1.33333333, -2.66666667,  1.33333333,
         2.66666667, -1.33333333,  5.33333333, -1.33333333,  1.33333333,
         1.33333333, -1.33333333, -1.33333333,  2.66666667, -1.33333333,
         4.        , -2.66666667, -1.33333333,  1.33333333, -1.33333333,
         6.66666667, -1.33333333,  2.66666667,  1.33333333, -1.33333333,
         2.66666667, -1.33333333, -1.33333333,  4.        , -1.33333333,
         4.        , -2.66666667, -1.33333333,  1.33333333, -1.33333333,
         6.66666667, -1.33333333,  2.66666667,  1.33333333,  1.33333333,
        -2.66666667,  1.33333333,  2.66666667, -1.33333333,  5.33333333,
        -1.33333333,  1.33333333,  1.33333333, -1.33333333,  4.        ,
        -2.66666667, -1.33333333, -1.33333333,  6.66666667, -1.33333333,
        -1.33333333,  1.33333333,  1.33333333, -2.66666667,  1.33333333,
         2.66666667, -1.33333333,  5.33333333, -1.33333333,  1.33333333,
         1.33333333, -1.33333333, -1.33333333,  2.66666667, -1.33333333,
         1.33333333, -1.33333333,  1.33333333, -1.33333333,  2.66666667,
         1.33333333, -1.33333333,  1.33333333, -1.33333333,  2.66666667]
        )

        M_known_indices = np.array(
        [ 0,  1,  2,  4,  6,  0,  1,  2,  4, 16,  0,  1,  2,  6, 16,  3,  5,
         7,  9, 11,  0,  1,  4,  5,  8, 14, 16, 22, 42,  3,  4,  5,  7,  8,
         9, 14, 21, 45,  0,  2,  6,  7,  8, 16, 17, 41, 45,  3,  5,  6,  7,
         8, 11, 21, 22, 41,  4,  5,  6,  7,  8, 14, 17, 22, 41, 42, 45,  3,
         5,  9, 10, 13, 18, 21, 28, 46,  9, 10, 12, 13, 18, 27, 50,  3,  7,
        11, 12, 13, 21, 23, 44, 50, 10, 11, 12, 13, 27, 28, 44,  9, 10, 11,
        12, 13, 18, 23, 28, 44, 46, 50,  4,  5,  8, 14, 15, 17, 19, 22, 14,
        15, 17, 19, 32,  1,  2,  4,  6, 16, 17, 42,  6,  8, 14, 15, 16, 17,
        22, 32, 42,  9, 10, 13, 18, 20, 23, 25, 28, 14, 15, 19, 20, 24, 31,
        32, 36, 56, 18, 19, 20, 23, 24, 25, 31, 35, 60,  5,  7,  9, 11, 21,
        22, 23, 45, 46,  4,  7,  8, 14, 17, 21, 22, 23, 24, 32, 33, 55, 60,
        11, 13, 18, 20, 21, 22, 23, 24, 28, 35, 36, 46, 55, 19, 20, 22, 23,
        24, 31, 33, 36, 55, 56, 60, 18, 20, 25, 26, 30, 34, 35, 39, 61, 25,
        26, 29, 30, 34, 38, 66, 10, 12, 27, 28, 29, 50, 51,  9, 12, 13, 18,
        23, 27, 28, 29, 30, 35, 37, 59, 66, 26, 27, 28, 29, 30, 38, 39, 51,
        59, 25, 26, 28, 29, 30, 34, 37, 39, 59, 61, 66, 19, 20, 24, 31, 33,
        36, 15, 17, 19, 22, 32, 33, 56, 22, 24, 31, 32, 33, 36, 56, 25, 26,
        30, 34, 37, 39, 20, 23, 25, 28, 35, 36, 37, 60, 61, 19, 23, 24, 31,
        33, 35, 36, 37, 72, 28, 30, 34, 35, 36, 37, 39, 61, 72, 26, 29, 38,
        39, 40, 66, 67, 25, 29, 30, 34, 37, 38, 39, 40, 75, 38, 39, 40, 67,
        75,  6,  7,  8, 41, 42, 43, 45, 47,  4,  8, 16, 17, 41, 42, 43, 45,
        57, 41, 42, 43, 47, 57, 11, 12, 13, 44, 46, 48, 50, 52,  5,  6,  8,
        21, 41, 42, 45, 46, 49, 55, 57, 63, 83,  9, 13, 21, 23, 44, 45, 46,
        48, 49, 50, 55, 62, 85, 41, 43, 47, 48, 49, 57, 58, 82, 85, 44, 46,
        47, 48, 49, 52, 62, 63, 82, 45, 46, 47, 48, 49, 55, 58, 63, 82, 83,
        85, 10, 11, 13, 27, 44, 46, 50, 51, 54, 59, 62, 69, 86, 27, 29, 50,
        51, 53, 54, 59, 68, 87, 44, 48, 52, 53, 54, 62, 64, 84, 87, 51, 52,
        53, 54, 68, 69, 84, 50, 51, 52, 53, 54, 59, 64, 69, 84, 86, 87, 22,
        23, 24, 45, 46, 49, 55, 56, 58, 60, 63, 19, 24, 32, 33, 55, 56, 58,
        60, 73, 42, 43, 45, 47, 57, 58, 83, 47, 49, 55, 56, 57, 58, 63, 73,
        83, 28, 29, 30, 50, 51, 54, 59, 61, 64, 66, 69, 20, 22, 24, 35, 55,
        56, 60, 61, 65, 72, 73, 77, 90, 25, 30, 35, 37, 59, 60, 61, 64, 65,
        66, 72, 76, 92, 46, 48, 50, 52, 62, 63, 64, 85, 86, 45, 48, 49, 55,
        58, 62, 63, 64, 65, 73, 74, 89, 92, 52, 54, 59, 61, 62, 63, 64, 65,
        69, 76, 77, 86, 89, 60, 61, 63, 64, 65, 72, 74, 77, 89, 90, 92, 26,
        28, 30, 38, 59, 61, 66, 67, 71, 75, 76, 80, 93, 38, 40, 66, 67, 70,
        71, 75, 79, 94, 51, 53, 68, 69, 70, 87, 88, 50, 53, 54, 59, 64, 68,
        69, 70, 71, 76, 78, 91, 94, 67, 68, 69, 70, 71, 79, 80, 88, 91, 66,
        67, 69, 70, 71, 75, 78, 80, 91, 93, 94, 36, 37, 60, 61, 65, 72, 74,
        77, 56, 58, 60, 63, 73, 74, 90, 63, 65, 72, 73, 74, 77, 90, 39, 40,
        66, 67, 71, 75, 78, 80, 61, 64, 66, 69, 76, 77, 78, 92, 93, 60, 64,
        65, 72, 74, 76, 77, 78, 96, 69, 71, 75, 76, 77, 78, 80, 93, 96, 67,
        70, 79, 80, 81, 94, 95, 66, 70, 71, 75, 78, 79, 80, 81, 97, 79, 80,
        81, 95, 97, 47, 48, 49, 82, 83, 85, 45, 49, 57, 58, 82, 83, 85, 52,
        53, 54, 84, 86, 87, 46, 47, 49, 62, 82, 83, 85, 86, 89, 50, 54, 62,
        64, 84, 85, 86, 87, 89, 51, 52, 54, 68, 84, 86, 87, 88, 91, 68, 70,
        87, 88, 91, 63, 64, 65, 85, 86, 89, 90, 92, 60, 65, 73, 74, 89, 90,
        92, 69, 70, 71, 87, 88, 91, 93, 94, 61, 63, 65, 76, 89, 90, 92, 93,
        96, 66, 71, 76, 78, 91, 92, 93, 94, 96, 67, 69, 71, 79, 91, 93, 94,
        95, 97, 79, 81, 94, 95, 97, 77, 78, 92, 93, 96, 80, 81, 94, 95, 97]
        )

        M_known_indptr = np.array(
        [  0,   5,  10,  15,  20,  29,  38,  47,  56,  67,  76,  83,  92,
         99, 110, 118, 123, 130, 139, 147, 156, 165, 174, 187, 200, 211,
        220, 227, 234, 247, 256, 267, 273, 280, 287, 293, 302, 311, 320,
        327, 336, 341, 349, 358, 363, 371, 384, 397, 406, 415, 426, 439,
        448, 457, 464, 475, 486, 495, 502, 511, 522, 535, 548, 557, 570,
        583, 594, 607, 616, 623, 636, 645, 656, 664, 671, 678, 686, 695,
        704, 713, 720, 729, 734, 740, 747, 753, 762, 771, 780, 785, 793,
        800, 808, 817, 826, 835, 840, 845, 850]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))

        M = pg.peak_stiff(mdg)

        # fmt: off
        M_known_data = np.array(
        [ 0.25      , -0.08333333, -0.08333333, -0.08333333, -0.08333333,
         0.83333333, -0.08333333, -0.08333333, -0.33333333, -0.08333333,
        -0.33333333,  0.16666667, -0.08333333,  0.58333333, -0.08333333,
        -0.25      , -0.08333333, -0.25      ,  0.16666667, -0.08333333,
        -0.08333333,  0.66666667, -0.16666667, -0.08333333,  0.08333333,
        -0.33333333, -0.33333333, -0.08333333, -0.16666667,  1.66666667,
        -0.16666667, -0.08333333, -0.33333333,  0.16666667, -0.16666667,
        -0.66666667,  0.16666667, -0.25      , -0.16666667,  1.        ,
        -0.08333333, -0.25      ,  0.08333333, -0.16666667, -0.33333333,
         0.16666667, -0.08333333, -0.08333333,  0.41666667, -0.08333333,
         0.08333333, -0.25      , -0.33333333, -0.08333333, -0.08333333,
         0.83333333, -0.08333333,  0.16666667, -0.08333333, -0.33333333,
        -0.25      , -0.08333333,  0.41666667,  0.08333333, -0.08333333,
        -0.08333333, -0.08333333, -0.08333333,  0.08333333,  0.66666667,
        -0.16666667, -0.33333333, -0.08333333, -0.33333333, -0.08333333,
         0.16666667, -0.16666667,  1.66666667, -0.16666667, -0.16666667,
        -0.66666667, -0.08333333, -0.33333333,  0.16666667, -0.25      ,
         0.08333333, -0.16666667,  1.        , -0.16666667, -0.33333333,
        -0.08333333, -0.25      ,  0.16666667,  0.16666667, -0.33333333,
        -0.16666667,  0.08333333, -0.33333333, -0.16666667,  1.66666667,
        -0.33333333, -0.33333333,  0.08333333, -0.33333333,  0.16666667,
        -0.66666667, -0.16666667,  0.16666667, -0.66666667, -0.16666667,
        -0.33333333,  3.33333333, -0.33333333, -0.16666667, -0.66666667,
         0.16666667, -0.16666667, -0.66666667,  0.16666667, -0.33333333,
         0.08333333, -0.33333333, -0.33333333,  1.66666667, -0.16666667,
        -0.33333333,  0.08333333, -0.16666667, -0.33333333,  0.16666667,
         0.16666667, -0.25      , -0.08333333, -0.33333333, -0.16666667,
         1.        , -0.16666667,  0.08333333, -0.25      ,  0.16666667,
        -0.33333333, -0.08333333, -0.66666667, -0.16666667, -0.16666667,
         1.66666667, -0.16666667,  0.16666667, -0.08333333, -0.33333333,
        -0.08333333, -0.33333333, -0.16666667,  0.66666667,  0.08333333,
        -0.08333333, -0.08333333, -0.08333333, -0.08333333,  0.08333333,
         0.41666667, -0.08333333, -0.25      , -0.33333333, -0.08333333,
         0.16666667, -0.08333333,  0.83333333, -0.08333333, -0.08333333,
        -0.33333333, -0.25      ,  0.08333333, -0.08333333,  0.41666667,
        -0.08333333, -0.08333333,  0.16666667, -0.33333333, -0.16666667,
         0.08333333, -0.25      , -0.08333333,  1.        , -0.16666667,
        -0.25      ,  0.16666667, -0.66666667, -0.16666667,  0.16666667,
        -0.33333333, -0.08333333, -0.16666667,  1.66666667, -0.16666667,
        -0.08333333, -0.33333333, -0.33333333,  0.08333333, -0.08333333,
        -0.16666667,  0.66666667, -0.08333333, -0.08333333,  0.16666667,
        -0.25      , -0.08333333, -0.25      , -0.08333333,  0.58333333,
        -0.08333333,  0.16666667, -0.33333333, -0.08333333, -0.33333333,
        -0.08333333, -0.08333333,  0.83333333, -0.08333333, -0.08333333,
        -0.08333333, -0.08333333,  0.25      ]
        )

        M_known_indices = np.array(
        [ 0,  1,  3,  9,  0,  1,  2,  3,  4,  9, 10, 12,  1,  2,  4,  5, 10,
        11, 13,  0,  1,  3,  4,  6,  9, 12,  1,  2,  3,  4,  5,  6,  7, 10,
        12, 13, 15,  2,  4,  5,  7,  8, 11, 13, 14, 16,  3,  4,  6,  7, 12,
        15,  4,  5,  6,  7,  8, 13, 15, 16,  5,  7,  8, 14, 16, 17,  0,  1,
         3,  9, 10, 12, 18,  1,  2,  4,  9, 10, 11, 12, 13, 18, 19, 21,  2,
         5, 10, 11, 13, 14, 19, 20, 22,  1,  3,  4,  6,  9, 10, 12, 13, 15,
        18, 21,  2,  4,  5,  7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22, 24,
         5,  8, 11, 13, 14, 16, 17, 20, 22, 23, 25,  4,  6,  7, 12, 13, 15,
        16, 21, 24,  5,  7,  8, 13, 14, 15, 16, 17, 22, 24, 25,  8, 14, 16,
        17, 23, 25, 26,  9, 10, 12, 18, 19, 21, 10, 11, 13, 18, 19, 20, 21,
        22, 11, 14, 19, 20, 22, 23, 10, 12, 13, 15, 18, 19, 21, 22, 24, 11,
        13, 14, 16, 19, 20, 21, 22, 23, 24, 25, 14, 17, 20, 22, 23, 25, 26,
        13, 15, 16, 21, 22, 24, 25, 14, 16, 17, 22, 23, 24, 25, 26, 17, 23,
        25, 26]
        )

        M_known_indptr = np.array(
        [  0,   4,  12,  19,  26,  37,  46,  52,  60,  66,  73,  84,  93,
        104, 119, 130, 139, 150, 157, 163, 171, 177, 186, 197, 204, 211,
        219, 223]
        )
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indices, M_known_indices))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))


if __name__ == "__main__":
    unittest.main()
