""" Module contains a dummy unit test that always passes.
"""
import unittest
import numpy as np
import scipy.sparse as sps

import porepy as pp
import pygeon as pg


class VBDM1Test(unittest.TestCase):
    def test_on_cart_grid(self):
        sd = pp.CartGrid([2] * 2)
        pg.convert_from_pp(sd)
        sd.compute_geometry()

        discr = pg.VBDM1("flow")

        M = discr.assemble_mass_matrix(sd)

        # fmt: off
        M_known_data = np.array(
        [ 0.35416667, -0.1875    , -0.1875    ,  0.27083333, -0.        ,
        0.        ,  0.        , -0.        , -0.1875    ,  0.35416667,
        0.27083333, -0.1875    ,  0.        , -0.        , -0.        ,
        0.        , -0.1875    ,  0.27083333,  0.70833333, -0.375     ,
        -0.1875    ,  0.27083333,  0.        , -0.        , -0.        ,
        0.        , -0.        ,  0.        ,  0.        , -0.        ,
        0.27083333, -0.1875    , -0.375     ,  0.70833333,  0.27083333,
        -0.1875    , -0.        ,  0.        ,  0.        , -0.        ,
        0.        , -0.        , -0.        ,  0.        , -0.1875    ,
        0.27083333,  0.35416667, -0.1875    ,  0.        , -0.        ,
        -0.        ,  0.        ,  0.27083333, -0.1875    , -0.1875    ,
        0.35416667, -0.        ,  0.        ,  0.        , -0.        ,
        0.35416667, -0.1875    , -0.1875    ,  0.27083333, -0.        ,
        0.        ,  0.        , -0.        , -0.1875    ,  0.35416667,
        0.27083333, -0.1875    ,  0.        , -0.        , -0.        ,
        0.        , -0.1875    ,  0.27083333,  0.70833333, -0.375     ,
        -0.1875    ,  0.27083333,  0.        , -0.        , -0.        ,
        0.        , -0.        ,  0.        ,  0.        , -0.        ,
        0.27083333, -0.1875    , -0.375     ,  0.70833333,  0.27083333,
        -0.1875    , -0.        ,  0.        ,  0.        , -0.        ,
        0.        , -0.        , -0.        ,  0.        , -0.1875    ,
        0.27083333,  0.35416667, -0.1875    ,  0.        , -0.        ,
        -0.        ,  0.        ,  0.27083333, -0.1875    , -0.1875    ,
        0.35416667, -0.        ,  0.        ,  0.        , -0.        ,
        -0.        ,  0.        ,  0.        , -0.        ,  0.35416667,
        -0.1875    , -0.1875    ,  0.27083333,  0.        , -0.        ,
        -0.        ,  0.        , -0.1875    ,  0.35416667,  0.27083333,
        -0.1875    , -0.        ,  0.        ,  0.        , -0.        ,
        0.35416667, -0.1875    , -0.1875    ,  0.27083333,  0.        ,
        -0.        , -0.        ,  0.        , -0.1875    ,  0.35416667,
        0.27083333, -0.1875    ,  0.        , -0.        , -0.        ,
        0.        , -0.        ,  0.        ,  0.        , -0.        ,
        -0.1875    ,  0.27083333,  0.70833333, -0.375     , -0.1875    ,
        0.27083333, -0.        ,  0.        ,  0.        , -0.        ,
        0.        , -0.        , -0.        ,  0.        ,  0.27083333,
        -0.1875    , -0.375     ,  0.70833333,  0.27083333, -0.1875    ,
        0.        , -0.        , -0.        ,  0.        , -0.        ,
        0.        ,  0.        , -0.        , -0.1875    ,  0.27083333,
        0.70833333, -0.375     , -0.1875    ,  0.27083333, -0.        ,
        0.        ,  0.        , -0.        ,  0.        , -0.        ,
        -0.        ,  0.        ,  0.27083333, -0.1875    , -0.375     ,
        0.70833333,  0.27083333, -0.1875    ,  0.        , -0.        ,
        -0.        ,  0.        , -0.1875    ,  0.27083333,  0.35416667,
        -0.1875    , -0.        ,  0.        ,  0.        , -0.        ,
        0.27083333, -0.1875    , -0.1875    ,  0.35416667,  0.        ,
        -0.        , -0.        ,  0.        , -0.1875    ,  0.27083333,
        0.35416667, -0.1875    , -0.        ,  0.        ,  0.        ,
        -0.        ,  0.27083333, -0.1875    , -0.1875    ,  0.35416667])

        M_known_indptr = np.array(
        [  0,   8,  16,  30,  44,  52,  60,  68,  76,  90, 104, 112, 120,
        128, 136, 144, 152, 166, 180, 194, 208, 216, 224, 232, 240])

        M_known_indices = np.array(
        [ 0,  1,  2,  3, 12, 13, 16, 17,  0,  1,  2,  3, 12, 13, 16, 17,  0,
        1,  2,  3,  4,  5, 12, 13, 14, 15, 16, 17, 18, 19,  0,  1,  2,  3,
        4,  5, 12, 13, 14, 15, 16, 17, 18, 19,  2,  3,  4,  5, 14, 15, 18,
        19,  2,  3,  4,  5, 14, 15, 18, 19,  6,  7,  8,  9, 16, 17, 20, 21,
        6,  7,  8,  9, 16, 17, 20, 21,  6,  7,  8,  9, 10, 11, 16, 17, 18,
        19, 20, 21, 22, 23,  6,  7,  8,  9, 10, 11, 16, 17, 18, 19, 20, 21,
        22, 23,  8,  9, 10, 11, 18, 19, 22, 23,  8,  9, 10, 11, 18, 19, 22,
        23,  0,  1,  2,  3, 12, 13, 16, 17,  0,  1,  2,  3, 12, 13, 16, 17,
        2,  3,  4,  5, 14, 15, 18, 19,  2,  3,  4,  5, 14, 15, 18, 19,  0,
        1,  2,  3,  6,  7,  8,  9, 12, 13, 16, 17, 20, 21,  0,  1,  2,  3,
        6,  7,  8,  9, 12, 13, 16, 17, 20, 21,  2,  3,  4,  5,  8,  9, 10,
        11, 14, 15, 18, 19, 22, 23,  2,  3,  4,  5,  8,  9, 10, 11, 14, 15,
        18, 19, 22, 23,  6,  7,  8,  9, 16, 17, 20, 21,  6,  7,  8,  9, 16,
        17, 20, 21,  8,  9, 10, 11, 18, 19, 22, 23,  8,  9, 10, 11, 18, 19,
        22, 23])
        # fmt: on

        self.assertTrue(np.allclose(M.data, M_known_data))
        self.assertTrue(np.allclose(M.indptr, M_known_indptr))
        self.assertTrue(np.allclose(M.indices, M_known_indices))


if __name__ == "__main__":
    unittest.main()
